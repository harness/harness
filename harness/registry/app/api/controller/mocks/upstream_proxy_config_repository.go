// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/harness/gitness/registry/types"

	mock "github.com/stretchr/testify/mock"
)

// UpstreamProxyConfigRepository is an autogenerated mock type for the UpstreamProxyConfigRepository type
type UpstreamProxyConfigRepository struct {
	mock.Mock
}

// CountAll provides a mock function with given fields: ctx, parentID, packageTypes, search
func (_m *UpstreamProxyConfigRepository) CountAll(ctx context.Context, parentID string, packageTypes []string, search string) (int64, error) {
	ret := _m.Called(ctx, parentID, packageTypes, search)

	if len(ret) == 0 {
		panic("no return value specified for CountAll")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, string) (int64, error)); ok {
		return rf(ctx, parentID, packageTypes, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, string) int64); ok {
		r0 = rf(ctx, parentID, packageTypes, search)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, string) error); ok {
		r1 = rf(ctx, parentID, packageTypes, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, upstreamproxyRecord
func (_m *UpstreamProxyConfigRepository) Create(ctx context.Context, upstreamproxyRecord *types.UpstreamProxyConfig) (int64, error) {
	ret := _m.Called(ctx, upstreamproxyRecord)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpstreamProxyConfig) (int64, error)); ok {
		return rf(ctx, upstreamproxyRecord)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpstreamProxyConfig) int64); ok {
		r0 = rf(ctx, upstreamproxyRecord)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.UpstreamProxyConfig) error); ok {
		r1 = rf(ctx, upstreamproxyRecord)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, parentID, repoKey
func (_m *UpstreamProxyConfigRepository) Delete(ctx context.Context, parentID int64, repoKey string) error {
	ret := _m.Called(ctx, parentID, repoKey)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, parentID, repoKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *UpstreamProxyConfigRepository) Get(ctx context.Context, id int64) (*types.UpstreamProxy, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *types.UpstreamProxy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*types.UpstreamProxy, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *types.UpstreamProxy); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.UpstreamProxy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, parentID, packageTypes, sortByField, sortByOrder, limit, offset, search
func (_m *UpstreamProxyConfigRepository) GetAll(ctx context.Context, parentID int64, packageTypes []string, sortByField string, sortByOrder string, limit int, offset int, search string) (*[]types.UpstreamProxy, error) {
	ret := _m.Called(ctx, parentID, packageTypes, sortByField, sortByOrder, limit, offset, search)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *[]types.UpstreamProxy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []string, string, string, int, int, string) (*[]types.UpstreamProxy, error)); ok {
		return rf(ctx, parentID, packageTypes, sortByField, sortByOrder, limit, offset, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []string, string, string, int, int, string) *[]types.UpstreamProxy); ok {
		r0 = rf(ctx, parentID, packageTypes, sortByField, sortByOrder, limit, offset, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]types.UpstreamProxy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []string, string, string, int, int, string) error); ok {
		r1 = rf(ctx, parentID, packageTypes, sortByField, sortByOrder, limit, offset, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByParentID provides a mock function with given fields: ctx, parentID
func (_m *UpstreamProxyConfigRepository) GetByParentID(ctx context.Context, parentID string) (*[]types.UpstreamProxy, error) {
	ret := _m.Called(ctx, parentID)

	if len(ret) == 0 {
		panic("no return value specified for GetByParentID")
	}

	var r0 *[]types.UpstreamProxy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*[]types.UpstreamProxy, error)); ok {
		return rf(ctx, parentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]types.UpstreamProxy); ok {
		r0 = rf(ctx, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]types.UpstreamProxy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRegistryIdentifier provides a mock function with given fields: ctx, parentID, repoKey
func (_m *UpstreamProxyConfigRepository) GetByRegistryIdentifier(ctx context.Context, parentID int64, repoKey string) (*types.UpstreamProxy, error) {
	ret := _m.Called(ctx, parentID, repoKey)

	if len(ret) == 0 {
		panic("no return value specified for GetByRegistryIdentifier")
	}

	var r0 *types.UpstreamProxy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*types.UpstreamProxy, error)); ok {
		return rf(ctx, parentID, repoKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *types.UpstreamProxy); ok {
		r0 = rf(ctx, parentID, repoKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.UpstreamProxy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, parentID, repoKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, upstreamproxyRecord
func (_m *UpstreamProxyConfigRepository) Update(ctx context.Context, upstreamproxyRecord *types.UpstreamProxyConfig) error {
	ret := _m.Called(ctx, upstreamproxyRecord)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpstreamProxyConfig) error); ok {
		r0 = rf(ctx, upstreamproxyRecord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUpstreamProxyConfigRepository creates a new instance of UpstreamProxyConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpstreamProxyConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpstreamProxyConfigRepository {
	mock := &UpstreamProxyConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
