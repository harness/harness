// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/harness/gitness/registry/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQuarantineArtifactRepository creates a new instance of MockQuarantineArtifactRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuarantineArtifactRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuarantineArtifactRepository {
	mock := &MockQuarantineArtifactRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuarantineArtifactRepository is an autogenerated mock type for the QuarantineArtifactRepository type
type MockQuarantineArtifactRepository struct {
	mock.Mock
}

type MockQuarantineArtifactRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuarantineArtifactRepository) EXPECT() *MockQuarantineArtifactRepository_Expecter {
	return &MockQuarantineArtifactRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockQuarantineArtifactRepository
func (_mock *MockQuarantineArtifactRepository) Create(ctx context.Context, artifact *types.QuarantineArtifact) error {
	ret := _mock.Called(ctx, artifact)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.QuarantineArtifact) error); ok {
		r0 = returnFunc(ctx, artifact)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuarantineArtifactRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockQuarantineArtifactRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - artifact *types.QuarantineArtifact
func (_e *MockQuarantineArtifactRepository_Expecter) Create(ctx interface{}, artifact interface{}) *MockQuarantineArtifactRepository_Create_Call {
	return &MockQuarantineArtifactRepository_Create_Call{Call: _e.mock.On("Create", ctx, artifact)}
}

func (_c *MockQuarantineArtifactRepository_Create_Call) Run(run func(ctx context.Context, artifact *types.QuarantineArtifact)) *MockQuarantineArtifactRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.QuarantineArtifact
		if args[1] != nil {
			arg1 = args[1].(*types.QuarantineArtifact)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuarantineArtifactRepository_Create_Call) Return(err error) *MockQuarantineArtifactRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuarantineArtifactRepository_Create_Call) RunAndReturn(run func(ctx context.Context, artifact *types.QuarantineArtifact) error) *MockQuarantineArtifactRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByRegistryIDArtifactAndFilePath provides a mock function for the type MockQuarantineArtifactRepository
func (_mock *MockQuarantineArtifactRepository) DeleteByRegistryIDArtifactAndFilePath(ctx context.Context, registryID int64, artifactID *int64, imageID int64, nodeID *string) error {
	ret := _mock.Called(ctx, registryID, artifactID, imageID, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByRegistryIDArtifactAndFilePath")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *int64, int64, *string) error); ok {
		r0 = returnFunc(ctx, registryID, artifactID, imageID, nodeID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuarantineArtifactRepository_DeleteByRegistryIDArtifactAndFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByRegistryIDArtifactAndFilePath'
type MockQuarantineArtifactRepository_DeleteByRegistryIDArtifactAndFilePath_Call struct {
	*mock.Call
}

// DeleteByRegistryIDArtifactAndFilePath is a helper method to define mock.On call
//   - ctx context.Context
//   - registryID int64
//   - artifactID *int64
//   - imageID int64
//   - nodeID *string
func (_e *MockQuarantineArtifactRepository_Expecter) DeleteByRegistryIDArtifactAndFilePath(ctx interface{}, registryID interface{}, artifactID interface{}, imageID interface{}, nodeID interface{}) *MockQuarantineArtifactRepository_DeleteByRegistryIDArtifactAndFilePath_Call {
	return &MockQuarantineArtifactRepository_DeleteByRegistryIDArtifactAndFilePath_Call{Call: _e.mock.On("DeleteByRegistryIDArtifactAndFilePath", ctx, registryID, artifactID, imageID, nodeID)}
}

func (_c *MockQuarantineArtifactRepository_DeleteByRegistryIDArtifactAndFilePath_Call) Run(run func(ctx context.Context, registryID int64, artifactID *int64, imageID int64, nodeID *string)) *MockQuarantineArtifactRepository_DeleteByRegistryIDArtifactAndFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		var arg3 int64
		if args[3] != nil {
			arg3 = args[3].(int64)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockQuarantineArtifactRepository_DeleteByRegistryIDArtifactAndFilePath_Call) Return(err error) *MockQuarantineArtifactRepository_DeleteByRegistryIDArtifactAndFilePath_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuarantineArtifactRepository_DeleteByRegistryIDArtifactAndFilePath_Call) RunAndReturn(run func(ctx context.Context, registryID int64, artifactID *int64, imageID int64, nodeID *string) error) *MockQuarantineArtifactRepository_DeleteByRegistryIDArtifactAndFilePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFilePath provides a mock function for the type MockQuarantineArtifactRepository
func (_mock *MockQuarantineArtifactRepository) GetByFilePath(ctx context.Context, filePath string, registryID int64, artifact string, version string) ([]*types.QuarantineArtifact, error) {
	ret := _mock.Called(ctx, filePath, registryID, artifact, version)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilePath")
	}

	var r0 []*types.QuarantineArtifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64, string, string) ([]*types.QuarantineArtifact, error)); ok {
		return returnFunc(ctx, filePath, registryID, artifact, version)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int64, string, string) []*types.QuarantineArtifact); ok {
		r0 = returnFunc(ctx, filePath, registryID, artifact, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.QuarantineArtifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int64, string, string) error); ok {
		r1 = returnFunc(ctx, filePath, registryID, artifact, version)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuarantineArtifactRepository_GetByFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFilePath'
type MockQuarantineArtifactRepository_GetByFilePath_Call struct {
	*mock.Call
}

// GetByFilePath is a helper method to define mock.On call
//   - ctx context.Context
//   - filePath string
//   - registryID int64
//   - artifact string
//   - version string
func (_e *MockQuarantineArtifactRepository_Expecter) GetByFilePath(ctx interface{}, filePath interface{}, registryID interface{}, artifact interface{}, version interface{}) *MockQuarantineArtifactRepository_GetByFilePath_Call {
	return &MockQuarantineArtifactRepository_GetByFilePath_Call{Call: _e.mock.On("GetByFilePath", ctx, filePath, registryID, artifact, version)}
}

func (_c *MockQuarantineArtifactRepository_GetByFilePath_Call) Run(run func(ctx context.Context, filePath string, registryID int64, artifact string, version string)) *MockQuarantineArtifactRepository_GetByFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockQuarantineArtifactRepository_GetByFilePath_Call) Return(quarantineArtifacts []*types.QuarantineArtifact, err error) *MockQuarantineArtifactRepository_GetByFilePath_Call {
	_c.Call.Return(quarantineArtifacts, err)
	return _c
}

func (_c *MockQuarantineArtifactRepository_GetByFilePath_Call) RunAndReturn(run func(ctx context.Context, filePath string, registryID int64, artifact string, version string) ([]*types.QuarantineArtifact, error)) *MockQuarantineArtifactRepository_GetByFilePath_Call {
	_c.Call.Return(run)
	return _c
}
