// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/harness/gitness/registry/types"
)

// RegistryFinder is an autogenerated mock type for the RegistryFinder type
type RegistryFinder struct {
	mock.Mock
}

type RegistryFinder_Expecter struct {
	mock *mock.Mock
}

func (_m *RegistryFinder) EXPECT() *RegistryFinder_Expecter {
	return &RegistryFinder_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, parentID, name
func (_m *RegistryFinder) Delete(ctx context.Context, parentID int64, name string) error {
	ret := _m.Called(ctx, parentID, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, parentID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistryFinder_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RegistryFinder_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - name string
func (_e *RegistryFinder_Expecter) Delete(ctx interface{}, parentID interface{}, name interface{}) *RegistryFinder_Delete_Call {
	return &RegistryFinder_Delete_Call{Call: _e.mock.On("Delete", ctx, parentID, name)}
}

func (_c *RegistryFinder_Delete_Call) Run(run func(ctx context.Context, parentID int64, name string)) *RegistryFinder_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *RegistryFinder_Delete_Call) Return(err error) *RegistryFinder_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RegistryFinder_Delete_Call) RunAndReturn(run func(context.Context, int64, string) error) *RegistryFinder_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, repoID
func (_m *RegistryFinder) FindByID(ctx context.Context, repoID int64) (*types.Registry, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *types.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*types.Registry, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *types.Registry); ok {
		r0 = rf(ctx, repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryFinder_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type RegistryFinder_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
func (_e *RegistryFinder_Expecter) FindByID(ctx interface{}, repoID interface{}) *RegistryFinder_FindByID_Call {
	return &RegistryFinder_FindByID_Call{Call: _e.mock.On("FindByID", ctx, repoID)}
}

func (_c *RegistryFinder_FindByID_Call) Run(run func(ctx context.Context, repoID int64)) *RegistryFinder_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *RegistryFinder_FindByID_Call) Return(_a0 *types.Registry, _a1 error) *RegistryFinder_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RegistryFinder_FindByID_Call) RunAndReturn(run func(context.Context, int64) (*types.Registry, error)) *RegistryFinder_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRootParentID provides a mock function with given fields: ctx, rootParentID, regIdentifier
func (_m *RegistryFinder) FindByRootParentID(ctx context.Context, rootParentID int64, regIdentifier string) (*types.Registry, error) {
	ret := _m.Called(ctx, rootParentID, regIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for FindByRootParentID")
	}

	var r0 *types.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*types.Registry, error)); ok {
		return rf(ctx, rootParentID, regIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *types.Registry); ok {
		r0 = rf(ctx, rootParentID, regIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, rootParentID, regIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryFinder_FindByRootParentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRootParentID'
type RegistryFinder_FindByRootParentID_Call struct {
	*mock.Call
}

// FindByRootParentID is a helper method to define mock.On call
//   - ctx context.Context
//   - rootParentID int64
//   - regIdentifier string
func (_e *RegistryFinder_Expecter) FindByRootParentID(ctx interface{}, rootParentID interface{}, regIdentifier interface{}) *RegistryFinder_FindByRootParentID_Call {
	return &RegistryFinder_FindByRootParentID_Call{Call: _e.mock.On("FindByRootParentID", ctx, rootParentID, regIdentifier)}
}

func (_c *RegistryFinder_FindByRootParentID_Call) Run(run func(ctx context.Context, rootParentID int64, regIdentifier string)) *RegistryFinder_FindByRootParentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *RegistryFinder_FindByRootParentID_Call) Return(_a0 *types.Registry, _a1 error) *RegistryFinder_FindByRootParentID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RegistryFinder_FindByRootParentID_Call) RunAndReturn(run func(context.Context, int64, string) (*types.Registry, error)) *RegistryFinder_FindByRootParentID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRootRef provides a mock function with given fields: ctx, rootParentRef, regIdentifier
func (_m *RegistryFinder) FindByRootRef(ctx context.Context, rootParentRef string, regIdentifier string) (*types.Registry, error) {
	ret := _m.Called(ctx, rootParentRef, regIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for FindByRootRef")
	}

	var r0 *types.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*types.Registry, error)); ok {
		return rf(ctx, rootParentRef, regIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.Registry); ok {
		r0 = rf(ctx, rootParentRef, regIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, rootParentRef, regIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryFinder_FindByRootRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRootRef'
type RegistryFinder_FindByRootRef_Call struct {
	*mock.Call
}

// FindByRootRef is a helper method to define mock.On call
//   - ctx context.Context
//   - rootParentRef string
//   - regIdentifier string
func (_e *RegistryFinder_Expecter) FindByRootRef(ctx interface{}, rootParentRef interface{}, regIdentifier interface{}) *RegistryFinder_FindByRootRef_Call {
	return &RegistryFinder_FindByRootRef_Call{Call: _e.mock.On("FindByRootRef", ctx, rootParentRef, regIdentifier)}
}

func (_c *RegistryFinder_FindByRootRef_Call) Run(run func(ctx context.Context, rootParentRef string, regIdentifier string)) *RegistryFinder_FindByRootRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RegistryFinder_FindByRootRef_Call) Return(_a0 *types.Registry, _a1 error) *RegistryFinder_FindByRootRef_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RegistryFinder_FindByRootRef_Call) RunAndReturn(run func(context.Context, string, string) (*types.Registry, error)) *RegistryFinder_FindByRootRef_Call {
	_c.Call.Return(run)
	return _c
}

// MarkChanged provides a mock function with given fields: ctx, reg
func (_m *RegistryFinder) MarkChanged(ctx context.Context, reg *types.Registry) {
	_m.Called(ctx, reg)
}

// RegistryFinder_MarkChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkChanged'
type RegistryFinder_MarkChanged_Call struct {
	*mock.Call
}

// MarkChanged is a helper method to define mock.On call
//   - ctx context.Context
//   - reg *types.Registry
func (_e *RegistryFinder_Expecter) MarkChanged(ctx interface{}, reg interface{}) *RegistryFinder_MarkChanged_Call {
	return &RegistryFinder_MarkChanged_Call{Call: _e.mock.On("MarkChanged", ctx, reg)}
}

func (_c *RegistryFinder_MarkChanged_Call) Run(run func(ctx context.Context, reg *types.Registry)) *RegistryFinder_MarkChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Registry))
	})
	return _c
}

func (_c *RegistryFinder_MarkChanged_Call) Return() *RegistryFinder_MarkChanged_Call {
	_c.Call.Return()
	return _c
}

func (_c *RegistryFinder_MarkChanged_Call) RunAndReturn(run func(context.Context, *types.Registry)) *RegistryFinder_MarkChanged_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function with given fields: ctx, registry
func (_m *RegistryFinder) Update(ctx context.Context, registry *types.Registry) error {
	ret := _m.Called(ctx, registry)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Registry) error); ok {
		r0 = rf(ctx, registry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistryFinder_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RegistryFinder_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - registry *types.Registry
func (_e *RegistryFinder_Expecter) Update(ctx interface{}, registry interface{}) *RegistryFinder_Update_Call {
	return &RegistryFinder_Update_Call{Call: _e.mock.On("Update", ctx, registry)}
}

func (_c *RegistryFinder_Update_Call) Run(run func(ctx context.Context, registry *types.Registry)) *RegistryFinder_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Registry))
	})
	return _c
}

func (_c *RegistryFinder_Update_Call) Return(err error) *RegistryFinder_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RegistryFinder_Update_Call) RunAndReturn(run func(context.Context, *types.Registry) error) *RegistryFinder_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRegistryFinder creates a new instance of RegistryFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistryFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegistryFinder {
	mock := &RegistryFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
