// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// GenerateContainerGITCloneURL provides a mock function with given fields: ctx, repoPath
func (_m *Provider) GenerateContainerGITCloneURL(ctx context.Context, repoPath string) string {
	ret := _m.Called(ctx, repoPath)

	if len(ret) == 0 {
		panic("no return value specified for GenerateContainerGITCloneURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, repoPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateGITCloneSSHURL provides a mock function with given fields: ctx, repoPath
func (_m *Provider) GenerateGITCloneSSHURL(ctx context.Context, repoPath string) string {
	ret := _m.Called(ctx, repoPath)

	if len(ret) == 0 {
		panic("no return value specified for GenerateGITCloneSSHURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, repoPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateGITCloneURL provides a mock function with given fields: ctx, repoPath
func (_m *Provider) GenerateGITCloneURL(ctx context.Context, repoPath string) string {
	ret := _m.Called(ctx, repoPath)

	if len(ret) == 0 {
		panic("no return value specified for GenerateGITCloneURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, repoPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateUIBuildURL provides a mock function with given fields: ctx, repoPath, pipelineIdentifier, seqNumber
func (_m *Provider) GenerateUIBuildURL(ctx context.Context, repoPath string, pipelineIdentifier string, seqNumber int64) string {
	ret := _m.Called(ctx, repoPath, pipelineIdentifier, seqNumber)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUIBuildURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) string); ok {
		r0 = rf(ctx, repoPath, pipelineIdentifier, seqNumber)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateUICompareURL provides a mock function with given fields: ctx, repoPath, ref1, ref2
func (_m *Provider) GenerateUICompareURL(ctx context.Context, repoPath string, ref1 string, ref2 string) string {
	ret := _m.Called(ctx, repoPath, ref1, ref2)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUICompareURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, repoPath, ref1, ref2)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateUIPRURL provides a mock function with given fields: ctx, repoPath, prID
func (_m *Provider) GenerateUIPRURL(ctx context.Context, repoPath string, prID int64) string {
	ret := _m.Called(ctx, repoPath, prID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUIPRURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) string); ok {
		r0 = rf(ctx, repoPath, prID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateUIRefURL provides a mock function with given fields: ctx, repoPath, ref
func (_m *Provider) GenerateUIRefURL(ctx context.Context, repoPath string, ref string) string {
	ret := _m.Called(ctx, repoPath, ref)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUIRefURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, repoPath, ref)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateUIRegistryURL provides a mock function with given fields: ctx, parentSpacePath, registryName
func (_m *Provider) GenerateUIRegistryURL(ctx context.Context, parentSpacePath string, registryName string) string {
	ret := _m.Called(ctx, parentSpacePath, registryName)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUIRegistryURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, parentSpacePath, registryName)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateUIRepoURL provides a mock function with given fields: ctx, repoPath
func (_m *Provider) GenerateUIRepoURL(ctx context.Context, repoPath string) string {
	ret := _m.Called(ctx, repoPath)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUIRepoURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, repoPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAPIHostname provides a mock function with given fields: ctx
func (_m *Provider) GetAPIHostname(ctx context.Context) string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAPIHostname")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAPIProto provides a mock function with given fields: ctx
func (_m *Provider) GetAPIProto(ctx context.Context) string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAPIProto")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetGITHostname provides a mock function with given fields: ctx
func (_m *Provider) GetGITHostname(ctx context.Context) string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGITHostname")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetInternalAPIURL provides a mock function with given fields: ctx
func (_m *Provider) GetInternalAPIURL(ctx context.Context) string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetInternalAPIURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUIBaseURL provides a mock function with given fields: ctx, params
func (_m *Provider) GetUIBaseURL(ctx context.Context, params ...string) string {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUIBaseURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, ...string) string); ok {
		r0 = rf(ctx, params...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PackageURL provides a mock function with given fields: ctx, regRef, pkgType, params
func (_m *Provider) PackageURL(ctx context.Context, regRef string, pkgType string, params ...string) string {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, regRef, pkgType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PackageURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) string); ok {
		r0 = rf(ctx, regRef, pkgType, params...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RegistryURL provides a mock function with given fields: ctx, params
func (_m *Provider) RegistryURL(ctx context.Context, params ...string) string {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegistryURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, ...string) string); ok {
		r0 = rf(ctx, params...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
