// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/harness/gitness/registry/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTagRepository creates a new instance of MockTagRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagRepository {
	mock := &MockTagRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTagRepository is an autogenerated mock type for the TagRepository type
type MockTagRepository struct {
	mock.Mock
}

type MockTagRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagRepository) EXPECT() *MockTagRepository_Expecter {
	return &MockTagRepository_Expecter{mock: &_m.Mock}
}

// CountAllArtifactsByParentID provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) CountAllArtifactsByParentID(ctx context.Context, parentID int64, registryIDs *[]string, search string, latestVersion bool, packageTypes []string, untaggedImagesEnabled bool) (int64, error) {
	ret := _mock.Called(ctx, parentID, registryIDs, search, latestVersion, packageTypes, untaggedImagesEnabled)

	if len(ret) == 0 {
		panic("no return value specified for CountAllArtifactsByParentID")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *[]string, string, bool, []string, bool) (int64, error)); ok {
		return returnFunc(ctx, parentID, registryIDs, search, latestVersion, packageTypes, untaggedImagesEnabled)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *[]string, string, bool, []string, bool) int64); ok {
		r0 = returnFunc(ctx, parentID, registryIDs, search, latestVersion, packageTypes, untaggedImagesEnabled)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, *[]string, string, bool, []string, bool) error); ok {
		r1 = returnFunc(ctx, parentID, registryIDs, search, latestVersion, packageTypes, untaggedImagesEnabled)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_CountAllArtifactsByParentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAllArtifactsByParentID'
type MockTagRepository_CountAllArtifactsByParentID_Call struct {
	*mock.Call
}

// CountAllArtifactsByParentID is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - registryIDs *[]string
//   - search string
//   - latestVersion bool
//   - packageTypes []string
//   - untaggedImagesEnabled bool
func (_e *MockTagRepository_Expecter) CountAllArtifactsByParentID(ctx interface{}, parentID interface{}, registryIDs interface{}, search interface{}, latestVersion interface{}, packageTypes interface{}, untaggedImagesEnabled interface{}) *MockTagRepository_CountAllArtifactsByParentID_Call {
	return &MockTagRepository_CountAllArtifactsByParentID_Call{Call: _e.mock.On("CountAllArtifactsByParentID", ctx, parentID, registryIDs, search, latestVersion, packageTypes, untaggedImagesEnabled)}
}

func (_c *MockTagRepository_CountAllArtifactsByParentID_Call) Run(run func(ctx context.Context, parentID int64, registryIDs *[]string, search string, latestVersion bool, packageTypes []string, untaggedImagesEnabled bool)) *MockTagRepository_CountAllArtifactsByParentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 *[]string
		if args[2] != nil {
			arg2 = args[2].(*[]string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		var arg5 []string
		if args[5] != nil {
			arg5 = args[5].([]string)
		}
		var arg6 bool
		if args[6] != nil {
			arg6 = args[6].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockTagRepository_CountAllArtifactsByParentID_Call) Return(n int64, err error) *MockTagRepository_CountAllArtifactsByParentID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockTagRepository_CountAllArtifactsByParentID_Call) RunAndReturn(run func(ctx context.Context, parentID int64, registryIDs *[]string, search string, latestVersion bool, packageTypes []string, untaggedImagesEnabled bool) (int64, error)) *MockTagRepository_CountAllArtifactsByParentID_Call {
	_c.Call.Return(run)
	return _c
}

// CountAllArtifactsByRepo provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) CountAllArtifactsByRepo(ctx context.Context, parentID int64, repoKey string, search string, labels []string) (int64, error) {
	ret := _mock.Called(ctx, parentID, repoKey, search, labels)

	if len(ret) == 0 {
		panic("no return value specified for CountAllArtifactsByRepo")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, []string) (int64, error)); ok {
		return returnFunc(ctx, parentID, repoKey, search, labels)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, []string) int64); ok {
		r0 = returnFunc(ctx, parentID, repoKey, search, labels)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string, []string) error); ok {
		r1 = returnFunc(ctx, parentID, repoKey, search, labels)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_CountAllArtifactsByRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAllArtifactsByRepo'
type MockTagRepository_CountAllArtifactsByRepo_Call struct {
	*mock.Call
}

// CountAllArtifactsByRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - repoKey string
//   - search string
//   - labels []string
func (_e *MockTagRepository_Expecter) CountAllArtifactsByRepo(ctx interface{}, parentID interface{}, repoKey interface{}, search interface{}, labels interface{}) *MockTagRepository_CountAllArtifactsByRepo_Call {
	return &MockTagRepository_CountAllArtifactsByRepo_Call{Call: _e.mock.On("CountAllArtifactsByRepo", ctx, parentID, repoKey, search, labels)}
}

func (_c *MockTagRepository_CountAllArtifactsByRepo_Call) Run(run func(ctx context.Context, parentID int64, repoKey string, search string, labels []string)) *MockTagRepository_CountAllArtifactsByRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 []string
		if args[4] != nil {
			arg4 = args[4].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTagRepository_CountAllArtifactsByRepo_Call) Return(n int64, err error) *MockTagRepository_CountAllArtifactsByRepo_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockTagRepository_CountAllArtifactsByRepo_Call) RunAndReturn(run func(ctx context.Context, parentID int64, repoKey string, search string, labels []string) (int64, error)) *MockTagRepository_CountAllArtifactsByRepo_Call {
	_c.Call.Return(run)
	return _c
}

// CountAllTagsByRepoAndImage provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) CountAllTagsByRepoAndImage(ctx context.Context, parentID int64, repoKey string, image string, search string) (int64, error) {
	ret := _mock.Called(ctx, parentID, repoKey, image, search)

	if len(ret) == 0 {
		panic("no return value specified for CountAllTagsByRepoAndImage")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string) (int64, error)); ok {
		return returnFunc(ctx, parentID, repoKey, image, search)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string) int64); ok {
		r0 = returnFunc(ctx, parentID, repoKey, image, search)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string, string) error); ok {
		r1 = returnFunc(ctx, parentID, repoKey, image, search)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_CountAllTagsByRepoAndImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAllTagsByRepoAndImage'
type MockTagRepository_CountAllTagsByRepoAndImage_Call struct {
	*mock.Call
}

// CountAllTagsByRepoAndImage is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - repoKey string
//   - image string
//   - search string
func (_e *MockTagRepository_Expecter) CountAllTagsByRepoAndImage(ctx interface{}, parentID interface{}, repoKey interface{}, image interface{}, search interface{}) *MockTagRepository_CountAllTagsByRepoAndImage_Call {
	return &MockTagRepository_CountAllTagsByRepoAndImage_Call{Call: _e.mock.On("CountAllTagsByRepoAndImage", ctx, parentID, repoKey, image, search)}
}

func (_c *MockTagRepository_CountAllTagsByRepoAndImage_Call) Run(run func(ctx context.Context, parentID int64, repoKey string, image string, search string)) *MockTagRepository_CountAllTagsByRepoAndImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTagRepository_CountAllTagsByRepoAndImage_Call) Return(n int64, err error) *MockTagRepository_CountAllTagsByRepoAndImage_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockTagRepository_CountAllTagsByRepoAndImage_Call) RunAndReturn(run func(ctx context.Context, parentID int64, repoKey string, image string, search string) (int64, error)) *MockTagRepository_CountAllTagsByRepoAndImage_Call {
	_c.Call.Return(run)
	return _c
}

// CountOciVersionByRepoAndImage provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) CountOciVersionByRepoAndImage(ctx context.Context, parentID int64, repoKey string, image string, search string) (int64, error) {
	ret := _mock.Called(ctx, parentID, repoKey, image, search)

	if len(ret) == 0 {
		panic("no return value specified for CountOciVersionByRepoAndImage")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string) (int64, error)); ok {
		return returnFunc(ctx, parentID, repoKey, image, search)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string) int64); ok {
		r0 = returnFunc(ctx, parentID, repoKey, image, search)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string, string) error); ok {
		r1 = returnFunc(ctx, parentID, repoKey, image, search)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_CountOciVersionByRepoAndImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountOciVersionByRepoAndImage'
type MockTagRepository_CountOciVersionByRepoAndImage_Call struct {
	*mock.Call
}

// CountOciVersionByRepoAndImage is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - repoKey string
//   - image string
//   - search string
func (_e *MockTagRepository_Expecter) CountOciVersionByRepoAndImage(ctx interface{}, parentID interface{}, repoKey interface{}, image interface{}, search interface{}) *MockTagRepository_CountOciVersionByRepoAndImage_Call {
	return &MockTagRepository_CountOciVersionByRepoAndImage_Call{Call: _e.mock.On("CountOciVersionByRepoAndImage", ctx, parentID, repoKey, image, search)}
}

func (_c *MockTagRepository_CountOciVersionByRepoAndImage_Call) Run(run func(ctx context.Context, parentID int64, repoKey string, image string, search string)) *MockTagRepository_CountOciVersionByRepoAndImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTagRepository_CountOciVersionByRepoAndImage_Call) Return(n int64, err error) *MockTagRepository_CountOciVersionByRepoAndImage_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockTagRepository_CountOciVersionByRepoAndImage_Call) RunAndReturn(run func(ctx context.Context, parentID int64, repoKey string, image string, search string) (int64, error)) *MockTagRepository_CountOciVersionByRepoAndImage_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdate provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) CreateOrUpdate(ctx context.Context, t *types.Tag) error {
	ret := _mock.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.Tag) error); ok {
		r0 = returnFunc(ctx, t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTagRepository_CreateOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdate'
type MockTagRepository_CreateOrUpdate_Call struct {
	*mock.Call
}

// CreateOrUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - t *types.Tag
func (_e *MockTagRepository_Expecter) CreateOrUpdate(ctx interface{}, t interface{}) *MockTagRepository_CreateOrUpdate_Call {
	return &MockTagRepository_CreateOrUpdate_Call{Call: _e.mock.On("CreateOrUpdate", ctx, t)}
}

func (_c *MockTagRepository_CreateOrUpdate_Call) Run(run func(ctx context.Context, t *types.Tag)) *MockTagRepository_CreateOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.Tag
		if args[1] != nil {
			arg1 = args[1].(*types.Tag)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagRepository_CreateOrUpdate_Call) Return(err error) *MockTagRepository_CreateOrUpdate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTagRepository_CreateOrUpdate_Call) RunAndReturn(run func(ctx context.Context, t *types.Tag) error) *MockTagRepository_CreateOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTag provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) DeleteTag(ctx context.Context, registryID int64, imageName string, name string) error {
	ret := _mock.Called(ctx, registryID, imageName, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTag")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = returnFunc(ctx, registryID, imageName, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTagRepository_DeleteTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTag'
type MockTagRepository_DeleteTag_Call struct {
	*mock.Call
}

// DeleteTag is a helper method to define mock.On call
//   - ctx context.Context
//   - registryID int64
//   - imageName string
//   - name string
func (_e *MockTagRepository_Expecter) DeleteTag(ctx interface{}, registryID interface{}, imageName interface{}, name interface{}) *MockTagRepository_DeleteTag_Call {
	return &MockTagRepository_DeleteTag_Call{Call: _e.mock.On("DeleteTag", ctx, registryID, imageName, name)}
}

func (_c *MockTagRepository_DeleteTag_Call) Run(run func(ctx context.Context, registryID int64, imageName string, name string)) *MockTagRepository_DeleteTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTagRepository_DeleteTag_Call) Return(err error) *MockTagRepository_DeleteTag_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTagRepository_DeleteTag_Call) RunAndReturn(run func(ctx context.Context, registryID int64, imageName string, name string) error) *MockTagRepository_DeleteTag_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTagByManifestID provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) DeleteTagByManifestID(ctx context.Context, repoID int64, manifestID int64) (bool, error) {
	ret := _mock.Called(ctx, repoID, manifestID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTagByManifestID")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) (bool, error)); ok {
		return returnFunc(ctx, repoID, manifestID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) bool); ok {
		r0 = returnFunc(ctx, repoID, manifestID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = returnFunc(ctx, repoID, manifestID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_DeleteTagByManifestID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTagByManifestID'
type MockTagRepository_DeleteTagByManifestID_Call struct {
	*mock.Call
}

// DeleteTagByManifestID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - manifestID int64
func (_e *MockTagRepository_Expecter) DeleteTagByManifestID(ctx interface{}, repoID interface{}, manifestID interface{}) *MockTagRepository_DeleteTagByManifestID_Call {
	return &MockTagRepository_DeleteTagByManifestID_Call{Call: _e.mock.On("DeleteTagByManifestID", ctx, repoID, manifestID)}
}

func (_c *MockTagRepository_DeleteTagByManifestID_Call) Run(run func(ctx context.Context, repoID int64, manifestID int64)) *MockTagRepository_DeleteTagByManifestID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTagRepository_DeleteTagByManifestID_Call) Return(b bool, err error) *MockTagRepository_DeleteTagByManifestID_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockTagRepository_DeleteTagByManifestID_Call) RunAndReturn(run func(ctx context.Context, repoID int64, manifestID int64) (bool, error)) *MockTagRepository_DeleteTagByManifestID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTagByName provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) DeleteTagByName(ctx context.Context, repoID int64, name string) (bool, error) {
	ret := _mock.Called(ctx, repoID, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTagByName")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) (bool, error)); ok {
		return returnFunc(ctx, repoID, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) bool); ok {
		r0 = returnFunc(ctx, repoID, name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = returnFunc(ctx, repoID, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_DeleteTagByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTagByName'
type MockTagRepository_DeleteTagByName_Call struct {
	*mock.Call
}

// DeleteTagByName is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - name string
func (_e *MockTagRepository_Expecter) DeleteTagByName(ctx interface{}, repoID interface{}, name interface{}) *MockTagRepository_DeleteTagByName_Call {
	return &MockTagRepository_DeleteTagByName_Call{Call: _e.mock.On("DeleteTagByName", ctx, repoID, name)}
}

func (_c *MockTagRepository_DeleteTagByName_Call) Run(run func(ctx context.Context, repoID int64, name string)) *MockTagRepository_DeleteTagByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTagRepository_DeleteTagByName_Call) Return(b bool, err error) *MockTagRepository_DeleteTagByName_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockTagRepository_DeleteTagByName_Call) RunAndReturn(run func(ctx context.Context, repoID int64, name string) (bool, error)) *MockTagRepository_DeleteTagByName_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTagsByImageName provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) DeleteTagsByImageName(ctx context.Context, registryID int64, imageName string) error {
	ret := _mock.Called(ctx, registryID, imageName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTagsByImageName")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = returnFunc(ctx, registryID, imageName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTagRepository_DeleteTagsByImageName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTagsByImageName'
type MockTagRepository_DeleteTagsByImageName_Call struct {
	*mock.Call
}

// DeleteTagsByImageName is a helper method to define mock.On call
//   - ctx context.Context
//   - registryID int64
//   - imageName string
func (_e *MockTagRepository_Expecter) DeleteTagsByImageName(ctx interface{}, registryID interface{}, imageName interface{}) *MockTagRepository_DeleteTagsByImageName_Call {
	return &MockTagRepository_DeleteTagsByImageName_Call{Call: _e.mock.On("DeleteTagsByImageName", ctx, registryID, imageName)}
}

func (_c *MockTagRepository_DeleteTagsByImageName_Call) Run(run func(ctx context.Context, registryID int64, imageName string)) *MockTagRepository_DeleteTagsByImageName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTagRepository_DeleteTagsByImageName_Call) Return(err error) *MockTagRepository_DeleteTagsByImageName_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTagRepository_DeleteTagsByImageName_Call) RunAndReturn(run func(ctx context.Context, registryID int64, imageName string) error) *MockTagRepository_DeleteTagsByImageName_Call {
	_c.Call.Return(run)
	return _c
}

// FindTag provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) FindTag(ctx context.Context, repoID int64, imageName string, name string) (*types.Tag, error) {
	ret := _mock.Called(ctx, repoID, imageName, name)

	if len(ret) == 0 {
		panic("no return value specified for FindTag")
	}

	var r0 *types.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) (*types.Tag, error)); ok {
		return returnFunc(ctx, repoID, imageName, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) *types.Tag); ok {
		r0 = returnFunc(ctx, repoID, imageName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = returnFunc(ctx, repoID, imageName, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_FindTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTag'
type MockTagRepository_FindTag_Call struct {
	*mock.Call
}

// FindTag is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - imageName string
//   - name string
func (_e *MockTagRepository_Expecter) FindTag(ctx interface{}, repoID interface{}, imageName interface{}, name interface{}) *MockTagRepository_FindTag_Call {
	return &MockTagRepository_FindTag_Call{Call: _e.mock.On("FindTag", ctx, repoID, imageName, name)}
}

func (_c *MockTagRepository_FindTag_Call) Run(run func(ctx context.Context, repoID int64, imageName string, name string)) *MockTagRepository_FindTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTagRepository_FindTag_Call) Return(tag *types.Tag, err error) *MockTagRepository_FindTag_Call {
	_c.Call.Return(tag, err)
	return _c
}

func (_c *MockTagRepository_FindTag_Call) RunAndReturn(run func(ctx context.Context, repoID int64, imageName string, name string) (*types.Tag, error)) *MockTagRepository_FindTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllArtifactsByParentID provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetAllArtifactsByParentID(ctx context.Context, parentID int64, registryIDs *[]string, sortByField string, sortByOrder string, limit int, offset int, search string, latestVersion bool, packageTypes []string) (*[]types.ArtifactMetadata, error) {
	ret := _mock.Called(ctx, parentID, registryIDs, sortByField, sortByOrder, limit, offset, search, latestVersion, packageTypes)

	if len(ret) == 0 {
		panic("no return value specified for GetAllArtifactsByParentID")
	}

	var r0 *[]types.ArtifactMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *[]string, string, string, int, int, string, bool, []string) (*[]types.ArtifactMetadata, error)); ok {
		return returnFunc(ctx, parentID, registryIDs, sortByField, sortByOrder, limit, offset, search, latestVersion, packageTypes)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *[]string, string, string, int, int, string, bool, []string) *[]types.ArtifactMetadata); ok {
		r0 = returnFunc(ctx, parentID, registryIDs, sortByField, sortByOrder, limit, offset, search, latestVersion, packageTypes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]types.ArtifactMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, *[]string, string, string, int, int, string, bool, []string) error); ok {
		r1 = returnFunc(ctx, parentID, registryIDs, sortByField, sortByOrder, limit, offset, search, latestVersion, packageTypes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetAllArtifactsByParentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllArtifactsByParentID'
type MockTagRepository_GetAllArtifactsByParentID_Call struct {
	*mock.Call
}

// GetAllArtifactsByParentID is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - registryIDs *[]string
//   - sortByField string
//   - sortByOrder string
//   - limit int
//   - offset int
//   - search string
//   - latestVersion bool
//   - packageTypes []string
func (_e *MockTagRepository_Expecter) GetAllArtifactsByParentID(ctx interface{}, parentID interface{}, registryIDs interface{}, sortByField interface{}, sortByOrder interface{}, limit interface{}, offset interface{}, search interface{}, latestVersion interface{}, packageTypes interface{}) *MockTagRepository_GetAllArtifactsByParentID_Call {
	return &MockTagRepository_GetAllArtifactsByParentID_Call{Call: _e.mock.On("GetAllArtifactsByParentID", ctx, parentID, registryIDs, sortByField, sortByOrder, limit, offset, search, latestVersion, packageTypes)}
}

func (_c *MockTagRepository_GetAllArtifactsByParentID_Call) Run(run func(ctx context.Context, parentID int64, registryIDs *[]string, sortByField string, sortByOrder string, limit int, offset int, search string, latestVersion bool, packageTypes []string)) *MockTagRepository_GetAllArtifactsByParentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 *[]string
		if args[2] != nil {
			arg2 = args[2].(*[]string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 int
		if args[5] != nil {
			arg5 = args[5].(int)
		}
		var arg6 int
		if args[6] != nil {
			arg6 = args[6].(int)
		}
		var arg7 string
		if args[7] != nil {
			arg7 = args[7].(string)
		}
		var arg8 bool
		if args[8] != nil {
			arg8 = args[8].(bool)
		}
		var arg9 []string
		if args[9] != nil {
			arg9 = args[9].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
			arg9,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetAllArtifactsByParentID_Call) Return(artifactMetadatas *[]types.ArtifactMetadata, err error) *MockTagRepository_GetAllArtifactsByParentID_Call {
	_c.Call.Return(artifactMetadatas, err)
	return _c
}

func (_c *MockTagRepository_GetAllArtifactsByParentID_Call) RunAndReturn(run func(ctx context.Context, parentID int64, registryIDs *[]string, sortByField string, sortByOrder string, limit int, offset int, search string, latestVersion bool, packageTypes []string) (*[]types.ArtifactMetadata, error)) *MockTagRepository_GetAllArtifactsByParentID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllArtifactsByParentIDUntagged provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetAllArtifactsByParentIDUntagged(ctx context.Context, parentID int64, registryIDs *[]string, sortByField string, sortByOrder string, limit int, offset int, search string, packageTypes []string) (*[]types.ArtifactMetadata, error) {
	ret := _mock.Called(ctx, parentID, registryIDs, sortByField, sortByOrder, limit, offset, search, packageTypes)

	if len(ret) == 0 {
		panic("no return value specified for GetAllArtifactsByParentIDUntagged")
	}

	var r0 *[]types.ArtifactMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *[]string, string, string, int, int, string, []string) (*[]types.ArtifactMetadata, error)); ok {
		return returnFunc(ctx, parentID, registryIDs, sortByField, sortByOrder, limit, offset, search, packageTypes)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *[]string, string, string, int, int, string, []string) *[]types.ArtifactMetadata); ok {
		r0 = returnFunc(ctx, parentID, registryIDs, sortByField, sortByOrder, limit, offset, search, packageTypes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]types.ArtifactMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, *[]string, string, string, int, int, string, []string) error); ok {
		r1 = returnFunc(ctx, parentID, registryIDs, sortByField, sortByOrder, limit, offset, search, packageTypes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetAllArtifactsByParentIDUntagged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllArtifactsByParentIDUntagged'
type MockTagRepository_GetAllArtifactsByParentIDUntagged_Call struct {
	*mock.Call
}

// GetAllArtifactsByParentIDUntagged is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - registryIDs *[]string
//   - sortByField string
//   - sortByOrder string
//   - limit int
//   - offset int
//   - search string
//   - packageTypes []string
func (_e *MockTagRepository_Expecter) GetAllArtifactsByParentIDUntagged(ctx interface{}, parentID interface{}, registryIDs interface{}, sortByField interface{}, sortByOrder interface{}, limit interface{}, offset interface{}, search interface{}, packageTypes interface{}) *MockTagRepository_GetAllArtifactsByParentIDUntagged_Call {
	return &MockTagRepository_GetAllArtifactsByParentIDUntagged_Call{Call: _e.mock.On("GetAllArtifactsByParentIDUntagged", ctx, parentID, registryIDs, sortByField, sortByOrder, limit, offset, search, packageTypes)}
}

func (_c *MockTagRepository_GetAllArtifactsByParentIDUntagged_Call) Run(run func(ctx context.Context, parentID int64, registryIDs *[]string, sortByField string, sortByOrder string, limit int, offset int, search string, packageTypes []string)) *MockTagRepository_GetAllArtifactsByParentIDUntagged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 *[]string
		if args[2] != nil {
			arg2 = args[2].(*[]string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 int
		if args[5] != nil {
			arg5 = args[5].(int)
		}
		var arg6 int
		if args[6] != nil {
			arg6 = args[6].(int)
		}
		var arg7 string
		if args[7] != nil {
			arg7 = args[7].(string)
		}
		var arg8 []string
		if args[8] != nil {
			arg8 = args[8].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetAllArtifactsByParentIDUntagged_Call) Return(artifactMetadatas *[]types.ArtifactMetadata, err error) *MockTagRepository_GetAllArtifactsByParentIDUntagged_Call {
	_c.Call.Return(artifactMetadatas, err)
	return _c
}

func (_c *MockTagRepository_GetAllArtifactsByParentIDUntagged_Call) RunAndReturn(run func(ctx context.Context, parentID int64, registryIDs *[]string, sortByField string, sortByOrder string, limit int, offset int, search string, packageTypes []string) (*[]types.ArtifactMetadata, error)) *MockTagRepository_GetAllArtifactsByParentIDUntagged_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllArtifactsByRepo provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetAllArtifactsByRepo(ctx context.Context, parentID int64, repoKey string, sortByField string, sortByOrder string, limit int, offset int, search string, labels []string) (*[]types.ArtifactMetadata, error) {
	ret := _mock.Called(ctx, parentID, repoKey, sortByField, sortByOrder, limit, offset, search, labels)

	if len(ret) == 0 {
		panic("no return value specified for GetAllArtifactsByRepo")
	}

	var r0 *[]types.ArtifactMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string, int, int, string, []string) (*[]types.ArtifactMetadata, error)); ok {
		return returnFunc(ctx, parentID, repoKey, sortByField, sortByOrder, limit, offset, search, labels)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string, int, int, string, []string) *[]types.ArtifactMetadata); ok {
		r0 = returnFunc(ctx, parentID, repoKey, sortByField, sortByOrder, limit, offset, search, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]types.ArtifactMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string, string, int, int, string, []string) error); ok {
		r1 = returnFunc(ctx, parentID, repoKey, sortByField, sortByOrder, limit, offset, search, labels)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetAllArtifactsByRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllArtifactsByRepo'
type MockTagRepository_GetAllArtifactsByRepo_Call struct {
	*mock.Call
}

// GetAllArtifactsByRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - repoKey string
//   - sortByField string
//   - sortByOrder string
//   - limit int
//   - offset int
//   - search string
//   - labels []string
func (_e *MockTagRepository_Expecter) GetAllArtifactsByRepo(ctx interface{}, parentID interface{}, repoKey interface{}, sortByField interface{}, sortByOrder interface{}, limit interface{}, offset interface{}, search interface{}, labels interface{}) *MockTagRepository_GetAllArtifactsByRepo_Call {
	return &MockTagRepository_GetAllArtifactsByRepo_Call{Call: _e.mock.On("GetAllArtifactsByRepo", ctx, parentID, repoKey, sortByField, sortByOrder, limit, offset, search, labels)}
}

func (_c *MockTagRepository_GetAllArtifactsByRepo_Call) Run(run func(ctx context.Context, parentID int64, repoKey string, sortByField string, sortByOrder string, limit int, offset int, search string, labels []string)) *MockTagRepository_GetAllArtifactsByRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 int
		if args[5] != nil {
			arg5 = args[5].(int)
		}
		var arg6 int
		if args[6] != nil {
			arg6 = args[6].(int)
		}
		var arg7 string
		if args[7] != nil {
			arg7 = args[7].(string)
		}
		var arg8 []string
		if args[8] != nil {
			arg8 = args[8].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetAllArtifactsByRepo_Call) Return(artifactMetadatas *[]types.ArtifactMetadata, err error) *MockTagRepository_GetAllArtifactsByRepo_Call {
	_c.Call.Return(artifactMetadatas, err)
	return _c
}

func (_c *MockTagRepository_GetAllArtifactsByRepo_Call) RunAndReturn(run func(ctx context.Context, parentID int64, repoKey string, sortByField string, sortByOrder string, limit int, offset int, search string, labels []string) (*[]types.ArtifactMetadata, error)) *MockTagRepository_GetAllArtifactsByRepo_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllOciVersionsByRepoAndImage provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetAllOciVersionsByRepoAndImage(ctx context.Context, parentID int64, repoKey string, image string, sortByField string, sortByOrder string, limit int, offset int, search string) (*[]types.OciVersionMetadata, error) {
	ret := _mock.Called(ctx, parentID, repoKey, image, sortByField, sortByOrder, limit, offset, search)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOciVersionsByRepoAndImage")
	}

	var r0 *[]types.OciVersionMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string, string, int, int, string) (*[]types.OciVersionMetadata, error)); ok {
		return returnFunc(ctx, parentID, repoKey, image, sortByField, sortByOrder, limit, offset, search)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string, string, int, int, string) *[]types.OciVersionMetadata); ok {
		r0 = returnFunc(ctx, parentID, repoKey, image, sortByField, sortByOrder, limit, offset, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]types.OciVersionMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string, string, string, int, int, string) error); ok {
		r1 = returnFunc(ctx, parentID, repoKey, image, sortByField, sortByOrder, limit, offset, search)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetAllOciVersionsByRepoAndImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOciVersionsByRepoAndImage'
type MockTagRepository_GetAllOciVersionsByRepoAndImage_Call struct {
	*mock.Call
}

// GetAllOciVersionsByRepoAndImage is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - repoKey string
//   - image string
//   - sortByField string
//   - sortByOrder string
//   - limit int
//   - offset int
//   - search string
func (_e *MockTagRepository_Expecter) GetAllOciVersionsByRepoAndImage(ctx interface{}, parentID interface{}, repoKey interface{}, image interface{}, sortByField interface{}, sortByOrder interface{}, limit interface{}, offset interface{}, search interface{}) *MockTagRepository_GetAllOciVersionsByRepoAndImage_Call {
	return &MockTagRepository_GetAllOciVersionsByRepoAndImage_Call{Call: _e.mock.On("GetAllOciVersionsByRepoAndImage", ctx, parentID, repoKey, image, sortByField, sortByOrder, limit, offset, search)}
}

func (_c *MockTagRepository_GetAllOciVersionsByRepoAndImage_Call) Run(run func(ctx context.Context, parentID int64, repoKey string, image string, sortByField string, sortByOrder string, limit int, offset int, search string)) *MockTagRepository_GetAllOciVersionsByRepoAndImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 int
		if args[6] != nil {
			arg6 = args[6].(int)
		}
		var arg7 int
		if args[7] != nil {
			arg7 = args[7].(int)
		}
		var arg8 string
		if args[8] != nil {
			arg8 = args[8].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetAllOciVersionsByRepoAndImage_Call) Return(ociVersionMetadatas *[]types.OciVersionMetadata, err error) *MockTagRepository_GetAllOciVersionsByRepoAndImage_Call {
	_c.Call.Return(ociVersionMetadatas, err)
	return _c
}

func (_c *MockTagRepository_GetAllOciVersionsByRepoAndImage_Call) RunAndReturn(run func(ctx context.Context, parentID int64, repoKey string, image string, sortByField string, sortByOrder string, limit int, offset int, search string) (*[]types.OciVersionMetadata, error)) *MockTagRepository_GetAllOciVersionsByRepoAndImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTagsByRepoAndImage provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetAllTagsByRepoAndImage(ctx context.Context, parentID int64, repoKey string, image string, sortByField string, sortByOrder string, limit int, offset int, search string) (*[]types.OciVersionMetadata, error) {
	ret := _mock.Called(ctx, parentID, repoKey, image, sortByField, sortByOrder, limit, offset, search)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTagsByRepoAndImage")
	}

	var r0 *[]types.OciVersionMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string, string, int, int, string) (*[]types.OciVersionMetadata, error)); ok {
		return returnFunc(ctx, parentID, repoKey, image, sortByField, sortByOrder, limit, offset, search)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string, string, int, int, string) *[]types.OciVersionMetadata); ok {
		r0 = returnFunc(ctx, parentID, repoKey, image, sortByField, sortByOrder, limit, offset, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]types.OciVersionMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string, string, string, int, int, string) error); ok {
		r1 = returnFunc(ctx, parentID, repoKey, image, sortByField, sortByOrder, limit, offset, search)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetAllTagsByRepoAndImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTagsByRepoAndImage'
type MockTagRepository_GetAllTagsByRepoAndImage_Call struct {
	*mock.Call
}

// GetAllTagsByRepoAndImage is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - repoKey string
//   - image string
//   - sortByField string
//   - sortByOrder string
//   - limit int
//   - offset int
//   - search string
func (_e *MockTagRepository_Expecter) GetAllTagsByRepoAndImage(ctx interface{}, parentID interface{}, repoKey interface{}, image interface{}, sortByField interface{}, sortByOrder interface{}, limit interface{}, offset interface{}, search interface{}) *MockTagRepository_GetAllTagsByRepoAndImage_Call {
	return &MockTagRepository_GetAllTagsByRepoAndImage_Call{Call: _e.mock.On("GetAllTagsByRepoAndImage", ctx, parentID, repoKey, image, sortByField, sortByOrder, limit, offset, search)}
}

func (_c *MockTagRepository_GetAllTagsByRepoAndImage_Call) Run(run func(ctx context.Context, parentID int64, repoKey string, image string, sortByField string, sortByOrder string, limit int, offset int, search string)) *MockTagRepository_GetAllTagsByRepoAndImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 int
		if args[6] != nil {
			arg6 = args[6].(int)
		}
		var arg7 int
		if args[7] != nil {
			arg7 = args[7].(int)
		}
		var arg8 string
		if args[8] != nil {
			arg8 = args[8].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
			arg8,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetAllTagsByRepoAndImage_Call) Return(ociVersionMetadatas *[]types.OciVersionMetadata, err error) *MockTagRepository_GetAllTagsByRepoAndImage_Call {
	_c.Call.Return(ociVersionMetadatas, err)
	return _c
}

func (_c *MockTagRepository_GetAllTagsByRepoAndImage_Call) RunAndReturn(run func(ctx context.Context, parentID int64, repoKey string, image string, sortByField string, sortByOrder string, limit int, offset int, search string) (*[]types.OciVersionMetadata, error)) *MockTagRepository_GetAllTagsByRepoAndImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestTag provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetLatestTag(ctx context.Context, repoID int64, imageName string) (*types.Tag, error) {
	ret := _mock.Called(ctx, repoID, imageName)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestTag")
	}

	var r0 *types.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) (*types.Tag, error)); ok {
		return returnFunc(ctx, repoID, imageName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) *types.Tag); ok {
		r0 = returnFunc(ctx, repoID, imageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = returnFunc(ctx, repoID, imageName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetLatestTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestTag'
type MockTagRepository_GetLatestTag_Call struct {
	*mock.Call
}

// GetLatestTag is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - imageName string
func (_e *MockTagRepository_Expecter) GetLatestTag(ctx interface{}, repoID interface{}, imageName interface{}) *MockTagRepository_GetLatestTag_Call {
	return &MockTagRepository_GetLatestTag_Call{Call: _e.mock.On("GetLatestTag", ctx, repoID, imageName)}
}

func (_c *MockTagRepository_GetLatestTag_Call) Run(run func(ctx context.Context, repoID int64, imageName string)) *MockTagRepository_GetLatestTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetLatestTag_Call) Return(tag *types.Tag, err error) *MockTagRepository_GetLatestTag_Call {
	_c.Call.Return(tag, err)
	return _c
}

func (_c *MockTagRepository_GetLatestTag_Call) RunAndReturn(run func(ctx context.Context, repoID int64, imageName string) (*types.Tag, error)) *MockTagRepository_GetLatestTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestTagMetadata provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetLatestTagMetadata(ctx context.Context, parentID int64, repoKey string, imageName string) (*types.ArtifactMetadata, error) {
	ret := _mock.Called(ctx, parentID, repoKey, imageName)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestTagMetadata")
	}

	var r0 *types.ArtifactMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) (*types.ArtifactMetadata, error)); ok {
		return returnFunc(ctx, parentID, repoKey, imageName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) *types.ArtifactMetadata); ok {
		r0 = returnFunc(ctx, parentID, repoKey, imageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ArtifactMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = returnFunc(ctx, parentID, repoKey, imageName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetLatestTagMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestTagMetadata'
type MockTagRepository_GetLatestTagMetadata_Call struct {
	*mock.Call
}

// GetLatestTagMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - repoKey string
//   - imageName string
func (_e *MockTagRepository_Expecter) GetLatestTagMetadata(ctx interface{}, parentID interface{}, repoKey interface{}, imageName interface{}) *MockTagRepository_GetLatestTagMetadata_Call {
	return &MockTagRepository_GetLatestTagMetadata_Call{Call: _e.mock.On("GetLatestTagMetadata", ctx, parentID, repoKey, imageName)}
}

func (_c *MockTagRepository_GetLatestTagMetadata_Call) Run(run func(ctx context.Context, parentID int64, repoKey string, imageName string)) *MockTagRepository_GetLatestTagMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetLatestTagMetadata_Call) Return(artifactMetadata *types.ArtifactMetadata, err error) *MockTagRepository_GetLatestTagMetadata_Call {
	_c.Call.Return(artifactMetadata, err)
	return _c
}

func (_c *MockTagRepository_GetLatestTagMetadata_Call) RunAndReturn(run func(ctx context.Context, parentID int64, repoKey string, imageName string) (*types.ArtifactMetadata, error)) *MockTagRepository_GetLatestTagMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestTagName provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetLatestTagName(ctx context.Context, parentID int64, repoKey string, imageName string) (string, error) {
	ret := _mock.Called(ctx, parentID, repoKey, imageName)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestTagName")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) (string, error)); ok {
		return returnFunc(ctx, parentID, repoKey, imageName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) string); ok {
		r0 = returnFunc(ctx, parentID, repoKey, imageName)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = returnFunc(ctx, parentID, repoKey, imageName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetLatestTagName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestTagName'
type MockTagRepository_GetLatestTagName_Call struct {
	*mock.Call
}

// GetLatestTagName is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - repoKey string
//   - imageName string
func (_e *MockTagRepository_Expecter) GetLatestTagName(ctx interface{}, parentID interface{}, repoKey interface{}, imageName interface{}) *MockTagRepository_GetLatestTagName_Call {
	return &MockTagRepository_GetLatestTagName_Call{Call: _e.mock.On("GetLatestTagName", ctx, parentID, repoKey, imageName)}
}

func (_c *MockTagRepository_GetLatestTagName_Call) Run(run func(ctx context.Context, parentID int64, repoKey string, imageName string)) *MockTagRepository_GetLatestTagName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetLatestTagName_Call) Return(s string, err error) *MockTagRepository_GetLatestTagName_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTagRepository_GetLatestTagName_Call) RunAndReturn(run func(ctx context.Context, parentID int64, repoKey string, imageName string) (string, error)) *MockTagRepository_GetLatestTagName_Call {
	_c.Call.Return(run)
	return _c
}

// GetOCIVersionMetadata provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetOCIVersionMetadata(ctx context.Context, parentID int64, repoKey string, imageName string, dgst string) (*types.OciVersionMetadata, error) {
	ret := _mock.Called(ctx, parentID, repoKey, imageName, dgst)

	if len(ret) == 0 {
		panic("no return value specified for GetOCIVersionMetadata")
	}

	var r0 *types.OciVersionMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string) (*types.OciVersionMetadata, error)); ok {
		return returnFunc(ctx, parentID, repoKey, imageName, dgst)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string) *types.OciVersionMetadata); ok {
		r0 = returnFunc(ctx, parentID, repoKey, imageName, dgst)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.OciVersionMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string, string) error); ok {
		r1 = returnFunc(ctx, parentID, repoKey, imageName, dgst)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetOCIVersionMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOCIVersionMetadata'
type MockTagRepository_GetOCIVersionMetadata_Call struct {
	*mock.Call
}

// GetOCIVersionMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - repoKey string
//   - imageName string
//   - dgst string
func (_e *MockTagRepository_Expecter) GetOCIVersionMetadata(ctx interface{}, parentID interface{}, repoKey interface{}, imageName interface{}, dgst interface{}) *MockTagRepository_GetOCIVersionMetadata_Call {
	return &MockTagRepository_GetOCIVersionMetadata_Call{Call: _e.mock.On("GetOCIVersionMetadata", ctx, parentID, repoKey, imageName, dgst)}
}

func (_c *MockTagRepository_GetOCIVersionMetadata_Call) Run(run func(ctx context.Context, parentID int64, repoKey string, imageName string, dgst string)) *MockTagRepository_GetOCIVersionMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetOCIVersionMetadata_Call) Return(ociVersionMetadata *types.OciVersionMetadata, err error) *MockTagRepository_GetOCIVersionMetadata_Call {
	_c.Call.Return(ociVersionMetadata, err)
	return _c
}

func (_c *MockTagRepository_GetOCIVersionMetadata_Call) RunAndReturn(run func(ctx context.Context, parentID int64, repoKey string, imageName string, dgst string) (*types.OciVersionMetadata, error)) *MockTagRepository_GetOCIVersionMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetOciTagsInfo provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetOciTagsInfo(ctx context.Context, registryID int64, image string, limit int, offset int, search string) (*[]types.TagInfo, error) {
	ret := _mock.Called(ctx, registryID, image, limit, offset, search)

	if len(ret) == 0 {
		panic("no return value specified for GetOciTagsInfo")
	}

	var r0 *[]types.TagInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, int, int, string) (*[]types.TagInfo, error)); ok {
		return returnFunc(ctx, registryID, image, limit, offset, search)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, int, int, string) *[]types.TagInfo); ok {
		r0 = returnFunc(ctx, registryID, image, limit, offset, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]types.TagInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, int, int, string) error); ok {
		r1 = returnFunc(ctx, registryID, image, limit, offset, search)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetOciTagsInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOciTagsInfo'
type MockTagRepository_GetOciTagsInfo_Call struct {
	*mock.Call
}

// GetOciTagsInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - registryID int64
//   - image string
//   - limit int
//   - offset int
//   - search string
func (_e *MockTagRepository_Expecter) GetOciTagsInfo(ctx interface{}, registryID interface{}, image interface{}, limit interface{}, offset interface{}, search interface{}) *MockTagRepository_GetOciTagsInfo_Call {
	return &MockTagRepository_GetOciTagsInfo_Call{Call: _e.mock.On("GetOciTagsInfo", ctx, registryID, image, limit, offset, search)}
}

func (_c *MockTagRepository_GetOciTagsInfo_Call) Run(run func(ctx context.Context, registryID int64, image string, limit int, offset int, search string)) *MockTagRepository_GetOciTagsInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetOciTagsInfo_Call) Return(tagInfos *[]types.TagInfo, err error) *MockTagRepository_GetOciTagsInfo_Call {
	_c.Call.Return(tagInfos, err)
	return _c
}

func (_c *MockTagRepository_GetOciTagsInfo_Call) RunAndReturn(run func(ctx context.Context, registryID int64, image string, limit int, offset int, search string) (*[]types.TagInfo, error)) *MockTagRepository_GetOciTagsInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuarantineInfoForArtifacts provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetQuarantineInfoForArtifacts(ctx context.Context, artifacts []types.ArtifactIdentifier, parentID int64) (map[types.ArtifactIdentifier]*types.QuarantineInfo, error) {
	ret := _mock.Called(ctx, artifacts, parentID)

	if len(ret) == 0 {
		panic("no return value specified for GetQuarantineInfoForArtifacts")
	}

	var r0 map[types.ArtifactIdentifier]*types.QuarantineInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []types.ArtifactIdentifier, int64) (map[types.ArtifactIdentifier]*types.QuarantineInfo, error)); ok {
		return returnFunc(ctx, artifacts, parentID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []types.ArtifactIdentifier, int64) map[types.ArtifactIdentifier]*types.QuarantineInfo); ok {
		r0 = returnFunc(ctx, artifacts, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[types.ArtifactIdentifier]*types.QuarantineInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []types.ArtifactIdentifier, int64) error); ok {
		r1 = returnFunc(ctx, artifacts, parentID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetQuarantineInfoForArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuarantineInfoForArtifacts'
type MockTagRepository_GetQuarantineInfoForArtifacts_Call struct {
	*mock.Call
}

// GetQuarantineInfoForArtifacts is a helper method to define mock.On call
//   - ctx context.Context
//   - artifacts []types.ArtifactIdentifier
//   - parentID int64
func (_e *MockTagRepository_Expecter) GetQuarantineInfoForArtifacts(ctx interface{}, artifacts interface{}, parentID interface{}) *MockTagRepository_GetQuarantineInfoForArtifacts_Call {
	return &MockTagRepository_GetQuarantineInfoForArtifacts_Call{Call: _e.mock.On("GetQuarantineInfoForArtifacts", ctx, artifacts, parentID)}
}

func (_c *MockTagRepository_GetQuarantineInfoForArtifacts_Call) Run(run func(ctx context.Context, artifacts []types.ArtifactIdentifier, parentID int64)) *MockTagRepository_GetQuarantineInfoForArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []types.ArtifactIdentifier
		if args[1] != nil {
			arg1 = args[1].([]types.ArtifactIdentifier)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetQuarantineInfoForArtifacts_Call) Return(artifactIdentifierToQuarantineInfo map[types.ArtifactIdentifier]*types.QuarantineInfo, err error) *MockTagRepository_GetQuarantineInfoForArtifacts_Call {
	_c.Call.Return(artifactIdentifierToQuarantineInfo, err)
	return _c
}

func (_c *MockTagRepository_GetQuarantineInfoForArtifacts_Call) RunAndReturn(run func(ctx context.Context, artifacts []types.ArtifactIdentifier, parentID int64) (map[types.ArtifactIdentifier]*types.QuarantineInfo, error)) *MockTagRepository_GetQuarantineInfoForArtifacts_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuarantineStatusForImages provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetQuarantineStatusForImages(ctx context.Context, imageNames []string, registryID int64) ([]bool, error) {
	ret := _mock.Called(ctx, imageNames, registryID)

	if len(ret) == 0 {
		panic("no return value specified for GetQuarantineStatusForImages")
	}

	var r0 []bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, int64) ([]bool, error)); ok {
		return returnFunc(ctx, imageNames, registryID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, int64) []bool); ok {
		r0 = returnFunc(ctx, imageNames, registryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string, int64) error); ok {
		r1 = returnFunc(ctx, imageNames, registryID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetQuarantineStatusForImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuarantineStatusForImages'
type MockTagRepository_GetQuarantineStatusForImages_Call struct {
	*mock.Call
}

// GetQuarantineStatusForImages is a helper method to define mock.On call
//   - ctx context.Context
//   - imageNames []string
//   - registryID int64
func (_e *MockTagRepository_Expecter) GetQuarantineStatusForImages(ctx interface{}, imageNames interface{}, registryID interface{}) *MockTagRepository_GetQuarantineStatusForImages_Call {
	return &MockTagRepository_GetQuarantineStatusForImages_Call{Call: _e.mock.On("GetQuarantineStatusForImages", ctx, imageNames, registryID)}
}

func (_c *MockTagRepository_GetQuarantineStatusForImages_Call) Run(run func(ctx context.Context, imageNames []string, registryID int64)) *MockTagRepository_GetQuarantineStatusForImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetQuarantineStatusForImages_Call) Return(bools []bool, err error) *MockTagRepository_GetQuarantineStatusForImages_Call {
	_c.Call.Return(bools, err)
	return _c
}

func (_c *MockTagRepository_GetQuarantineStatusForImages_Call) RunAndReturn(run func(ctx context.Context, imageNames []string, registryID int64) ([]bool, error)) *MockTagRepository_GetQuarantineStatusForImages_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagDetail provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetTagDetail(ctx context.Context, repoID int64, imageName string, name string) (*types.TagDetail, error) {
	ret := _mock.Called(ctx, repoID, imageName, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTagDetail")
	}

	var r0 *types.TagDetail
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) (*types.TagDetail, error)); ok {
		return returnFunc(ctx, repoID, imageName, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) *types.TagDetail); ok {
		r0 = returnFunc(ctx, repoID, imageName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TagDetail)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = returnFunc(ctx, repoID, imageName, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetTagDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagDetail'
type MockTagRepository_GetTagDetail_Call struct {
	*mock.Call
}

// GetTagDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - imageName string
//   - name string
func (_e *MockTagRepository_Expecter) GetTagDetail(ctx interface{}, repoID interface{}, imageName interface{}, name interface{}) *MockTagRepository_GetTagDetail_Call {
	return &MockTagRepository_GetTagDetail_Call{Call: _e.mock.On("GetTagDetail", ctx, repoID, imageName, name)}
}

func (_c *MockTagRepository_GetTagDetail_Call) Run(run func(ctx context.Context, repoID int64, imageName string, name string)) *MockTagRepository_GetTagDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetTagDetail_Call) Return(tagDetail *types.TagDetail, err error) *MockTagRepository_GetTagDetail_Call {
	_c.Call.Return(tagDetail, err)
	return _c
}

func (_c *MockTagRepository_GetTagDetail_Call) RunAndReturn(run func(ctx context.Context, repoID int64, imageName string, name string) (*types.TagDetail, error)) *MockTagRepository_GetTagDetail_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagMetadata provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetTagMetadata(ctx context.Context, parentID int64, repoKey string, imageName string, name string) (*types.OciVersionMetadata, error) {
	ret := _mock.Called(ctx, parentID, repoKey, imageName, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTagMetadata")
	}

	var r0 *types.OciVersionMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string) (*types.OciVersionMetadata, error)); ok {
		return returnFunc(ctx, parentID, repoKey, imageName, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string, string) *types.OciVersionMetadata); ok {
		r0 = returnFunc(ctx, parentID, repoKey, imageName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.OciVersionMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, string, string) error); ok {
		r1 = returnFunc(ctx, parentID, repoKey, imageName, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetTagMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagMetadata'
type MockTagRepository_GetTagMetadata_Call struct {
	*mock.Call
}

// GetTagMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - repoKey string
//   - imageName string
//   - name string
func (_e *MockTagRepository_Expecter) GetTagMetadata(ctx interface{}, parentID interface{}, repoKey interface{}, imageName interface{}, name interface{}) *MockTagRepository_GetTagMetadata_Call {
	return &MockTagRepository_GetTagMetadata_Call{Call: _e.mock.On("GetTagMetadata", ctx, parentID, repoKey, imageName, name)}
}

func (_c *MockTagRepository_GetTagMetadata_Call) Run(run func(ctx context.Context, parentID int64, repoKey string, imageName string, name string)) *MockTagRepository_GetTagMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetTagMetadata_Call) Return(ociVersionMetadata *types.OciVersionMetadata, err error) *MockTagRepository_GetTagMetadata_Call {
	_c.Call.Return(ociVersionMetadata, err)
	return _c
}

func (_c *MockTagRepository_GetTagMetadata_Call) RunAndReturn(run func(ctx context.Context, parentID int64, repoKey string, imageName string, name string) (*types.OciVersionMetadata, error)) *MockTagRepository_GetTagMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagsByManifestID provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) GetTagsByManifestID(ctx context.Context, manifestID int64) (*[]string, error) {
	ret := _mock.Called(ctx, manifestID)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsByManifestID")
	}

	var r0 *[]string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*[]string, error)); ok {
		return returnFunc(ctx, manifestID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *[]string); ok {
		r0 = returnFunc(ctx, manifestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, manifestID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_GetTagsByManifestID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsByManifestID'
type MockTagRepository_GetTagsByManifestID_Call struct {
	*mock.Call
}

// GetTagsByManifestID is a helper method to define mock.On call
//   - ctx context.Context
//   - manifestID int64
func (_e *MockTagRepository_Expecter) GetTagsByManifestID(ctx interface{}, manifestID interface{}) *MockTagRepository_GetTagsByManifestID_Call {
	return &MockTagRepository_GetTagsByManifestID_Call{Call: _e.mock.On("GetTagsByManifestID", ctx, manifestID)}
}

func (_c *MockTagRepository_GetTagsByManifestID_Call) Run(run func(ctx context.Context, manifestID int64)) *MockTagRepository_GetTagsByManifestID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagRepository_GetTagsByManifestID_Call) Return(strings *[]string, err error) *MockTagRepository_GetTagsByManifestID_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockTagRepository_GetTagsByManifestID_Call) RunAndReturn(run func(ctx context.Context, manifestID int64) (*[]string, error)) *MockTagRepository_GetTagsByManifestID_Call {
	_c.Call.Return(run)
	return _c
}

// HasTagsAfterName provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) HasTagsAfterName(ctx context.Context, repoID int64, filters types.FilterParams) (bool, error) {
	ret := _mock.Called(ctx, repoID, filters)

	if len(ret) == 0 {
		panic("no return value specified for HasTagsAfterName")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, types.FilterParams) (bool, error)); ok {
		return returnFunc(ctx, repoID, filters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, types.FilterParams) bool); ok {
		r0 = returnFunc(ctx, repoID, filters)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, types.FilterParams) error); ok {
		r1 = returnFunc(ctx, repoID, filters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_HasTagsAfterName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasTagsAfterName'
type MockTagRepository_HasTagsAfterName_Call struct {
	*mock.Call
}

// HasTagsAfterName is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - filters types.FilterParams
func (_e *MockTagRepository_Expecter) HasTagsAfterName(ctx interface{}, repoID interface{}, filters interface{}) *MockTagRepository_HasTagsAfterName_Call {
	return &MockTagRepository_HasTagsAfterName_Call{Call: _e.mock.On("HasTagsAfterName", ctx, repoID, filters)}
}

func (_c *MockTagRepository_HasTagsAfterName_Call) Run(run func(ctx context.Context, repoID int64, filters types.FilterParams)) *MockTagRepository_HasTagsAfterName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 types.FilterParams
		if args[2] != nil {
			arg2 = args[2].(types.FilterParams)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTagRepository_HasTagsAfterName_Call) Return(b bool, err error) *MockTagRepository_HasTagsAfterName_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockTagRepository_HasTagsAfterName_Call) RunAndReturn(run func(ctx context.Context, repoID int64, filters types.FilterParams) (bool, error)) *MockTagRepository_HasTagsAfterName_Call {
	_c.Call.Return(run)
	return _c
}

// LockTagByNameForUpdate provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) LockTagByNameForUpdate(ctx context.Context, repoID int64, name string) (bool, error) {
	ret := _mock.Called(ctx, repoID, name)

	if len(ret) == 0 {
		panic("no return value specified for LockTagByNameForUpdate")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) (bool, error)); ok {
		return returnFunc(ctx, repoID, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) bool); ok {
		r0 = returnFunc(ctx, repoID, name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = returnFunc(ctx, repoID, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_LockTagByNameForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockTagByNameForUpdate'
type MockTagRepository_LockTagByNameForUpdate_Call struct {
	*mock.Call
}

// LockTagByNameForUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - name string
func (_e *MockTagRepository_Expecter) LockTagByNameForUpdate(ctx interface{}, repoID interface{}, name interface{}) *MockTagRepository_LockTagByNameForUpdate_Call {
	return &MockTagRepository_LockTagByNameForUpdate_Call{Call: _e.mock.On("LockTagByNameForUpdate", ctx, repoID, name)}
}

func (_c *MockTagRepository_LockTagByNameForUpdate_Call) Run(run func(ctx context.Context, repoID int64, name string)) *MockTagRepository_LockTagByNameForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTagRepository_LockTagByNameForUpdate_Call) Return(b bool, err error) *MockTagRepository_LockTagByNameForUpdate_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockTagRepository_LockTagByNameForUpdate_Call) RunAndReturn(run func(ctx context.Context, repoID int64, name string) (bool, error)) *MockTagRepository_LockTagByNameForUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// TagsPaginated provides a mock function for the type MockTagRepository
func (_mock *MockTagRepository) TagsPaginated(ctx context.Context, repoID int64, image string, filters types.FilterParams) ([]*types.Tag, error) {
	ret := _mock.Called(ctx, repoID, image, filters)

	if len(ret) == 0 {
		panic("no return value specified for TagsPaginated")
	}

	var r0 []*types.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, types.FilterParams) ([]*types.Tag, error)); ok {
		return returnFunc(ctx, repoID, image, filters)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, types.FilterParams) []*types.Tag); ok {
		r0 = returnFunc(ctx, repoID, image, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string, types.FilterParams) error); ok {
		r1 = returnFunc(ctx, repoID, image, filters)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagRepository_TagsPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagsPaginated'
type MockTagRepository_TagsPaginated_Call struct {
	*mock.Call
}

// TagsPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - image string
//   - filters types.FilterParams
func (_e *MockTagRepository_Expecter) TagsPaginated(ctx interface{}, repoID interface{}, image interface{}, filters interface{}) *MockTagRepository_TagsPaginated_Call {
	return &MockTagRepository_TagsPaginated_Call{Call: _e.mock.On("TagsPaginated", ctx, repoID, image, filters)}
}

func (_c *MockTagRepository_TagsPaginated_Call) Run(run func(ctx context.Context, repoID int64, image string, filters types.FilterParams)) *MockTagRepository_TagsPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 types.FilterParams
		if args[3] != nil {
			arg3 = args[3].(types.FilterParams)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTagRepository_TagsPaginated_Call) Return(tags []*types.Tag, err error) *MockTagRepository_TagsPaginated_Call {
	_c.Call.Return(tags, err)
	return _c
}

func (_c *MockTagRepository_TagsPaginated_Call) RunAndReturn(run func(ctx context.Context, repoID int64, image string, filters types.FilterParams) ([]*types.Tag, error)) *MockTagRepository_TagsPaginated_Call {
	_c.Call.Return(run)
	return _c
}
