// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	enum "github.com/harness/gitness/types/enum"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, resourceType, resourcePath
func (_m *Service) Delete(ctx context.Context, resourceType enum.PublicResourceType, resourcePath string) error {
	ret := _m.Called(ctx, resourceType, resourcePath)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, enum.PublicResourceType, string) error); ok {
		r0 = rf(ctx, resourceType, resourcePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Service_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceType enum.PublicResourceType
//   - resourcePath string
func (_e *Service_Expecter) Delete(ctx interface{}, resourceType interface{}, resourcePath interface{}) *Service_Delete_Call {
	return &Service_Delete_Call{Call: _e.mock.On("Delete", ctx, resourceType, resourcePath)}
}

func (_c *Service_Delete_Call) Run(run func(ctx context.Context, resourceType enum.PublicResourceType, resourcePath string)) *Service_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(enum.PublicResourceType), args[2].(string))
	})
	return _c
}

func (_c *Service_Delete_Call) Return(_a0 error) *Service_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Delete_Call) RunAndReturn(run func(context.Context, enum.PublicResourceType, string) error) *Service_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, resourceType, resourcePath
func (_m *Service) Get(ctx context.Context, resourceType enum.PublicResourceType, resourcePath string) (bool, error) {
	ret := _m.Called(ctx, resourceType, resourcePath)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, enum.PublicResourceType, string) (bool, error)); ok {
		return rf(ctx, resourceType, resourcePath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, enum.PublicResourceType, string) bool); ok {
		r0 = rf(ctx, resourceType, resourcePath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, enum.PublicResourceType, string) error); ok {
		r1 = rf(ctx, resourceType, resourcePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Service_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceType enum.PublicResourceType
//   - resourcePath string
func (_e *Service_Expecter) Get(ctx interface{}, resourceType interface{}, resourcePath interface{}) *Service_Get_Call {
	return &Service_Get_Call{Call: _e.mock.On("Get", ctx, resourceType, resourcePath)}
}

func (_c *Service_Get_Call) Run(run func(ctx context.Context, resourceType enum.PublicResourceType, resourcePath string)) *Service_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(enum.PublicResourceType), args[2].(string))
	})
	return _c
}

func (_c *Service_Get_Call) Return(_a0 bool, _a1 error) *Service_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Get_Call) RunAndReturn(run func(context.Context, enum.PublicResourceType, string) (bool, error)) *Service_Get_Call {
	_c.Call.Return(run)
	return _c
}

// IsPublicAccessSupported provides a mock function with given fields: ctx, resourceType, parentSpacePath
func (_m *Service) IsPublicAccessSupported(ctx context.Context, resourceType enum.PublicResourceType, parentSpacePath string) (bool, error) {
	ret := _m.Called(ctx, resourceType, parentSpacePath)

	if len(ret) == 0 {
		panic("no return value specified for IsPublicAccessSupported")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, enum.PublicResourceType, string) (bool, error)); ok {
		return rf(ctx, resourceType, parentSpacePath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, enum.PublicResourceType, string) bool); ok {
		r0 = rf(ctx, resourceType, parentSpacePath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, enum.PublicResourceType, string) error); ok {
		r1 = rf(ctx, resourceType, parentSpacePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_IsPublicAccessSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPublicAccessSupported'
type Service_IsPublicAccessSupported_Call struct {
	*mock.Call
}

// IsPublicAccessSupported is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceType enum.PublicResourceType
//   - parentSpacePath string
func (_e *Service_Expecter) IsPublicAccessSupported(ctx interface{}, resourceType interface{}, parentSpacePath interface{}) *Service_IsPublicAccessSupported_Call {
	return &Service_IsPublicAccessSupported_Call{Call: _e.mock.On("IsPublicAccessSupported", ctx, resourceType, parentSpacePath)}
}

func (_c *Service_IsPublicAccessSupported_Call) Run(run func(ctx context.Context, resourceType enum.PublicResourceType, parentSpacePath string)) *Service_IsPublicAccessSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(enum.PublicResourceType), args[2].(string))
	})
	return _c
}

func (_c *Service_IsPublicAccessSupported_Call) Return(_a0 bool, _a1 error) *Service_IsPublicAccessSupported_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_IsPublicAccessSupported_Call) RunAndReturn(run func(context.Context, enum.PublicResourceType, string) (bool, error)) *Service_IsPublicAccessSupported_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, resourceType, resourcePath, enable
func (_m *Service) Set(ctx context.Context, resourceType enum.PublicResourceType, resourcePath string, enable bool) error {
	ret := _m.Called(ctx, resourceType, resourcePath, enable)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, enum.PublicResourceType, string, bool) error); ok {
		r0 = rf(ctx, resourceType, resourcePath, enable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Service_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceType enum.PublicResourceType
//   - resourcePath string
//   - enable bool
func (_e *Service_Expecter) Set(ctx interface{}, resourceType interface{}, resourcePath interface{}, enable interface{}) *Service_Set_Call {
	return &Service_Set_Call{Call: _e.mock.On("Set", ctx, resourceType, resourcePath, enable)}
}

func (_c *Service_Set_Call) Run(run func(ctx context.Context, resourceType enum.PublicResourceType, resourcePath string, enable bool)) *Service_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(enum.PublicResourceType), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *Service_Set_Call) Return(_a0 error) *Service_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Set_Call) RunAndReturn(run func(context.Context, enum.PublicResourceType, string, bool) error) *Service_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
