// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/harness/gitness/registry/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDownloadStatRepository creates a new instance of MockDownloadStatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDownloadStatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDownloadStatRepository {
	mock := &MockDownloadStatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDownloadStatRepository is an autogenerated mock type for the DownloadStatRepository type
type MockDownloadStatRepository struct {
	mock.Mock
}

type MockDownloadStatRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDownloadStatRepository) EXPECT() *MockDownloadStatRepository_Expecter {
	return &MockDownloadStatRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockDownloadStatRepository
func (_mock *MockDownloadStatRepository) Create(ctx context.Context, downloadStat *types.DownloadStat) error {
	ret := _mock.Called(ctx, downloadStat)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.DownloadStat) error); ok {
		r0 = returnFunc(ctx, downloadStat)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDownloadStatRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDownloadStatRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - downloadStat *types.DownloadStat
func (_e *MockDownloadStatRepository_Expecter) Create(ctx interface{}, downloadStat interface{}) *MockDownloadStatRepository_Create_Call {
	return &MockDownloadStatRepository_Create_Call{Call: _e.mock.On("Create", ctx, downloadStat)}
}

func (_c *MockDownloadStatRepository_Create_Call) Run(run func(ctx context.Context, downloadStat *types.DownloadStat)) *MockDownloadStatRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.DownloadStat
		if args[1] != nil {
			arg1 = args[1].(*types.DownloadStat)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDownloadStatRepository_Create_Call) Return(err error) *MockDownloadStatRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDownloadStatRepository_Create_Call) RunAndReturn(run func(ctx context.Context, downloadStat *types.DownloadStat) error) *MockDownloadStatRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateByRegistryIDImageAndArtifactName provides a mock function for the type MockDownloadStatRepository
func (_mock *MockDownloadStatRepository) CreateByRegistryIDImageAndArtifactName(ctx context.Context, regID int64, image string, artifactName string) error {
	ret := _mock.Called(ctx, regID, image, artifactName)

	if len(ret) == 0 {
		panic("no return value specified for CreateByRegistryIDImageAndArtifactName")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = returnFunc(ctx, regID, image, artifactName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDownloadStatRepository_CreateByRegistryIDImageAndArtifactName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateByRegistryIDImageAndArtifactName'
type MockDownloadStatRepository_CreateByRegistryIDImageAndArtifactName_Call struct {
	*mock.Call
}

// CreateByRegistryIDImageAndArtifactName is a helper method to define mock.On call
//   - ctx context.Context
//   - regID int64
//   - image string
//   - artifactName string
func (_e *MockDownloadStatRepository_Expecter) CreateByRegistryIDImageAndArtifactName(ctx interface{}, regID interface{}, image interface{}, artifactName interface{}) *MockDownloadStatRepository_CreateByRegistryIDImageAndArtifactName_Call {
	return &MockDownloadStatRepository_CreateByRegistryIDImageAndArtifactName_Call{Call: _e.mock.On("CreateByRegistryIDImageAndArtifactName", ctx, regID, image, artifactName)}
}

func (_c *MockDownloadStatRepository_CreateByRegistryIDImageAndArtifactName_Call) Run(run func(ctx context.Context, regID int64, image string, artifactName string)) *MockDownloadStatRepository_CreateByRegistryIDImageAndArtifactName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDownloadStatRepository_CreateByRegistryIDImageAndArtifactName_Call) Return(err error) *MockDownloadStatRepository_CreateByRegistryIDImageAndArtifactName_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDownloadStatRepository_CreateByRegistryIDImageAndArtifactName_Call) RunAndReturn(run func(ctx context.Context, regID int64, image string, artifactName string) error) *MockDownloadStatRepository_CreateByRegistryIDImageAndArtifactName_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalDownloadsForArtifactID provides a mock function for the type MockDownloadStatRepository
func (_mock *MockDownloadStatRepository) GetTotalDownloadsForArtifactID(ctx context.Context, artifactID int64) (int64, error) {
	ret := _mock.Called(ctx, artifactID)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalDownloadsForArtifactID")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return returnFunc(ctx, artifactID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = returnFunc(ctx, artifactID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, artifactID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDownloadStatRepository_GetTotalDownloadsForArtifactID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalDownloadsForArtifactID'
type MockDownloadStatRepository_GetTotalDownloadsForArtifactID_Call struct {
	*mock.Call
}

// GetTotalDownloadsForArtifactID is a helper method to define mock.On call
//   - ctx context.Context
//   - artifactID int64
func (_e *MockDownloadStatRepository_Expecter) GetTotalDownloadsForArtifactID(ctx interface{}, artifactID interface{}) *MockDownloadStatRepository_GetTotalDownloadsForArtifactID_Call {
	return &MockDownloadStatRepository_GetTotalDownloadsForArtifactID_Call{Call: _e.mock.On("GetTotalDownloadsForArtifactID", ctx, artifactID)}
}

func (_c *MockDownloadStatRepository_GetTotalDownloadsForArtifactID_Call) Run(run func(ctx context.Context, artifactID int64)) *MockDownloadStatRepository_GetTotalDownloadsForArtifactID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDownloadStatRepository_GetTotalDownloadsForArtifactID_Call) Return(n int64, err error) *MockDownloadStatRepository_GetTotalDownloadsForArtifactID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDownloadStatRepository_GetTotalDownloadsForArtifactID_Call) RunAndReturn(run func(ctx context.Context, artifactID int64) (int64, error)) *MockDownloadStatRepository_GetTotalDownloadsForArtifactID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalDownloadsForImage provides a mock function for the type MockDownloadStatRepository
func (_mock *MockDownloadStatRepository) GetTotalDownloadsForImage(ctx context.Context, imageID int64) (int64, error) {
	ret := _mock.Called(ctx, imageID)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalDownloadsForImage")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return returnFunc(ctx, imageID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = returnFunc(ctx, imageID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, imageID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDownloadStatRepository_GetTotalDownloadsForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalDownloadsForImage'
type MockDownloadStatRepository_GetTotalDownloadsForImage_Call struct {
	*mock.Call
}

// GetTotalDownloadsForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - imageID int64
func (_e *MockDownloadStatRepository_Expecter) GetTotalDownloadsForImage(ctx interface{}, imageID interface{}) *MockDownloadStatRepository_GetTotalDownloadsForImage_Call {
	return &MockDownloadStatRepository_GetTotalDownloadsForImage_Call{Call: _e.mock.On("GetTotalDownloadsForImage", ctx, imageID)}
}

func (_c *MockDownloadStatRepository_GetTotalDownloadsForImage_Call) Run(run func(ctx context.Context, imageID int64)) *MockDownloadStatRepository_GetTotalDownloadsForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDownloadStatRepository_GetTotalDownloadsForImage_Call) Return(n int64, err error) *MockDownloadStatRepository_GetTotalDownloadsForImage_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDownloadStatRepository_GetTotalDownloadsForImage_Call) RunAndReturn(run func(ctx context.Context, imageID int64) (int64, error)) *MockDownloadStatRepository_GetTotalDownloadsForImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalDownloadsForManifests provides a mock function for the type MockDownloadStatRepository
func (_mock *MockDownloadStatRepository) GetTotalDownloadsForManifests(ctx context.Context, artifactVersion []string, imageID int64) (map[string]int64, error) {
	ret := _mock.Called(ctx, artifactVersion, imageID)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalDownloadsForManifests")
	}

	var r0 map[string]int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, int64) (map[string]int64, error)); ok {
		return returnFunc(ctx, artifactVersion, imageID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, int64) map[string]int64); ok {
		r0 = returnFunc(ctx, artifactVersion, imageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int64)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string, int64) error); ok {
		r1 = returnFunc(ctx, artifactVersion, imageID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDownloadStatRepository_GetTotalDownloadsForManifests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalDownloadsForManifests'
type MockDownloadStatRepository_GetTotalDownloadsForManifests_Call struct {
	*mock.Call
}

// GetTotalDownloadsForManifests is a helper method to define mock.On call
//   - ctx context.Context
//   - artifactVersion []string
//   - imageID int64
func (_e *MockDownloadStatRepository_Expecter) GetTotalDownloadsForManifests(ctx interface{}, artifactVersion interface{}, imageID interface{}) *MockDownloadStatRepository_GetTotalDownloadsForManifests_Call {
	return &MockDownloadStatRepository_GetTotalDownloadsForManifests_Call{Call: _e.mock.On("GetTotalDownloadsForManifests", ctx, artifactVersion, imageID)}
}

func (_c *MockDownloadStatRepository_GetTotalDownloadsForManifests_Call) Run(run func(ctx context.Context, artifactVersion []string, imageID int64)) *MockDownloadStatRepository_GetTotalDownloadsForManifests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDownloadStatRepository_GetTotalDownloadsForManifests_Call) Return(stringToInt64 map[string]int64, err error) *MockDownloadStatRepository_GetTotalDownloadsForManifests_Call {
	_c.Call.Return(stringToInt64, err)
	return _c
}

func (_c *MockDownloadStatRepository_GetTotalDownloadsForManifests_Call) RunAndReturn(run func(ctx context.Context, artifactVersion []string, imageID int64) (map[string]int64, error)) *MockDownloadStatRepository_GetTotalDownloadsForManifests_Call {
	_c.Call.Return(run)
	return _c
}
