// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	store "github.com/harness/gitness/registry/app/store"
	mock "github.com/stretchr/testify/mock"

	types "github.com/harness/gitness/registry/types"
)

// RegistryRepository is an autogenerated mock type for the RegistryRepository type
type RegistryRepository struct {
	mock.Mock
}

type RegistryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *RegistryRepository) EXPECT() *RegistryRepository_Expecter {
	return &RegistryRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx
func (_m *RegistryRepository) Count(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type RegistryRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RegistryRepository_Expecter) Count(ctx interface{}) *RegistryRepository_Count_Call {
	return &RegistryRepository_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *RegistryRepository_Count_Call) Run(run func(ctx context.Context)) *RegistryRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RegistryRepository_Count_Call) Return(_a0 int64, _a1 error) *RegistryRepository_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RegistryRepository_Count_Call) RunAndReturn(run func(context.Context) (int64, error)) *RegistryRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CountAll provides a mock function with given fields: ctx, parentID, packageTypes, search, repoType
func (_m *RegistryRepository) CountAll(ctx context.Context, parentIDs []int64, packageTypes []string, search string, repoType string) (int64, error) {
	ret := _m.Called(ctx, parentIDs, packageTypes, search, repoType)

	if len(ret) == 0 {
		panic("no return value specified for CountAll")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64, []string, string, string) (int64, error)); ok {
		return rf(ctx, parentIDs, packageTypes, search, repoType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64, []string, string, string) int64); ok {
		r0 = rf(ctx, parentIDs, packageTypes, search, repoType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64, []string, string, string) error); ok {
		r1 = rf(ctx, parentIDs, packageTypes, search, repoType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_CountAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAll'
type RegistryRepository_CountAll_Call struct {
	*mock.Call
}

// CountAll is a helper method to define mock.On call
//   - ctx context.Context
//   - parentIDs []int64
//   - packageTypes []string
//   - search string
//   - repoType string
func (_e *RegistryRepository_Expecter) CountAll(ctx interface{}, parentIDs interface{}, packageTypes interface{}, search interface{}, repoType interface{}) *RegistryRepository_CountAll_Call {
	return &RegistryRepository_CountAll_Call{Call: _e.mock.On("CountAll", ctx, parentIDs, packageTypes, search, repoType)}
}

func (_c *RegistryRepository_CountAll_Call) Run(run func(ctx context.Context, parentIDs []int64, packageTypes []string, search string, repoType string)) *RegistryRepository_CountAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64), args[2].([]string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *RegistryRepository_CountAll_Call) Return(count int64, err error) *RegistryRepository_CountAll_Call {
	_c.Call.Return(count, err)
	return _c
}

func (_c *RegistryRepository_CountAll_Call) RunAndReturn(run func(context.Context, []int64, []string, string, string) (int64, error)) *RegistryRepository_CountAll_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, repository
func (_m *RegistryRepository) Create(ctx context.Context, repository *types.Registry) (int64, error) {
	ret := _m.Called(ctx, repository)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Registry) (int64, error)); ok {
		return rf(ctx, repository)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Registry) int64); ok {
		r0 = rf(ctx, repository)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Registry) error); ok {
		r1 = rf(ctx, repository)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RegistryRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - repository *types.Registry
func (_e *RegistryRepository_Expecter) Create(ctx interface{}, repository interface{}) *RegistryRepository_Create_Call {
	return &RegistryRepository_Create_Call{Call: _e.mock.On("Create", ctx, repository)}
}

func (_c *RegistryRepository_Create_Call) Run(run func(ctx context.Context, repository *types.Registry)) *RegistryRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Registry))
	})
	return _c
}

func (_c *RegistryRepository_Create_Call) Return(id int64, err error) *RegistryRepository_Create_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *RegistryRepository_Create_Call) RunAndReturn(run func(context.Context, *types.Registry) (int64, error)) *RegistryRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, parentID, name
func (_m *RegistryRepository) Delete(ctx context.Context, parentID int64, name string) error {
	ret := _m.Called(ctx, parentID, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, parentID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistryRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RegistryRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - name string
func (_e *RegistryRepository_Expecter) Delete(ctx interface{}, parentID interface{}, name interface{}) *RegistryRepository_Delete_Call {
	return &RegistryRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, parentID, name)}
}

func (_c *RegistryRepository_Delete_Call) Run(run func(ctx context.Context, parentID int64, name string)) *RegistryRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *RegistryRepository_Delete_Call) Return(err error) *RegistryRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RegistryRepository_Delete_Call) RunAndReturn(run func(context.Context, int64, string) error) *RegistryRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRegistriesIDByUpstreamProxyID provides a mock function with given fields: ctx, upstreamProxyID, rootParentID
func (_m *RegistryRepository) FetchRegistriesIDByUpstreamProxyID(ctx context.Context, upstreamProxyID string, rootParentID int64) ([]int64, error) {
	ret := _m.Called(ctx, upstreamProxyID, rootParentID)

	if len(ret) == 0 {
		panic("no return value specified for FetchRegistriesIDByUpstreamProxyID")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) ([]int64, error)); ok {
		return rf(ctx, upstreamProxyID, rootParentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) []int64); ok {
		r0 = rf(ctx, upstreamProxyID, rootParentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, upstreamProxyID, rootParentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_FetchRegistriesIDByUpstreamProxyID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRegistriesIDByUpstreamProxyID'
type RegistryRepository_FetchRegistriesIDByUpstreamProxyID_Call struct {
	*mock.Call
}

// FetchRegistriesIDByUpstreamProxyID is a helper method to define mock.On call
//   - ctx context.Context
//   - upstreamProxyID string
//   - rootParentID int64
func (_e *RegistryRepository_Expecter) FetchRegistriesIDByUpstreamProxyID(ctx interface{}, upstreamProxyID interface{}, rootParentID interface{}) *RegistryRepository_FetchRegistriesIDByUpstreamProxyID_Call {
	return &RegistryRepository_FetchRegistriesIDByUpstreamProxyID_Call{Call: _e.mock.On("FetchRegistriesIDByUpstreamProxyID", ctx, upstreamProxyID, rootParentID)}
}

func (_c *RegistryRepository_FetchRegistriesIDByUpstreamProxyID_Call) Run(run func(ctx context.Context, upstreamProxyID string, rootParentID int64)) *RegistryRepository_FetchRegistriesIDByUpstreamProxyID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *RegistryRepository_FetchRegistriesIDByUpstreamProxyID_Call) Return(ids []int64, err error) *RegistryRepository_FetchRegistriesIDByUpstreamProxyID_Call {
	_c.Call.Return(ids, err)
	return _c
}

func (_c *RegistryRepository_FetchRegistriesIDByUpstreamProxyID_Call) RunAndReturn(run func(context.Context, string, int64) ([]int64, error)) *RegistryRepository_FetchRegistriesIDByUpstreamProxyID_Call {
	_c.Call.Return(run)
	return _c
}

// FetchUpstreamProxyIDs provides a mock function with given fields: ctx, repokeys, parentID
func (_m *RegistryRepository) FetchUpstreamProxyIDs(ctx context.Context, repokeys []string, parentID int64) ([]int64, error) {
	ret := _m.Called(ctx, repokeys, parentID)

	if len(ret) == 0 {
		panic("no return value specified for FetchUpstreamProxyIDs")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, int64) ([]int64, error)); ok {
		return rf(ctx, repokeys, parentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, int64) []int64); ok {
		r0 = rf(ctx, repokeys, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, int64) error); ok {
		r1 = rf(ctx, repokeys, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_FetchUpstreamProxyIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUpstreamProxyIDs'
type RegistryRepository_FetchUpstreamProxyIDs_Call struct {
	*mock.Call
}

// FetchUpstreamProxyIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - repokeys []string
//   - parentID int64
func (_e *RegistryRepository_Expecter) FetchUpstreamProxyIDs(ctx interface{}, repokeys interface{}, parentID interface{}) *RegistryRepository_FetchUpstreamProxyIDs_Call {
	return &RegistryRepository_FetchUpstreamProxyIDs_Call{Call: _e.mock.On("FetchUpstreamProxyIDs", ctx, repokeys, parentID)}
}

func (_c *RegistryRepository_FetchUpstreamProxyIDs_Call) Run(run func(ctx context.Context, repokeys []string, parentID int64)) *RegistryRepository_FetchUpstreamProxyIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(int64))
	})
	return _c
}

func (_c *RegistryRepository_FetchUpstreamProxyIDs_Call) Return(ids []int64, err error) *RegistryRepository_FetchUpstreamProxyIDs_Call {
	_c.Call.Return(ids, err)
	return _c
}

func (_c *RegistryRepository_FetchUpstreamProxyIDs_Call) RunAndReturn(run func(context.Context, []string, int64) ([]int64, error)) *RegistryRepository_FetchUpstreamProxyIDs_Call {
	_c.Call.Return(run)
	return _c
}

// FetchUpstreamProxyKeys provides a mock function with given fields: ctx, ids
func (_m *RegistryRepository) FetchUpstreamProxyKeys(ctx context.Context, ids []int64) ([]string, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for FetchUpstreamProxyKeys")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]string, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []string); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_FetchUpstreamProxyKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUpstreamProxyKeys'
type RegistryRepository_FetchUpstreamProxyKeys_Call struct {
	*mock.Call
}

// FetchUpstreamProxyKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []int64
func (_e *RegistryRepository_Expecter) FetchUpstreamProxyKeys(ctx interface{}, ids interface{}) *RegistryRepository_FetchUpstreamProxyKeys_Call {
	return &RegistryRepository_FetchUpstreamProxyKeys_Call{Call: _e.mock.On("FetchUpstreamProxyKeys", ctx, ids)}
}

func (_c *RegistryRepository_FetchUpstreamProxyKeys_Call) Run(run func(ctx context.Context, ids []int64)) *RegistryRepository_FetchUpstreamProxyKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *RegistryRepository_FetchUpstreamProxyKeys_Call) Return(repokeys []string, err error) *RegistryRepository_FetchUpstreamProxyKeys_Call {
	_c.Call.Return(repokeys, err)
	return _c
}

func (_c *RegistryRepository_FetchUpstreamProxyKeys_Call) RunAndReturn(run func(context.Context, []int64) ([]string, error)) *RegistryRepository_FetchUpstreamProxyKeys_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *RegistryRepository) Get(ctx context.Context, id int64) (*types.Registry, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *types.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*types.Registry, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *types.Registry); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RegistryRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *RegistryRepository_Expecter) Get(ctx interface{}, id interface{}) *RegistryRepository_Get_Call {
	return &RegistryRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *RegistryRepository_Get_Call) Run(run func(ctx context.Context, id int64)) *RegistryRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *RegistryRepository_Get_Call) Return(repository *types.Registry, err error) *RegistryRepository_Get_Call {
	_c.Call.Return(repository, err)
	return _c
}

func (_c *RegistryRepository_Get_Call) RunAndReturn(run func(context.Context, int64) (*types.Registry, error)) *RegistryRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, parentID, packageTypes, sortByField, sortByOrder, limit, offset, search, repoType, recursive
func (_m *RegistryRepository) GetAll(ctx context.Context, parentIDs []int64, packageTypes []string, sortByField string, sortByOrder string, limit int, offset int, search string, repoType string) (*[]store.RegistryMetadata, error) {
	ret := _m.Called(ctx, parentIDs, packageTypes, sortByField, sortByOrder, limit, offset, search, repoType)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *[]store.RegistryMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64, []string, string, string, int, int, string, string) (*[]store.RegistryMetadata, error)); ok {
		return rf(ctx, parentIDs, packageTypes, sortByField, sortByOrder, limit, offset, search, repoType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64, []string, string, string, int, int, string, string) *[]store.RegistryMetadata); ok {
		r0 = rf(ctx, parentIDs, packageTypes, sortByField, sortByOrder, limit, offset, search, repoType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]store.RegistryMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64, []string, string, string, int, int, string, string) error); ok {
		r1 = rf(ctx, parentIDs, packageTypes, sortByField, sortByOrder, limit, offset, search, repoType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type RegistryRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - parentIDs []int64
//   - packageTypes []string
//   - sortByField string
//   - sortByOrder string
//   - limit int
//   - offset int
//   - search string
//   - repoType string
func (_e *RegistryRepository_Expecter) GetAll(ctx interface{}, parentIDs interface{}, packageTypes interface{}, sortByField interface{}, sortByOrder interface{}, limit interface{}, offset interface{}, search interface{}, repoType interface{}) *RegistryRepository_GetAll_Call {
	return &RegistryRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, parentIDs, packageTypes, sortByField, sortByOrder, limit, offset, search, repoType)}
}

func (_c *RegistryRepository_GetAll_Call) Run(run func(ctx context.Context, parentIDs []int64, packageTypes []string, sortByField string, sortByOrder string, limit int, offset int, search string, repoType string)) *RegistryRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64), args[2].([]string), args[3].(string), args[4].(string), args[5].(int), args[6].(int), args[7].(string), args[8].(string))
	})
	return _c
}

func (_c *RegistryRepository_GetAll_Call) Return(repos *[]store.RegistryMetadata, err error) *RegistryRepository_GetAll_Call {
	_c.Call.Return(repos, err)
	return _c
}

func (_c *RegistryRepository_GetAll_Call) RunAndReturn(run func(context.Context, int64, []string, string, string, int, int, string, string, bool) (*[]store.RegistryMetadata, error)) *RegistryRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDIn provides a mock function with given fields: ctx, ids
func (_m *RegistryRepository) GetByIDIn(ctx context.Context, ids []int64) (*[]types.Registry, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDIn")
	}

	var r0 *[]types.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) (*[]types.Registry, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) *[]types.Registry); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]types.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_GetByIDIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDIn'
type RegistryRepository_GetByIDIn_Call struct {
	*mock.Call
}

// GetByIDIn is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []int64
func (_e *RegistryRepository_Expecter) GetByIDIn(ctx interface{}, ids interface{}) *RegistryRepository_GetByIDIn_Call {
	return &RegistryRepository_GetByIDIn_Call{Call: _e.mock.On("GetByIDIn", ctx, ids)}
}

func (_c *RegistryRepository_GetByIDIn_Call) Run(run func(ctx context.Context, ids []int64)) *RegistryRepository_GetByIDIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *RegistryRepository_GetByIDIn_Call) Return(registries *[]types.Registry, err error) *RegistryRepository_GetByIDIn_Call {
	_c.Call.Return(registries, err)
	return _c
}

func (_c *RegistryRepository_GetByIDIn_Call) RunAndReturn(run func(context.Context, []int64) (*[]types.Registry, error)) *RegistryRepository_GetByIDIn_Call {
	_c.Call.Return(run)
	return _c
}

// GetByParentIDAndName provides a mock function with given fields: ctx, parentID, name
func (_m *RegistryRepository) GetByParentIDAndName(ctx context.Context, parentID int64, name string) (*types.Registry, error) {
	ret := _m.Called(ctx, parentID, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByParentIDAndName")
	}

	var r0 *types.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*types.Registry, error)); ok {
		return rf(ctx, parentID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *types.Registry); ok {
		r0 = rf(ctx, parentID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, parentID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_GetByParentIDAndName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByParentIDAndName'
type RegistryRepository_GetByParentIDAndName_Call struct {
	*mock.Call
}

// GetByParentIDAndName is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - name string
func (_e *RegistryRepository_Expecter) GetByParentIDAndName(ctx interface{}, parentID interface{}, name interface{}) *RegistryRepository_GetByParentIDAndName_Call {
	return &RegistryRepository_GetByParentIDAndName_Call{Call: _e.mock.On("GetByParentIDAndName", ctx, parentID, name)}
}

func (_c *RegistryRepository_GetByParentIDAndName_Call) Run(run func(ctx context.Context, parentID int64, name string)) *RegistryRepository_GetByParentIDAndName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *RegistryRepository_GetByParentIDAndName_Call) Return(registry *types.Registry, err error) *RegistryRepository_GetByParentIDAndName_Call {
	_c.Call.Return(registry, err)
	return _c
}

func (_c *RegistryRepository_GetByParentIDAndName_Call) RunAndReturn(run func(context.Context, int64, string) (*types.Registry, error)) *RegistryRepository_GetByParentIDAndName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByRootParentIDAndName provides a mock function with given fields: ctx, parentID, name
func (_m *RegistryRepository) GetByRootParentIDAndName(ctx context.Context, parentID int64, name string) (*types.Registry, error) {
	ret := _m.Called(ctx, parentID, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByRootParentIDAndName")
	}

	var r0 *types.Registry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*types.Registry, error)); ok {
		return rf(ctx, parentID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *types.Registry); ok {
		r0 = rf(ctx, parentID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Registry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, parentID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistryRepository_GetByRootParentIDAndName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRootParentIDAndName'
type RegistryRepository_GetByRootParentIDAndName_Call struct {
	*mock.Call
}

// GetByRootParentIDAndName is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
//   - name string
func (_e *RegistryRepository_Expecter) GetByRootParentIDAndName(ctx interface{}, parentID interface{}, name interface{}) *RegistryRepository_GetByRootParentIDAndName_Call {
	return &RegistryRepository_GetByRootParentIDAndName_Call{Call: _e.mock.On("GetByRootParentIDAndName", ctx, parentID, name)}
}

func (_c *RegistryRepository_GetByRootParentIDAndName_Call) Run(run func(ctx context.Context, parentID int64, name string)) *RegistryRepository_GetByRootParentIDAndName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *RegistryRepository_GetByRootParentIDAndName_Call) Return(registry *types.Registry, err error) *RegistryRepository_GetByRootParentIDAndName_Call {
	_c.Call.Return(registry, err)
	return _c
}

func (_c *RegistryRepository_GetByRootParentIDAndName_Call) RunAndReturn(run func(context.Context, int64, string) (*types.Registry, error)) *RegistryRepository_GetByRootParentIDAndName_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, repository
func (_m *RegistryRepository) Update(ctx context.Context, repository *types.Registry) error {
	ret := _m.Called(ctx, repository)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Registry) error); ok {
		r0 = rf(ctx, repository)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistryRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RegistryRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - repository *types.Registry
func (_e *RegistryRepository_Expecter) Update(ctx interface{}, repository interface{}) *RegistryRepository_Update_Call {
	return &RegistryRepository_Update_Call{Call: _e.mock.On("Update", ctx, repository)}
}

func (_c *RegistryRepository_Update_Call) Run(run func(ctx context.Context, repository *types.Registry)) *RegistryRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Registry))
	})
	return _c
}

func (_c *RegistryRepository_Update_Call) Return(err error) *RegistryRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RegistryRepository_Update_Call) RunAndReturn(run func(context.Context, *types.Registry) error) *RegistryRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRegistryRepository creates a new instance of RegistryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegistryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegistryRepository {
	mock := &RegistryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
