// Code generated by testify. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/harness/gitness/types"

	"github.com/stretchr/testify/mock"
)

// SpaceFinder is a mock of SpaceFinder interface.
type SpaceFinder struct {
	mock.Mock
}

// Find provides a mock function
func (m *SpaceFinder) Find(ctx context.Context, id int64) (*types.SpaceCore, error) {
	ret := m.Called(ctx, id)

	var r0 *types.SpaceCore
	if rf, ok := ret.Get(0).(func(context.Context, int64) *types.SpaceCore); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SpaceCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByRef provides a mock function
func (m *SpaceFinder) FindByID(ctx context.Context, id int64) (*types.SpaceCore, error) {
	ret := m.Called(ctx, id)

	var r0 *types.SpaceCore
	if rf, ok := ret.Get(0).(func(context.Context, int64) *types.SpaceCore); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SpaceCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (m *SpaceFinder) FindByRef(ctx context.Context, ref string) (*types.SpaceCore, error) {
	ret := m.Called(ctx, ref)

	var r0 *types.SpaceCore
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.SpaceCore); ok {
		r0 = rf(ctx, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SpaceCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPath provides a mock function
func (m *SpaceFinder) FindByPath(ctx context.Context, path string) (*types.SpaceCore, error) {
	ret := m.Called(ctx, path)

	var r0 *types.SpaceCore
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.SpaceCore); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SpaceCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdentifier provides a mock function
func (m *SpaceFinder) FindByIdentifier(ctx context.Context, identifier string) (*types.SpaceCore, error) {
	ret := m.Called(ctx, identifier)

	var r0 *types.SpaceCore
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.SpaceCore); ok {
		r0 = rf(ctx, identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SpaceCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
