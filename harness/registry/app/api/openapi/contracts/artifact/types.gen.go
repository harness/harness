// Package artifact provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package artifact

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ArtifactType.
const (
	ArtifactTypeDataset ArtifactType = "dataset"
	ArtifactTypeModel   ArtifactType = "model"
)

// Defines values for AuthType.
const (
	AuthTypeAccessKeySecretKey AuthType = "AccessKeySecretKey"
	AuthTypeAnonymous          AuthType = "Anonymous"
	AuthTypeUserPassword       AuthType = "UserPassword"
)

// Defines values for ClientSetupStepType.
const (
	ClientSetupStepTypeGenerateToken ClientSetupStepType = "GenerateToken"
	ClientSetupStepTypeStatic        ClientSetupStepType = "Static"
)

// Defines values for PackageType.
const (
	PackageTypeCARGO       PackageType = "CARGO"
	PackageTypeDOCKER      PackageType = "DOCKER"
	PackageTypeGENERIC     PackageType = "GENERIC"
	PackageTypeGO          PackageType = "GO"
	PackageTypeHELM        PackageType = "HELM"
	PackageTypeHUGGINGFACE PackageType = "HUGGINGFACE"
	PackageTypeMAVEN       PackageType = "MAVEN"
	PackageTypeNPM         PackageType = "NPM"
	PackageTypeNUGET       PackageType = "NUGET"
	PackageTypePYTHON      PackageType = "PYTHON"
	PackageTypeRPM         PackageType = "RPM"
)

// Defines values for RegistryType.
const (
	RegistryTypeUPSTREAM RegistryType = "UPSTREAM"
	RegistryTypeVIRTUAL  RegistryType = "VIRTUAL"
)

// Defines values for ReplicationRuleDestinationType.
const (
	ReplicationRuleDestinationTypeGCP   ReplicationRuleDestinationType = "GCP"
	ReplicationRuleDestinationTypeJfrog ReplicationRuleDestinationType = "Jfrog"
	ReplicationRuleDestinationTypeLocal ReplicationRuleDestinationType = "Local"
)

// Defines values for ReplicationRuleSourceType.
const (
	ReplicationRuleSourceTypeGCP   ReplicationRuleSourceType = "GCP"
	ReplicationRuleSourceTypeJfrog ReplicationRuleSourceType = "Jfrog"
	ReplicationRuleSourceTypeLocal ReplicationRuleSourceType = "Local"
)

// Defines values for ReplicationRuleRequestDestinationType.
const (
	ReplicationRuleRequestDestinationTypeGCP   ReplicationRuleRequestDestinationType = "GCP"
	ReplicationRuleRequestDestinationTypeJfrog ReplicationRuleRequestDestinationType = "Jfrog"
	ReplicationRuleRequestDestinationTypeLocal ReplicationRuleRequestDestinationType = "Local"
)

// Defines values for ReplicationRuleRequestSourceType.
const (
	ReplicationRuleRequestSourceTypeGCP   ReplicationRuleRequestSourceType = "GCP"
	ReplicationRuleRequestSourceTypeJfrog ReplicationRuleRequestSourceType = "Jfrog"
	ReplicationRuleRequestSourceTypeLocal ReplicationRuleRequestSourceType = "Local"
)

// Defines values for SectionType.
const (
	SectionTypeINLINE SectionType = "INLINE"
	SectionTypeTABS   SectionType = "TABS"
)

// Defines values for Status.
const (
	StatusERROR   Status = "ERROR"
	StatusFAILURE Status = "FAILURE"
	StatusSUCCESS Status = "SUCCESS"
)

// Defines values for Trigger.
const (
	TriggerARTIFACTCREATION Trigger = "ARTIFACT_CREATION"
	TriggerARTIFACTDELETION Trigger = "ARTIFACT_DELETION"
)

// Defines values for UpstreamConfigSource.
const (
	UpstreamConfigSourceAwsEcr       UpstreamConfigSource = "AwsEcr"
	UpstreamConfigSourceCrates       UpstreamConfigSource = "Crates"
	UpstreamConfigSourceCustom       UpstreamConfigSource = "Custom"
	UpstreamConfigSourceDockerhub    UpstreamConfigSource = "Dockerhub"
	UpstreamConfigSourceGoProxy      UpstreamConfigSource = "GoProxy"
	UpstreamConfigSourceHuggingFace  UpstreamConfigSource = "HuggingFace"
	UpstreamConfigSourceMavenCentral UpstreamConfigSource = "MavenCentral"
	UpstreamConfigSourceNpmJs        UpstreamConfigSource = "NpmJs"
	UpstreamConfigSourceNugetOrg     UpstreamConfigSource = "NugetOrg"
	UpstreamConfigSourcePyPi         UpstreamConfigSource = "PyPi"
)

// Defines values for WebhookExecResult.
const (
	WebhookExecResultFATALERROR     WebhookExecResult = "FATAL_ERROR"
	WebhookExecResultRETRIABLEERROR WebhookExecResult = "RETRIABLE_ERROR"
	WebhookExecResultSUCCESS        WebhookExecResult = "SUCCESS"
)

// Defines values for RegistryTypeParam.
const (
	UPSTREAM RegistryTypeParam = "UPSTREAM"
	VIRTUAL  RegistryTypeParam = "VIRTUAL"
)

// Defines values for ArtifactTypeParam.
const (
	Dataset ArtifactTypeParam = "dataset"
	Model   ArtifactTypeParam = "model"
)

// Defines values for ScopeParam.
const (
	Ancestors   ScopeParam = "ancestors"
	Descendants ScopeParam = "descendants"
	None        ScopeParam = "none"
)

// Defines values for VersionTypeParam.
const (
	DIGEST VersionTypeParam = "DIGEST"
	TAG    VersionTypeParam = "TAG"
)

// Defines values for DeleteArtifactParamsArtifactType.
const (
	DeleteArtifactParamsArtifactTypeDataset DeleteArtifactParamsArtifactType = "dataset"
	DeleteArtifactParamsArtifactTypeModel   DeleteArtifactParamsArtifactType = "model"
)

// Defines values for UpdateArtifactLabelsParamsArtifactType.
const (
	UpdateArtifactLabelsParamsArtifactTypeDataset UpdateArtifactLabelsParamsArtifactType = "dataset"
	UpdateArtifactLabelsParamsArtifactTypeModel   UpdateArtifactLabelsParamsArtifactType = "model"
)

// Defines values for GetArtifactSummaryParamsArtifactType.
const (
	GetArtifactSummaryParamsArtifactTypeDataset GetArtifactSummaryParamsArtifactType = "dataset"
	GetArtifactSummaryParamsArtifactTypeModel   GetArtifactSummaryParamsArtifactType = "model"
)

// Defines values for DeleteArtifactVersionParamsArtifactType.
const (
	DeleteArtifactVersionParamsArtifactTypeDataset DeleteArtifactVersionParamsArtifactType = "dataset"
	DeleteArtifactVersionParamsArtifactTypeModel   DeleteArtifactVersionParamsArtifactType = "model"
)

// Defines values for GetArtifactDetailsParamsArtifactType.
const (
	GetArtifactDetailsParamsArtifactTypeDataset GetArtifactDetailsParamsArtifactType = "dataset"
	GetArtifactDetailsParamsArtifactTypeModel   GetArtifactDetailsParamsArtifactType = "model"
)

// Defines values for GetDockerArtifactDetailsParamsVersionType.
const (
	GetDockerArtifactDetailsParamsVersionTypeDIGEST GetDockerArtifactDetailsParamsVersionType = "DIGEST"
	GetDockerArtifactDetailsParamsVersionTypeTAG    GetDockerArtifactDetailsParamsVersionType = "TAG"
)

// Defines values for GetDockerArtifactManifestsParamsVersionType.
const (
	GetDockerArtifactManifestsParamsVersionTypeDIGEST GetDockerArtifactManifestsParamsVersionType = "DIGEST"
	GetDockerArtifactManifestsParamsVersionTypeTAG    GetDockerArtifactManifestsParamsVersionType = "TAG"
)

// Defines values for GetArtifactFileParamsArtifactType.
const (
	GetArtifactFileParamsArtifactTypeDataset GetArtifactFileParamsArtifactType = "dataset"
	GetArtifactFileParamsArtifactTypeModel   GetArtifactFileParamsArtifactType = "model"
)

// Defines values for GetArtifactFilesParamsArtifactType.
const (
	GetArtifactFilesParamsArtifactTypeDataset GetArtifactFilesParamsArtifactType = "dataset"
	GetArtifactFilesParamsArtifactTypeModel   GetArtifactFilesParamsArtifactType = "model"
)

// Defines values for GetHelmArtifactDetailsParamsVersionType.
const (
	GetHelmArtifactDetailsParamsVersionTypeDIGEST GetHelmArtifactDetailsParamsVersionType = "DIGEST"
	GetHelmArtifactDetailsParamsVersionTypeTAG    GetHelmArtifactDetailsParamsVersionType = "TAG"
)

// Defines values for GetArtifactVersionSummaryParamsArtifactType.
const (
	GetArtifactVersionSummaryParamsArtifactTypeDataset GetArtifactVersionSummaryParamsArtifactType = "dataset"
	GetArtifactVersionSummaryParamsArtifactTypeModel   GetArtifactVersionSummaryParamsArtifactType = "model"
)

// Defines values for GetAllArtifactVersionsParamsArtifactType.
const (
	GetAllArtifactVersionsParamsArtifactTypeDataset GetAllArtifactVersionsParamsArtifactType = "dataset"
	GetAllArtifactVersionsParamsArtifactTypeModel   GetAllArtifactVersionsParamsArtifactType = "model"
)

// Defines values for GetAllArtifactsByRegistryParamsArtifactType.
const (
	GetAllArtifactsByRegistryParamsArtifactTypeDataset GetAllArtifactsByRegistryParamsArtifactType = "dataset"
	GetAllArtifactsByRegistryParamsArtifactTypeModel   GetAllArtifactsByRegistryParamsArtifactType = "model"
)

// Defines values for GetAllRegistriesParamsType.
const (
	GetAllRegistriesParamsTypeUPSTREAM GetAllRegistriesParamsType = "UPSTREAM"
	GetAllRegistriesParamsTypeVIRTUAL  GetAllRegistriesParamsType = "VIRTUAL"
)

// Defines values for GetAllRegistriesParamsScope.
const (
	GetAllRegistriesParamsScopeAncestors   GetAllRegistriesParamsScope = "ancestors"
	GetAllRegistriesParamsScopeDescendants GetAllRegistriesParamsScope = "descendants"
	GetAllRegistriesParamsScopeNone        GetAllRegistriesParamsScope = "none"
)

// AccessKeySecretKey defines model for AccessKeySecretKey.
type AccessKeySecretKey struct {
	AccessKey                 *string `json:"accessKey,omitempty"`
	AccessKeySecretIdentifier *string `json:"accessKeySecretIdentifier,omitempty"`
	AccessKeySecretSpaceId    *int64  `json:"accessKeySecretSpaceId,omitempty"`
	AccessKeySecretSpacePath  *string `json:"accessKeySecretSpacePath,omitempty"`
	SecretKeyIdentifier       string  `json:"secretKeyIdentifier"`
	SecretKeySpaceId          *int64  `json:"secretKeySpaceId,omitempty"`
	SecretKeySpacePath        *string `json:"secretKeySpacePath,omitempty"`
}

// Anonymous defines model for Anonymous.
type Anonymous interface{}

// ArtifactDetail Artifact Detail
type ArtifactDetail struct {
	// ArtifactType refers to artifact type
	ArtifactType  *ArtifactType `json:"artifactType,omitempty"`
	CreatedAt     *string       `json:"createdAt,omitempty"`
	CreatedBy     *string       `json:"createdBy,omitempty"`
	DownloadCount *int64        `json:"downloadCount,omitempty"`
	IsQuarantined *bool         `json:"isQuarantined,omitempty"`
	ModifiedAt    *string       `json:"modifiedAt,omitempty"`
	Name          *string       `json:"name,omitempty"`

	// PackageType refers to package
	PackageType      PackageType `json:"packageType"`
	QuarantineReason *string     `json:"quarantineReason,omitempty"`
	Size             *string     `json:"size,omitempty"`
	Version          string      `json:"version"`
	union            json.RawMessage
}

// ArtifactEntityMetadata Artifact Entity Metadata
type ArtifactEntityMetadata map[string]interface{}

// ArtifactLabelRequest defines model for ArtifactLabelRequest.
type ArtifactLabelRequest struct {
	Labels []string `json:"labels"`
}

// ArtifactMetadata Artifact Metadata
type ArtifactMetadata struct {
	// ArtifactType refers to artifact type
	ArtifactType   *ArtifactType `json:"artifactType,omitempty"`
	DownloadsCount *int64        `json:"downloadsCount,omitempty"`
	IsQuarantined  *bool         `json:"isQuarantined,omitempty"`
	Labels         *[]string     `json:"labels,omitempty"`
	LastModified   *string       `json:"lastModified,omitempty"`

	// Metadata Artifact Entity Metadata
	Metadata *ArtifactEntityMetadata `json:"metadata,omitempty"`
	Name     string                  `json:"name"`

	// PackageType refers to package
	PackageType        PackageType `json:"packageType"`
	PullCommand        *string     `json:"pullCommand,omitempty"`
	QuarantineReason   *string     `json:"quarantineReason,omitempty"`
	RegistryIdentifier string      `json:"registryIdentifier"`
	RegistryPath       string      `json:"registryPath"`
	Version            *string     `json:"version,omitempty"`
}

// ArtifactStats Harness Artifact Stats
type ArtifactStats struct {
	DownloadCount    *int64 `json:"downloadCount,omitempty"`
	DownloadSize     *int64 `json:"downloadSize,omitempty"`
	TotalStorageSize *int64 `json:"totalStorageSize,omitempty"`
	UploadSize       *int64 `json:"uploadSize,omitempty"`
}

// ArtifactSummary Harness Artifact Summary
type ArtifactSummary struct {
	// ArtifactType refers to artifact type
	ArtifactType   *ArtifactType `json:"artifactType,omitempty"`
	CreatedAt      *string       `json:"createdAt,omitempty"`
	DownloadsCount *int64        `json:"downloadsCount,omitempty"`
	ImageName      string        `json:"imageName"`
	Labels         *[]string     `json:"labels,omitempty"`
	ModifiedAt     *string       `json:"modifiedAt,omitempty"`

	// PackageType refers to package
	PackageType PackageType `json:"packageType"`
}

// ArtifactType refers to artifact type
type ArtifactType string

// ArtifactVersionMetadata Artifact Version Metadata
type ArtifactVersionMetadata struct {
	// ArtifactType refers to artifact type
	ArtifactType   *ArtifactType `json:"artifactType,omitempty"`
	DigestCount    *int          `json:"digestCount,omitempty"`
	DownloadsCount *int64        `json:"downloadsCount,omitempty"`
	FileCount      *int64        `json:"fileCount,omitempty"`
	IsQuarantined  *bool         `json:"isQuarantined,omitempty"`
	LastModified   *string       `json:"lastModified,omitempty"`

	// Metadata Artifact Entity Metadata
	Metadata *ArtifactEntityMetadata `json:"metadata,omitempty"`
	Name     string                  `json:"name"`

	// PackageType refers to package
	PackageType        PackageType `json:"packageType"`
	PullCommand        *string     `json:"pullCommand,omitempty"`
	QuarantineReason   *string     `json:"quarantineReason,omitempty"`
	RegistryIdentifier string      `json:"registryIdentifier"`
	RegistryPath       string      `json:"registryPath"`
	Size               *string     `json:"size,omitempty"`
}

// ArtifactVersionSummary Docker Artifact Version Summary
type ArtifactVersionSummary struct {
	// ArtifactType refers to artifact type
	ArtifactType  *ArtifactType `json:"artifactType,omitempty"`
	ImageName     string        `json:"imageName"`
	IsQuarantined *bool         `json:"isQuarantined,omitempty"`

	// PackageType refers to package
	PackageType      PackageType `json:"packageType"`
	QuarantineReason *string     `json:"quarantineReason,omitempty"`
	Version          string      `json:"version"`
}

// AuthType Authentication type
type AuthType string

// CargoArtifactDetailConfig Config for Cargo artifact details
type CargoArtifactDetailConfig struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// CleanupPolicy Cleanup Policy for Harness Artifact Registries
type CleanupPolicy struct {
	ExpireDays    *int      `json:"expireDays,omitempty"`
	Name          *string   `json:"name,omitempty"`
	PackagePrefix *[]string `json:"packagePrefix,omitempty"`
	VersionPrefix *[]string `json:"versionPrefix,omitempty"`
}

// ClientSetupDetails Client Setup Details
type ClientSetupDetails struct {
	MainHeader string               `json:"mainHeader"`
	SecHeader  string               `json:"secHeader"`
	Sections   []ClientSetupSection `json:"sections"`
}

// ClientSetupSection Client Setup Section
type ClientSetupSection struct {
	Header    *string `json:"header,omitempty"`
	SecHeader *string `json:"secHeader,omitempty"`

	// Type refers to client setup section type
	Type  SectionType `json:"type"`
	union json.RawMessage
}

// ClientSetupStep Client Setup Step
type ClientSetupStep struct {
	Commands *[]ClientSetupStepCommand `json:"commands,omitempty"`
	Header   *string                   `json:"header,omitempty"`

	// Type ClientSetupStepType type
	Type *ClientSetupStepType `json:"type,omitempty"`
}

// ClientSetupStepCommand Client Setup Step Command
type ClientSetupStepCommand struct {
	Label *string `json:"label,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ClientSetupStepConfig Client Setup Step
type ClientSetupStepConfig struct {
	Steps *[]ClientSetupStep `json:"steps,omitempty"`
}

// ClientSetupStepType ClientSetupStepType type
type ClientSetupStepType string

// DockerArtifactDetail Docker Artifact Detail
type DockerArtifactDetail struct {
	CreatedAt      *string `json:"createdAt,omitempty"`
	DownloadsCount *int64  `json:"downloadsCount,omitempty"`
	ImageName      string  `json:"imageName"`
	IsQuarantined  *bool   `json:"isQuarantined,omitempty"`

	// Metadata Artifact Entity Metadata
	Metadata   *ArtifactEntityMetadata `json:"metadata,omitempty"`
	ModifiedAt *string                 `json:"modifiedAt,omitempty"`

	// PackageType refers to package
	PackageType         PackageType `json:"packageType"`
	PullCommand         *string     `json:"pullCommand,omitempty"`
	PullCommandByDigest *string     `json:"pullCommandByDigest,omitempty"`
	QuarantineReason    *string     `json:"quarantineReason,omitempty"`
	RegistryPath        string      `json:"registryPath"`
	Size                *string     `json:"size,omitempty"`
	Url                 string      `json:"url"`
	Version             string      `json:"version"`
}

// DockerArtifactDetailConfig Config for docker artifact details
type DockerArtifactDetailConfig struct {
	PullCommand *string `json:"pullCommand,omitempty"`
}

// DockerArtifactManifest Docker Artifact Manifest
type DockerArtifactManifest struct {
	Manifest string `json:"manifest"`
}

// DockerLayerEntry Harness Artifact Layers
type DockerLayerEntry struct {
	Command string  `json:"command"`
	Size    *string `json:"size,omitempty"`
}

// DockerLayersSummary Harness Layers Summary
type DockerLayersSummary struct {
	Digest string              `json:"digest"`
	Layers *[]DockerLayerEntry `json:"layers,omitempty"`
	OsArch *string             `json:"osArch,omitempty"`
}

// DockerManifestDetails Harness Artifact Layers
type DockerManifestDetails struct {
	CreatedAt        *string `json:"createdAt,omitempty"`
	Digest           string  `json:"digest"`
	DownloadsCount   *int64  `json:"downloadsCount,omitempty"`
	IsQuarantined    *bool   `json:"isQuarantined,omitempty"`
	OsArch           string  `json:"osArch"`
	QuarantineReason *string `json:"quarantineReason,omitempty"`
	Size             *string `json:"size,omitempty"`
}

// DockerManifests Harness Manifests
type DockerManifests struct {
	ImageName string                   `json:"imageName"`
	Manifests *[]DockerManifestDetails `json:"manifests,omitempty"`
	Version   string                   `json:"version"`
}

// Error defines model for Error.
type Error struct {
	// Code The http error code
	Code string `json:"code"`

	// Details Additional details about the error
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message The reason the request failed
	Message string `json:"message"`
}

// ExtraHeader Webhook Extra Header
type ExtraHeader struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// FileDetail File Detail
type FileDetail struct {
	Checksums       []string `json:"checksums"`
	CreatedAt       string   `json:"createdAt"`
	DownloadCommand string   `json:"downloadCommand"`
	Name            string   `json:"name"`
	Size            string   `json:"size"`
}

// GenericArtifactDetailConfig Config for generic artifact details
type GenericArtifactDetailConfig struct {
	Description *string `json:"description,omitempty"`
}

// GoArtifactDetailConfig Config for Go artifact details
type GoArtifactDetailConfig struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// HelmArtifactDetail Helm Artifact Detail
type HelmArtifactDetail struct {
	Artifact       *string `json:"artifact,omitempty"`
	CreatedAt      *string `json:"createdAt,omitempty"`
	DownloadsCount *int64  `json:"downloadsCount,omitempty"`

	// Metadata Artifact Entity Metadata
	Metadata   *ArtifactEntityMetadata `json:"metadata,omitempty"`
	ModifiedAt *string                 `json:"modifiedAt,omitempty"`

	// PackageType refers to package
	PackageType         PackageType `json:"packageType"`
	PullCommand         *string     `json:"pullCommand,omitempty"`
	PullCommandByDigest *string     `json:"pullCommandByDigest,omitempty"`
	RegistryPath        string      `json:"registryPath"`
	Size                *string     `json:"size,omitempty"`
	Url                 string      `json:"url"`
	Version             string      `json:"version"`
}

// HelmArtifactDetailConfig Config for helm artifact details
type HelmArtifactDetailConfig struct {
	PullCommand *string `json:"pullCommand,omitempty"`
}

// HelmArtifactManifest Helm Artifact Manifest
type HelmArtifactManifest struct {
	Manifest string `json:"manifest"`
}

// HuggingFaceArtifactDetailConfig Config for huggingface artifact details
type HuggingFaceArtifactDetailConfig struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// JfrogReplicationRegistry defines model for JfrogReplicationRegistry.
type JfrogReplicationRegistry struct {
	Namespace             string  `json:"namespace"`
	PasswordSecretId      *string `json:"passwordSecretId,omitempty"`
	PasswordSecretSpaceId *string `json:"passwordSecretSpaceId,omitempty"`
	Url                   string  `json:"url"`
	Username              *string `json:"username,omitempty"`
}

// ListArtifact A list of Artifacts
type ListArtifact struct {
	// Artifacts A list of Artifact
	Artifacts []ArtifactMetadata `json:"artifacts"`

	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// ListArtifactLabel A list of Harness Artifact Labels
type ListArtifactLabel struct {
	// ItemCount The total number of items
	ItemCount *int64   `json:"itemCount,omitempty"`
	Labels    []string `json:"labels"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// ListArtifactVersion A list of Artifact versions
type ListArtifactVersion struct {
	// ArtifactVersions A list of Artifact versions
	ArtifactVersions *[]ArtifactVersionMetadata `json:"artifactVersions,omitempty"`

	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// ListFileDetail A list of Harness Artifact Files
type ListFileDetail struct {
	// Files A list of Harness Artifact Files
	Files []FileDetail `json:"files"`

	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// ListMigrationImage A list of migration images
type ListMigrationImage struct {
	// Images A list of Artifact versions
	Images []MigrationImage `json:"images"`

	// ItemCount The total number of items
	ItemCount int64 `json:"itemCount"`

	// PageCount The total number of pages
	PageCount int64 `json:"pageCount"`

	// PageIndex The current page
	PageIndex int64 `json:"pageIndex"`

	// PageSize The number of items per page
	PageSize int `json:"pageSize"`
}

// ListOciArtifactTags A list of Artifact versions
type ListOciArtifactTags struct {
	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// OciArtifactTags A list of OCI Artifact tags
	OciArtifactTags []OciArtifactTag `json:"ociArtifactTags"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// ListRegistry A list of Harness Artifact Registries
type ListRegistry struct {
	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`

	// Registries A list of Harness Artifact Registries
	Registries []RegistryMetadata `json:"registries"`
}

// ListRegistryArtifact A list of Artifacts
type ListRegistryArtifact struct {
	// Artifacts A list of Artifact
	Artifacts []RegistryArtifactMetadata `json:"artifacts"`

	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// ListReplicationRule A list of replication rules
type ListReplicationRule struct {
	// ItemCount The total number of items
	ItemCount int64 `json:"itemCount"`

	// PageCount The total number of pages
	PageCount int64 `json:"pageCount"`

	// PageIndex The current page
	PageIndex int64 `json:"pageIndex"`

	// PageSize The number of items per page
	PageSize int `json:"pageSize"`

	// Rules A list of Replication Rules
	Rules []ReplicationRule `json:"rules"`
}

// ListWebhooks A list of Harness Registries webhooks
type ListWebhooks struct {
	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`

	// Webhooks A list of Registries webhooks
	Webhooks []Webhook `json:"webhooks"`
}

// ListWebhooksExecutions A list of Harness Registries webhooks executions
type ListWebhooksExecutions struct {
	// Executions A list of Registries webhooks executions
	Executions []WebhookExecution `json:"executions"`

	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// LocalReplicationRegistry defines model for LocalReplicationRegistry.
type LocalReplicationRegistry struct {
	RegistryIdentifier string `json:"registryIdentifier"`
}

// MavenArtifactDetailConfig Config for maven artifact details
type MavenArtifactDetailConfig struct {
	ArtifactId *string `json:"artifactId,omitempty"`
	GroupId    *string `json:"groupId,omitempty"`
}

// MigrationImage defines model for MigrationImage.
type MigrationImage struct {
	ImageId  *string `json:"imageId,omitempty"`
	ImageTag *string `json:"imageTag,omitempty"`
	Progress *int    `json:"progress,omitempty"`
	Status   *string `json:"status,omitempty"`
}

// NpmArtifactDetailConfig Config for npm artifact details
type NpmArtifactDetailConfig struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// NugetArtifactDetailConfig Config for nuget artifact details
type NugetArtifactDetailConfig struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// OciArtifactTag OCI Artifact Tag info
type OciArtifactTag struct {
	Digest string `json:"digest"`
	Name   string `json:"name"`
}

// PackageType refers to package
type PackageType string

// PythonArtifactDetailConfig Config for python artifact details
type PythonArtifactDetailConfig struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// Registry Harness Artifact Registry
type Registry struct {
	AllowedPattern *[]string        `json:"allowedPattern,omitempty"`
	BlockedPattern *[]string        `json:"blockedPattern,omitempty"`
	CleanupPolicy  *[]CleanupPolicy `json:"cleanupPolicy,omitempty"`

	// Config SubConfig specific for Virtual or Upstream Registry
	Config      *RegistryConfig `json:"config,omitempty"`
	CreatedAt   *string         `json:"createdAt,omitempty"`
	Description *string         `json:"description,omitempty"`
	Identifier  string          `json:"identifier"`
	IsPublic    bool            `json:"isPublic"`
	Labels      *[]string       `json:"labels,omitempty"`
	ModifiedAt  *string         `json:"modifiedAt,omitempty"`

	// PackageType refers to package
	PackageType PackageType `json:"packageType"`
	Url         string      `json:"url"`
}

// RegistryArtifactMetadata Artifact Metadata
type RegistryArtifactMetadata struct {
	// ArtifactType refers to artifact type
	ArtifactType   *ArtifactType `json:"artifactType,omitempty"`
	DownloadsCount *int64        `json:"downloadsCount,omitempty"`
	IsPublic       bool          `json:"isPublic"`
	IsQuarantined  *bool         `json:"isQuarantined,omitempty"`
	Labels         *[]string     `json:"labels,omitempty"`
	LastModified   *string       `json:"lastModified,omitempty"`
	LatestVersion  string        `json:"latestVersion"`
	Name           string        `json:"name"`

	// PackageType refers to package
	PackageType        PackageType `json:"packageType"`
	RegistryIdentifier string      `json:"registryIdentifier"`
	RegistryPath       string      `json:"registryPath"`
}

// RegistryConfig SubConfig specific for Virtual or Upstream Registry
type RegistryConfig struct {
	// Type refers to type of registry i.e virtual or upstream
	Type  RegistryType `json:"type"`
	union json.RawMessage
}

// RegistryMetadata Harness Artifact Registry Metadata
type RegistryMetadata struct {
	ArtifactsCount *int64    `json:"artifactsCount,omitempty"`
	Description    *string   `json:"description,omitempty"`
	DownloadsCount *int64    `json:"downloadsCount,omitempty"`
	Identifier     string    `json:"identifier"`
	IsPublic       bool      `json:"isPublic"`
	Labels         *[]string `json:"labels,omitempty"`
	LastModified   *string   `json:"lastModified,omitempty"`

	// PackageType refers to package
	PackageType  PackageType `json:"packageType"`
	Path         *string     `json:"path,omitempty"`
	RegistrySize *string     `json:"registrySize,omitempty"`

	// Type refers to type of registry i.e virtual or upstream
	Type RegistryType `json:"type"`
	Url  string       `json:"url"`
}

// RegistryRequest defines model for RegistryRequest.
type RegistryRequest struct {
	AllowedPattern *[]string        `json:"allowedPattern,omitempty"`
	BlockedPattern *[]string        `json:"blockedPattern,omitempty"`
	CleanupPolicy  *[]CleanupPolicy `json:"cleanupPolicy,omitempty"`

	// Config SubConfig specific for Virtual or Upstream Registry
	Config      *RegistryConfig `json:"config,omitempty"`
	Description *string         `json:"description,omitempty"`
	Identifier  string          `json:"identifier"`
	IsPublic    bool            `json:"isPublic"`
	Labels      *[]string       `json:"labels,omitempty"`

	// PackageType refers to package
	PackageType PackageType `json:"packageType"`
	ParentRef   *string     `json:"parentRef,omitempty"`
}

// RegistryType refers to type of registry i.e virtual or upstream
type RegistryType string

// ReplicationRegistry defines model for ReplicationRegistry.
type ReplicationRegistry struct {
	union json.RawMessage
}

// ReplicationRule defines model for ReplicationRule.
type ReplicationRule struct {
	AllowedPatterns []string                       `json:"allowedPatterns"`
	BlockedPatterns []string                       `json:"blockedPatterns"`
	CreatedAt       string                         `json:"createdAt"`
	Destination     ReplicationRegistry            `json:"destination"`
	DestinationType ReplicationRuleDestinationType `json:"destinationType"`
	Identifier      string                         `json:"identifier"`
	ModifiedAt      string                         `json:"modifiedAt"`
	ParentRef       string                         `json:"parentRef"`
	Source          ReplicationRegistry            `json:"source"`
	SourceType      ReplicationRuleSourceType      `json:"sourceType"`
}

// ReplicationRuleDestinationType defines model for ReplicationRule.DestinationType.
type ReplicationRuleDestinationType string

// ReplicationRuleSourceType defines model for ReplicationRule.SourceType.
type ReplicationRuleSourceType string

// ReplicationRuleRequest defines model for ReplicationRuleRequest.
type ReplicationRuleRequest struct {
	AllowedPatterns []string                              `json:"allowedPatterns"`
	BlockedPatterns []string                              `json:"blockedPatterns"`
	Destination     ReplicationRegistry                   `json:"destination"`
	DestinationType ReplicationRuleRequestDestinationType `json:"destinationType"`
	Source          ReplicationRegistry                   `json:"source"`
	SourceType      ReplicationRuleRequestSourceType      `json:"sourceType"`
}

// ReplicationRuleRequestDestinationType defines model for ReplicationRuleRequest.DestinationType.
type ReplicationRuleRequestDestinationType string

// ReplicationRuleRequestSourceType defines model for ReplicationRuleRequest.SourceType.
type ReplicationRuleRequestSourceType string

// RpmArtifactDetailConfig Config for RPM artifact details
type RpmArtifactDetailConfig struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// SectionType refers to client setup section type
type SectionType string

// Status Indicates if the request was successful or not
type Status string

// TabSetupStep Tab Setup step
type TabSetupStep struct {
	Header   *string               `json:"header,omitempty"`
	Sections *[]ClientSetupSection `json:"sections,omitempty"`
}

// TabSetupStepConfig Tab Setup step config
type TabSetupStepConfig struct {
	Tabs *[]TabSetupStep `json:"tabs,omitempty"`
}

// Trigger refers to trigger
type Trigger string

// UpstreamConfig Configuration for Harness Artifact UpstreamProxies
type UpstreamConfig struct {
	Auth *UpstreamConfig_Auth `json:"auth,omitempty"`

	// AuthType Authentication type
	AuthType AuthType              `json:"authType"`
	Source   *UpstreamConfigSource `json:"source,omitempty"`
	Url      *string               `json:"url,omitempty"`
}

// UpstreamConfig_Auth defines model for UpstreamConfig.Auth.
type UpstreamConfig_Auth struct {
	union json.RawMessage
}

// UpstreamConfigSource defines model for UpstreamConfig.Source.
type UpstreamConfigSource string

// UserPassword defines model for UserPassword.
type UserPassword struct {
	SecretIdentifier *string `json:"secretIdentifier,omitempty"`
	SecretSpaceId    *int64  `json:"secretSpaceId,omitempty"`
	SecretSpacePath  *string `json:"secretSpacePath,omitempty"`
	UserName         string  `json:"userName"`
}

// VirtualConfig Configuration for Harness Virtual Artifact Registries
type VirtualConfig struct {
	UpstreamProxies *[]string `json:"upstreamProxies,omitempty"`
}

// Webhook Harness Regstries Webhook
type Webhook struct {
	CreatedAt    *string        `json:"createdAt,omitempty"`
	CreatedBy    *int64         `json:"createdBy,omitempty"`
	Description  *string        `json:"description,omitempty"`
	Enabled      bool           `json:"enabled"`
	ExtraHeaders *[]ExtraHeader `json:"extraHeaders,omitempty"`
	Identifier   string         `json:"identifier"`
	Insecure     bool           `json:"insecure"`
	Internal     *bool          `json:"internal,omitempty"`

	// LatestExecutionResult refers to webhook execution
	LatestExecutionResult *WebhookExecResult `json:"latestExecutionResult,omitempty"`
	ModifiedAt            *string            `json:"modifiedAt,omitempty"`
	Name                  string             `json:"name"`
	SecretIdentifier      *string            `json:"secretIdentifier,omitempty"`
	SecretSpaceId         *int64             `json:"secretSpaceId,omitempty"`
	SecretSpacePath       *string            `json:"secretSpacePath,omitempty"`
	Triggers              *[]Trigger         `json:"triggers,omitempty"`
	Url                   string             `json:"url"`
	Version               *int64             `json:"version,omitempty"`
}

// WebhookExecRequest Harness Regstries HTTP Webhook Request
type WebhookExecRequest struct {
	Body    *string `json:"body,omitempty"`
	Headers *string `json:"headers,omitempty"`
	Url     *string `json:"url,omitempty"`
}

// WebhookExecResponse Harness Regstries HTTP Webhook Response
type WebhookExecResponse struct {
	Body       *string `json:"body,omitempty"`
	Headers    *string `json:"headers,omitempty"`
	Status     *string `json:"status,omitempty"`
	StatusCode *int    `json:"statusCode,omitempty"`
}

// WebhookExecResult refers to webhook execution
type WebhookExecResult string

// WebhookExecution Harness Regstries Webhook Execution
type WebhookExecution struct {
	Created  *int64  `json:"created,omitempty"`
	Duration *int64  `json:"duration,omitempty"`
	Error    *string `json:"error,omitempty"`
	Id       *int64  `json:"id,omitempty"`

	// Request Harness Regstries HTTP Webhook Request
	Request *WebhookExecRequest `json:"request,omitempty"`

	// Response Harness Regstries HTTP Webhook Response
	Response *WebhookExecResponse `json:"response,omitempty"`

	// Result refers to webhook execution
	Result        *WebhookExecResult `json:"result,omitempty"`
	RetriggerOf   *int64             `json:"retriggerOf,omitempty"`
	Retriggerable *bool              `json:"retriggerable,omitempty"`

	// TriggerType refers to trigger
	TriggerType *Trigger `json:"triggerType,omitempty"`
	WebhookId   *int64   `json:"webhookId,omitempty"`
}

// WebhookRequest defines model for WebhookRequest.
type WebhookRequest struct {
	Description      *string        `json:"description,omitempty"`
	Enabled          bool           `json:"enabled"`
	ExtraHeaders     *[]ExtraHeader `json:"extraHeaders,omitempty"`
	Identifier       string         `json:"identifier"`
	Insecure         bool           `json:"insecure"`
	Name             string         `json:"name"`
	SecretIdentifier *string        `json:"secretIdentifier,omitempty"`
	SecretSpaceId    *int64         `json:"secretSpaceId,omitempty"`
	SecretSpacePath  *string        `json:"secretSpacePath,omitempty"`
	Triggers         *[]Trigger     `json:"triggers,omitempty"`
	Url              string         `json:"url"`
}

// QuarantinePath quarantine path
type QuarantinePath struct {
	ArtifactId int64   `json:"artifactId"`
	FilePath   *string `json:"filePath,omitempty"`
	Id         string  `json:"id"`
	Reason     string  `json:"reason"`
	RegistryId int64   `json:"registryId"`
	VersionId  *int64  `json:"versionId,omitempty"`
}

// QuarantineRequest defines model for quarantineRequest.
type QuarantineRequest struct {
	Artifact string  `json:"artifact"`
	FilePath *string `json:"filePath,omitempty"`
	Reason   string  `json:"reason"`
	Version  *string `json:"version,omitempty"`
}

// LabelsParam defines model for LabelsParam.
type LabelsParam []string

// RegistryIdentifierParam defines model for RegistryIdentifierParam.
type RegistryIdentifierParam []string

// RegistryTypeParam defines model for RegistryTypeParam.
type RegistryTypeParam string

// ArtifactParam defines model for artifactParam.
type ArtifactParam string

// ArtifactPathParam defines model for artifactPathParam.
type ArtifactPathParam string

// ArtifactTypeParam defines model for artifactTypeParam.
type ArtifactTypeParam string

// ChildVersionParam defines model for childVersionParam.
type ChildVersionParam string

// DigestOptParam defines model for digestOptParam.
type DigestOptParam string

// DigestParam defines model for digestParam.
type DigestParam string

// FileNamePathParam defines model for fileNamePathParam.
type FileNamePathParam string

// FilePathParam defines model for filePathParam.
type FilePathParam string

// FromDateParam defines model for fromDateParam.
type FromDateParam string

// LatestVersion defines model for latestVersion.
type LatestVersion bool

// PackageTypeParam defines model for packageTypeParam.
type PackageTypeParam []string

// PageNumber defines model for pageNumber.
type PageNumber int64

// PageSize defines model for pageSize.
type PageSize int64

// RecursiveParam defines model for recursiveParam.
type RecursiveParam bool

// RegistryRefPathParam defines model for registryRefPathParam.
type RegistryRefPathParam string

// ScopeParam defines model for scopeParam.
type ScopeParam string

// SearchTerm defines model for searchTerm.
type SearchTerm string

// SortField defines model for sortField.
type SortField string

// SortOrder defines model for sortOrder.
type SortOrder string

// SpaceRefPathParam defines model for spaceRefPathParam.
type SpaceRefPathParam string

// SpaceRefQueryParam defines model for spaceRefQueryParam.
type SpaceRefQueryParam string

// ToDateParam defines model for toDateParam.
type ToDateParam string

// VersionParam defines model for versionParam.
type VersionParam string

// VersionPathParam defines model for versionPathParam.
type VersionPathParam string

// VersionTypeParam defines model for versionTypeParam.
type VersionTypeParam string

// WebhookExecutionIdPathParam defines model for webhookExecutionIdPathParam.
type WebhookExecutionIdPathParam string

// WebhookIdentifierPathParam defines model for webhookIdentifierPathParam.
type WebhookIdentifierPathParam string

// ArtifactDetailResponse defines model for ArtifactDetailResponse.
type ArtifactDetailResponse struct {
	// Data Artifact Detail
	Data ArtifactDetail `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ArtifactFileResponse defines model for ArtifactFileResponse.
type ArtifactFileResponse struct {
	// DownloadUrl download url of artifact
	DownloadUrl string `json:"downloadUrl"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ArtifactLabelResponse defines model for ArtifactLabelResponse.
type ArtifactLabelResponse struct {
	// Data Harness Artifact Summary
	Data ArtifactSummary `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ArtifactStatsResponse defines model for ArtifactStatsResponse.
type ArtifactStatsResponse struct {
	// Data Harness Artifact Stats
	Data ArtifactStats `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ArtifactSummaryResponse defines model for ArtifactSummaryResponse.
type ArtifactSummaryResponse struct {
	// Data Harness Artifact Summary
	Data ArtifactSummary `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ArtifactVersionSummaryResponse defines model for ArtifactVersionSummaryResponse.
type ArtifactVersionSummaryResponse struct {
	// Data Docker Artifact Version Summary
	Data ArtifactVersionSummary `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// BadRequest defines model for BadRequest.
type BadRequest Error

// ClientSetupDetailsResponse defines model for ClientSetupDetailsResponse.
type ClientSetupDetailsResponse struct {
	// Data Client Setup Details
	Data ClientSetupDetails `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// DockerArtifactDetailResponse defines model for DockerArtifactDetailResponse.
type DockerArtifactDetailResponse struct {
	// Data Docker Artifact Detail
	Data DockerArtifactDetail `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// DockerArtifactManifestResponse defines model for DockerArtifactManifestResponse.
type DockerArtifactManifestResponse struct {
	// Data Docker Artifact Manifest
	Data DockerArtifactManifest `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// DockerLayersResponse defines model for DockerLayersResponse.
type DockerLayersResponse struct {
	// Data Harness Layers Summary
	Data DockerLayersSummary `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// DockerManifestsResponse defines model for DockerManifestsResponse.
type DockerManifestsResponse struct {
	// Data Harness Manifests
	Data DockerManifests `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// FileDetailResponse defines model for FileDetailResponse.
type FileDetailResponse struct {
	// Data A list of Harness Artifact Files
	Data ListFileDetail `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// HelmArtifactDetailResponse defines model for HelmArtifactDetailResponse.
type HelmArtifactDetailResponse struct {
	// Data Helm Artifact Detail
	Data HelmArtifactDetail `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// HelmArtifactManifestResponse defines model for HelmArtifactManifestResponse.
type HelmArtifactManifestResponse struct {
	// Data Helm Artifact Manifest
	Data HelmArtifactManifest `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError Error

// ListArtifactLabelResponse defines model for ListArtifactLabelResponse.
type ListArtifactLabelResponse struct {
	// Data A list of Harness Artifact Labels
	Data ListArtifactLabel `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListArtifactResponse defines model for ListArtifactResponse.
type ListArtifactResponse struct {
	// Data A list of Artifacts
	Data ListArtifact `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListArtifactVersionResponse defines model for ListArtifactVersionResponse.
type ListArtifactVersionResponse struct {
	// Data A list of Artifact versions
	Data ListArtifactVersion `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListMigrationImageResponse defines model for ListMigrationImageResponse.
type ListMigrationImageResponse struct {
	// Data A list of migration images
	Data ListMigrationImage `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListOciArtifactTagsResponse defines model for ListOciArtifactTagsResponse.
type ListOciArtifactTagsResponse struct {
	// Data A list of Artifact versions
	Data ListOciArtifactTags `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListRegistryArtifactResponse defines model for ListRegistryArtifactResponse.
type ListRegistryArtifactResponse struct {
	// Data A list of Artifacts
	Data ListRegistryArtifact `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListRegistryResponse defines model for ListRegistryResponse.
type ListRegistryResponse struct {
	// Data A list of Harness Artifact Registries
	Data ListRegistry `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListReplicationRuleResponse defines model for ListReplicationRuleResponse.
type ListReplicationRuleResponse struct {
	// Data A list of replication rules
	Data ListReplicationRule `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListWebhooksExecutionResponse defines model for ListWebhooksExecutionResponse.
type ListWebhooksExecutionResponse struct {
	// Data A list of Harness Registries webhooks executions
	Data ListWebhooksExecutions `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListWebhooksResponse defines model for ListWebhooksResponse.
type ListWebhooksResponse struct {
	// Data A list of Harness Registries webhooks
	Data ListWebhooks `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// NotFound defines model for NotFound.
type NotFound Error

// RegistryResponse defines model for RegistryResponse.
type RegistryResponse struct {
	// Data Harness Artifact Registry
	Data Registry `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ReplicationRuleResponse defines model for ReplicationRuleResponse.
type ReplicationRuleResponse struct {
	Data ReplicationRule `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// Success defines model for Success.
type Success struct {
	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// Unauthenticated defines model for Unauthenticated.
type Unauthenticated Error

// Unauthorized defines model for Unauthorized.
type Unauthorized Error

// WebhookExecutionResponse defines model for WebhookExecutionResponse.
type WebhookExecutionResponse struct {
	// Data Harness Regstries Webhook Execution
	Data WebhookExecution `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// WebhookResponse defines model for WebhookResponse.
type WebhookResponse struct {
	// Data Harness Regstries Webhook
	Data Webhook `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// QuarantinePathResponse defines model for quarantinePathResponse.
type QuarantinePathResponse struct {
	// Data quarantine path
	Data QuarantinePath `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// CreateRegistryParams defines parameters for CreateRegistry.
type CreateRegistryParams struct {
	// SpaceRef Unique path identifier for the final space in the branch. The value can be provided either as a fully URL-encoded path (e.g., `organization%2Fproject`) or as a plain path ending with a trailing plus sign (`+`) as separator (e.g., `organization/project/+`).
	SpaceRef *SpaceRefQueryParam `form:"space_ref,omitempty" json:"space_ref,omitempty"`
}

// ListArtifactLabelsParams defines parameters for ListArtifactLabels.
type ListArtifactLabelsParams struct {
	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`
}

// GetArtifactStatsForRegistryParams defines parameters for GetArtifactStatsForRegistry.
type GetArtifactStatsForRegistryParams struct {
	// From Date. Format - MM/DD/YYYY
	From *FromDateParam `form:"from,omitempty" json:"from,omitempty"`

	// To Date. Format - MM/DD/YYYY
	To *ToDateParam `form:"to,omitempty" json:"to,omitempty"`
}

// DeleteArtifactParams defines parameters for DeleteArtifact.
type DeleteArtifactParams struct {
	// ArtifactType artifact type.
	ArtifactType *DeleteArtifactParamsArtifactType `form:"artifact_type,omitempty" json:"artifact_type,omitempty"`
}

// DeleteArtifactParamsArtifactType defines parameters for DeleteArtifact.
type DeleteArtifactParamsArtifactType string

// UpdateArtifactLabelsParams defines parameters for UpdateArtifactLabels.
type UpdateArtifactLabelsParams struct {
	// ArtifactType artifact type.
	ArtifactType *UpdateArtifactLabelsParamsArtifactType `form:"artifact_type,omitempty" json:"artifact_type,omitempty"`
}

// UpdateArtifactLabelsParamsArtifactType defines parameters for UpdateArtifactLabels.
type UpdateArtifactLabelsParamsArtifactType string

// GetArtifactStatsParams defines parameters for GetArtifactStats.
type GetArtifactStatsParams struct {
	// From Date. Format - MM/DD/YYYY
	From *FromDateParam `form:"from,omitempty" json:"from,omitempty"`

	// To Date. Format - MM/DD/YYYY
	To *ToDateParam `form:"to,omitempty" json:"to,omitempty"`
}

// GetArtifactSummaryParams defines parameters for GetArtifactSummary.
type GetArtifactSummaryParams struct {
	// ArtifactType artifact type.
	ArtifactType *GetArtifactSummaryParamsArtifactType `form:"artifact_type,omitempty" json:"artifact_type,omitempty"`
}

// GetArtifactSummaryParamsArtifactType defines parameters for GetArtifactSummary.
type GetArtifactSummaryParamsArtifactType string

// GetOciArtifactTagsParams defines parameters for GetOciArtifactTags.
type GetOciArtifactTagsParams struct {
	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`
}

// DeleteArtifactVersionParams defines parameters for DeleteArtifactVersion.
type DeleteArtifactVersionParams struct {
	// ArtifactType artifact type.
	ArtifactType *DeleteArtifactVersionParamsArtifactType `form:"artifact_type,omitempty" json:"artifact_type,omitempty"`
}

// DeleteArtifactVersionParamsArtifactType defines parameters for DeleteArtifactVersion.
type DeleteArtifactVersionParamsArtifactType string

// GetArtifactDetailsParams defines parameters for GetArtifactDetails.
type GetArtifactDetailsParams struct {
	// ArtifactType artifact type.
	ArtifactType *GetArtifactDetailsParamsArtifactType `form:"artifact_type,omitempty" json:"artifact_type,omitempty"`

	// ChildVersion Child version incase of Docker artifacts.
	ChildVersion *ChildVersionParam `form:"childVersion,omitempty" json:"childVersion,omitempty"`
}

// GetArtifactDetailsParamsArtifactType defines parameters for GetArtifactDetails.
type GetArtifactDetailsParamsArtifactType string

// GetDockerArtifactDetailsParams defines parameters for GetDockerArtifactDetails.
type GetDockerArtifactDetailsParams struct {
	// Digest Digest.
	Digest DigestParam `form:"digest" json:"digest"`

	// VersionType Version Type.
	VersionType *GetDockerArtifactDetailsParamsVersionType `form:"version_type,omitempty" json:"version_type,omitempty"`
}

// GetDockerArtifactDetailsParamsVersionType defines parameters for GetDockerArtifactDetails.
type GetDockerArtifactDetailsParamsVersionType string

// GetDockerArtifactLayersParams defines parameters for GetDockerArtifactLayers.
type GetDockerArtifactLayersParams struct {
	// Digest Digest.
	Digest DigestParam `form:"digest" json:"digest"`
}

// GetDockerArtifactManifestParams defines parameters for GetDockerArtifactManifest.
type GetDockerArtifactManifestParams struct {
	// Digest Digest.
	Digest DigestParam `form:"digest" json:"digest"`
}

// GetDockerArtifactManifestsParams defines parameters for GetDockerArtifactManifests.
type GetDockerArtifactManifestsParams struct {
	// VersionType Version Type.
	VersionType *GetDockerArtifactManifestsParamsVersionType `form:"version_type,omitempty" json:"version_type,omitempty"`
}

// GetDockerArtifactManifestsParamsVersionType defines parameters for GetDockerArtifactManifests.
type GetDockerArtifactManifestsParamsVersionType string

// GetArtifactFileParams defines parameters for GetArtifactFile.
type GetArtifactFileParams struct {
	// ArtifactType artifact type.
	ArtifactType *GetArtifactFileParamsArtifactType `form:"artifact_type,omitempty" json:"artifact_type,omitempty"`
}

// GetArtifactFileParamsArtifactType defines parameters for GetArtifactFile.
type GetArtifactFileParamsArtifactType string

// GetArtifactFilesParams defines parameters for GetArtifactFiles.
type GetArtifactFilesParams struct {
	// ArtifactType artifact type.
	ArtifactType *GetArtifactFilesParamsArtifactType `form:"artifact_type,omitempty" json:"artifact_type,omitempty"`

	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`
}

// GetArtifactFilesParamsArtifactType defines parameters for GetArtifactFiles.
type GetArtifactFilesParamsArtifactType string

// GetHelmArtifactDetailsParams defines parameters for GetHelmArtifactDetails.
type GetHelmArtifactDetailsParams struct {
	// VersionType Version Type.
	VersionType *GetHelmArtifactDetailsParamsVersionType `form:"version_type,omitempty" json:"version_type,omitempty"`
}

// GetHelmArtifactDetailsParamsVersionType defines parameters for GetHelmArtifactDetails.
type GetHelmArtifactDetailsParamsVersionType string

// GetArtifactVersionSummaryParams defines parameters for GetArtifactVersionSummary.
type GetArtifactVersionSummaryParams struct {
	// ArtifactType artifact type.
	ArtifactType *GetArtifactVersionSummaryParamsArtifactType `form:"artifact_type,omitempty" json:"artifact_type,omitempty"`

	// Digest Digest.
	Digest *DigestOptParam `form:"digest,omitempty" json:"digest,omitempty"`
}

// GetArtifactVersionSummaryParamsArtifactType defines parameters for GetArtifactVersionSummary.
type GetArtifactVersionSummaryParamsArtifactType string

// GetAllArtifactVersionsParams defines parameters for GetAllArtifactVersions.
type GetAllArtifactVersionsParams struct {
	// ArtifactType artifact type.
	ArtifactType *GetAllArtifactVersionsParamsArtifactType `form:"artifact_type,omitempty" json:"artifact_type,omitempty"`

	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`
}

// GetAllArtifactVersionsParamsArtifactType defines parameters for GetAllArtifactVersions.
type GetAllArtifactVersionsParamsArtifactType string

// GetAllArtifactsByRegistryParams defines parameters for GetAllArtifactsByRegistry.
type GetAllArtifactsByRegistryParams struct {
	// Label Label.
	Label *LabelsParam `form:"label,omitempty" json:"label,omitempty"`

	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`

	// ArtifactType artifact type.
	ArtifactType *GetAllArtifactsByRegistryParamsArtifactType `form:"artifact_type,omitempty" json:"artifact_type,omitempty"`
}

// GetAllArtifactsByRegistryParamsArtifactType defines parameters for GetAllArtifactsByRegistry.
type GetAllArtifactsByRegistryParamsArtifactType string

// GetClientSetupDetailsParams defines parameters for GetClientSetupDetails.
type GetClientSetupDetailsParams struct {
	// Artifact Artifat
	Artifact *ArtifactParam `form:"artifact,omitempty" json:"artifact,omitempty"`

	// Version Version
	Version *VersionParam `form:"version,omitempty" json:"version,omitempty"`
}

// DeleteQuarantineFilePathParams defines parameters for DeleteQuarantineFilePath.
type DeleteQuarantineFilePathParams struct {
	// Artifact Artifat
	Artifact *ArtifactParam `form:"artifact,omitempty" json:"artifact,omitempty"`

	// Version Version
	Version *VersionParam `form:"version,omitempty" json:"version,omitempty"`

	// FilePath filePath
	FilePath *FilePathParam `form:"file_path,omitempty" json:"file_path,omitempty"`
}

// ListWebhooksParams defines parameters for ListWebhooks.
type ListWebhooksParams struct {
	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`
}

// ListWebhookExecutionsParams defines parameters for ListWebhookExecutions.
type ListWebhookExecutionsParams struct {
	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`
}

// ListReplicationRulesParams defines parameters for ListReplicationRules.
type ListReplicationRulesParams struct {
	// SpaceRef Unique path identifier for the final space in the branch. The value can be provided either as a fully URL-encoded path (e.g., `organization%2Fproject`) or as a plain path ending with a trailing plus sign (`+`) as separator (e.g., `organization/project/+`).
	SpaceRef *SpaceRefQueryParam `form:"space_ref,omitempty" json:"space_ref,omitempty"`
}

// CreateReplicationRuleParams defines parameters for CreateReplicationRule.
type CreateReplicationRuleParams struct {
	// SpaceRef Unique path identifier for the final space in the branch. The value can be provided either as a fully URL-encoded path (e.g., `organization%2Fproject`) or as a plain path ending with a trailing plus sign (`+`) as separator (e.g., `organization/project/+`).
	SpaceRef *SpaceRefQueryParam `form:"space_ref,omitempty" json:"space_ref,omitempty"`
}

// ListMigrationImagesParams defines parameters for ListMigrationImages.
type ListMigrationImagesParams struct {
	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`
}

// GetArtifactStatsForSpaceParams defines parameters for GetArtifactStatsForSpace.
type GetArtifactStatsForSpaceParams struct {
	// From Date. Format - MM/DD/YYYY
	From *FromDateParam `form:"from,omitempty" json:"from,omitempty"`

	// To Date. Format - MM/DD/YYYY
	To *ToDateParam `form:"to,omitempty" json:"to,omitempty"`
}

// GetAllArtifactsParams defines parameters for GetAllArtifacts.
type GetAllArtifactsParams struct {
	// RegIdentifier Registry Identifier
	RegIdentifier *RegistryIdentifierParam `form:"reg_identifier,omitempty" json:"reg_identifier,omitempty"`

	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`

	// LatestVersion Latest Version Filter.
	LatestVersion *LatestVersion `form:"latest_version,omitempty" json:"latest_version,omitempty"`

	// PackageType Registry Package Type
	PackageType *PackageTypeParam `form:"package_type,omitempty" json:"package_type,omitempty"`
}

// GetAllRegistriesParams defines parameters for GetAllRegistries.
type GetAllRegistriesParams struct {
	// PackageType Registry Package Type
	PackageType *PackageTypeParam `form:"package_type,omitempty" json:"package_type,omitempty"`

	// Type Registry Type
	Type *GetAllRegistriesParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`

	// Recursive Whether to list registries recursively.
	//
	// **Deprecated.** Use the new `scope` parameter.
	//
	// * `recursive=true`  → `scope=ancestors`
	// * `recursive=false` → `scope=none`
	Recursive *RecursiveParam `form:"recursive,omitempty" json:"recursive,omitempty"`

	// Scope **Scope of registries to list**
	// * **none** – current space only (default)   * **ancestors** – current space **plus** all parent spaces   * **descendants** – current space **plus** all child spaces
	// If omitted, `none` is assumed.
	Scope *GetAllRegistriesParamsScope `form:"scope,omitempty" json:"scope,omitempty"`
}

// GetAllRegistriesParamsType defines parameters for GetAllRegistries.
type GetAllRegistriesParamsType string

// GetAllRegistriesParamsScope defines parameters for GetAllRegistries.
type GetAllRegistriesParamsScope string

// CreateRegistryJSONRequestBody defines body for CreateRegistry for application/json ContentType.
type CreateRegistryJSONRequestBody RegistryRequest

// ModifyRegistryJSONRequestBody defines body for ModifyRegistry for application/json ContentType.
type ModifyRegistryJSONRequestBody RegistryRequest

// UpdateArtifactLabelsJSONRequestBody defines body for UpdateArtifactLabels for application/json ContentType.
type UpdateArtifactLabelsJSONRequestBody ArtifactLabelRequest

// QuarantineFilePathJSONRequestBody defines body for QuarantineFilePath for application/json ContentType.
type QuarantineFilePathJSONRequestBody QuarantineRequest

// CreateWebhookJSONRequestBody defines body for CreateWebhook for application/json ContentType.
type CreateWebhookJSONRequestBody WebhookRequest

// UpdateWebhookJSONRequestBody defines body for UpdateWebhook for application/json ContentType.
type UpdateWebhookJSONRequestBody WebhookRequest

// CreateReplicationRuleJSONRequestBody defines body for CreateReplicationRule for application/json ContentType.
type CreateReplicationRuleJSONRequestBody ReplicationRuleRequest

// UpdateReplicationRuleJSONRequestBody defines body for UpdateReplicationRule for application/json ContentType.
type UpdateReplicationRuleJSONRequestBody ReplicationRuleRequest

// AsDockerArtifactDetailConfig returns the union data inside the ArtifactDetail as a DockerArtifactDetailConfig
func (t ArtifactDetail) AsDockerArtifactDetailConfig() (DockerArtifactDetailConfig, error) {
	var body DockerArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided DockerArtifactDetailConfig
func (t *ArtifactDetail) FromDockerArtifactDetailConfig(v DockerArtifactDetailConfig) error {
	t.PackageType = "DOCKER"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided DockerArtifactDetailConfig
func (t *ArtifactDetail) MergeDockerArtifactDetailConfig(v DockerArtifactDetailConfig) error {
	t.PackageType = "DOCKER"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHelmArtifactDetailConfig returns the union data inside the ArtifactDetail as a HelmArtifactDetailConfig
func (t ArtifactDetail) AsHelmArtifactDetailConfig() (HelmArtifactDetailConfig, error) {
	var body HelmArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHelmArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided HelmArtifactDetailConfig
func (t *ArtifactDetail) FromHelmArtifactDetailConfig(v HelmArtifactDetailConfig) error {
	t.PackageType = "HELM"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHelmArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided HelmArtifactDetailConfig
func (t *ArtifactDetail) MergeHelmArtifactDetailConfig(v HelmArtifactDetailConfig) error {
	t.PackageType = "HELM"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGenericArtifactDetailConfig returns the union data inside the ArtifactDetail as a GenericArtifactDetailConfig
func (t ArtifactDetail) AsGenericArtifactDetailConfig() (GenericArtifactDetailConfig, error) {
	var body GenericArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenericArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided GenericArtifactDetailConfig
func (t *ArtifactDetail) FromGenericArtifactDetailConfig(v GenericArtifactDetailConfig) error {
	t.PackageType = "GENERIC"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenericArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided GenericArtifactDetailConfig
func (t *ArtifactDetail) MergeGenericArtifactDetailConfig(v GenericArtifactDetailConfig) error {
	t.PackageType = "GENERIC"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMavenArtifactDetailConfig returns the union data inside the ArtifactDetail as a MavenArtifactDetailConfig
func (t ArtifactDetail) AsMavenArtifactDetailConfig() (MavenArtifactDetailConfig, error) {
	var body MavenArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMavenArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided MavenArtifactDetailConfig
func (t *ArtifactDetail) FromMavenArtifactDetailConfig(v MavenArtifactDetailConfig) error {
	t.PackageType = "MAVEN"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMavenArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided MavenArtifactDetailConfig
func (t *ArtifactDetail) MergeMavenArtifactDetailConfig(v MavenArtifactDetailConfig) error {
	t.PackageType = "MAVEN"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPythonArtifactDetailConfig returns the union data inside the ArtifactDetail as a PythonArtifactDetailConfig
func (t ArtifactDetail) AsPythonArtifactDetailConfig() (PythonArtifactDetailConfig, error) {
	var body PythonArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPythonArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided PythonArtifactDetailConfig
func (t *ArtifactDetail) FromPythonArtifactDetailConfig(v PythonArtifactDetailConfig) error {
	t.PackageType = "PYTHON"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePythonArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided PythonArtifactDetailConfig
func (t *ArtifactDetail) MergePythonArtifactDetailConfig(v PythonArtifactDetailConfig) error {
	t.PackageType = "PYTHON"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNpmArtifactDetailConfig returns the union data inside the ArtifactDetail as a NpmArtifactDetailConfig
func (t ArtifactDetail) AsNpmArtifactDetailConfig() (NpmArtifactDetailConfig, error) {
	var body NpmArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNpmArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided NpmArtifactDetailConfig
func (t *ArtifactDetail) FromNpmArtifactDetailConfig(v NpmArtifactDetailConfig) error {
	t.PackageType = "NPM"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNpmArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided NpmArtifactDetailConfig
func (t *ArtifactDetail) MergeNpmArtifactDetailConfig(v NpmArtifactDetailConfig) error {
	t.PackageType = "NPM"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRpmArtifactDetailConfig returns the union data inside the ArtifactDetail as a RpmArtifactDetailConfig
func (t ArtifactDetail) AsRpmArtifactDetailConfig() (RpmArtifactDetailConfig, error) {
	var body RpmArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRpmArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided RpmArtifactDetailConfig
func (t *ArtifactDetail) FromRpmArtifactDetailConfig(v RpmArtifactDetailConfig) error {
	t.PackageType = "RPM"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRpmArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided RpmArtifactDetailConfig
func (t *ArtifactDetail) MergeRpmArtifactDetailConfig(v RpmArtifactDetailConfig) error {
	t.PackageType = "RPM"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNugetArtifactDetailConfig returns the union data inside the ArtifactDetail as a NugetArtifactDetailConfig
func (t ArtifactDetail) AsNugetArtifactDetailConfig() (NugetArtifactDetailConfig, error) {
	var body NugetArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNugetArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided NugetArtifactDetailConfig
func (t *ArtifactDetail) FromNugetArtifactDetailConfig(v NugetArtifactDetailConfig) error {
	t.PackageType = "NUGET"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNugetArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided NugetArtifactDetailConfig
func (t *ArtifactDetail) MergeNugetArtifactDetailConfig(v NugetArtifactDetailConfig) error {
	t.PackageType = "NUGET"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCargoArtifactDetailConfig returns the union data inside the ArtifactDetail as a CargoArtifactDetailConfig
func (t ArtifactDetail) AsCargoArtifactDetailConfig() (CargoArtifactDetailConfig, error) {
	var body CargoArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCargoArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided CargoArtifactDetailConfig
func (t *ArtifactDetail) FromCargoArtifactDetailConfig(v CargoArtifactDetailConfig) error {
	t.PackageType = "CARGO"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCargoArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided CargoArtifactDetailConfig
func (t *ArtifactDetail) MergeCargoArtifactDetailConfig(v CargoArtifactDetailConfig) error {
	t.PackageType = "CARGO"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoArtifactDetailConfig returns the union data inside the ArtifactDetail as a GoArtifactDetailConfig
func (t ArtifactDetail) AsGoArtifactDetailConfig() (GoArtifactDetailConfig, error) {
	var body GoArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided GoArtifactDetailConfig
func (t *ArtifactDetail) FromGoArtifactDetailConfig(v GoArtifactDetailConfig) error {
	t.PackageType = "GO"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided GoArtifactDetailConfig
func (t *ArtifactDetail) MergeGoArtifactDetailConfig(v GoArtifactDetailConfig) error {
	t.PackageType = "GO"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHuggingFaceArtifactDetailConfig returns the union data inside the ArtifactDetail as a HuggingFaceArtifactDetailConfig
func (t ArtifactDetail) AsHuggingFaceArtifactDetailConfig() (HuggingFaceArtifactDetailConfig, error) {
	var body HuggingFaceArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHuggingFaceArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided HuggingFaceArtifactDetailConfig
func (t *ArtifactDetail) FromHuggingFaceArtifactDetailConfig(v HuggingFaceArtifactDetailConfig) error {
	t.PackageType = "HUGGINGFACE"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHuggingFaceArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided HuggingFaceArtifactDetailConfig
func (t *ArtifactDetail) MergeHuggingFaceArtifactDetailConfig(v HuggingFaceArtifactDetailConfig) error {
	t.PackageType = "HUGGINGFACE"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArtifactDetail) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"packageType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ArtifactDetail) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CARGO":
		return t.AsCargoArtifactDetailConfig()
	case "DOCKER":
		return t.AsDockerArtifactDetailConfig()
	case "GENERIC":
		return t.AsGenericArtifactDetailConfig()
	case "GO":
		return t.AsGoArtifactDetailConfig()
	case "HELM":
		return t.AsHelmArtifactDetailConfig()
	case "HUGGINGFACE":
		return t.AsHuggingFaceArtifactDetailConfig()
	case "MAVEN":
		return t.AsMavenArtifactDetailConfig()
	case "NPM":
		return t.AsNpmArtifactDetailConfig()
	case "NUGET":
		return t.AsNugetArtifactDetailConfig()
	case "PYTHON":
		return t.AsPythonArtifactDetailConfig()
	case "RPM":
		return t.AsRpmArtifactDetailConfig()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ArtifactDetail) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.ArtifactType != nil {
		object["artifactType"], err = json.Marshal(t.ArtifactType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'artifactType': %w", err)
		}
	}

	if t.CreatedAt != nil {
		object["createdAt"], err = json.Marshal(t.CreatedAt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'createdAt': %w", err)
		}
	}

	if t.CreatedBy != nil {
		object["createdBy"], err = json.Marshal(t.CreatedBy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'createdBy': %w", err)
		}
	}

	if t.DownloadCount != nil {
		object["downloadCount"], err = json.Marshal(t.DownloadCount)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'downloadCount': %w", err)
		}
	}

	if t.IsQuarantined != nil {
		object["isQuarantined"], err = json.Marshal(t.IsQuarantined)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'isQuarantined': %w", err)
		}
	}

	if t.ModifiedAt != nil {
		object["modifiedAt"], err = json.Marshal(t.ModifiedAt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'modifiedAt': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	object["packageType"], err = json.Marshal(t.PackageType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'packageType': %w", err)
	}

	if t.QuarantineReason != nil {
		object["quarantineReason"], err = json.Marshal(t.QuarantineReason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'quarantineReason': %w", err)
		}
	}

	if t.Size != nil {
		object["size"], err = json.Marshal(t.Size)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'size': %w", err)
		}
	}

	object["version"], err = json.Marshal(t.Version)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'version': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *ArtifactDetail) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["artifactType"]; found {
		err = json.Unmarshal(raw, &t.ArtifactType)
		if err != nil {
			return fmt.Errorf("error reading 'artifactType': %w", err)
		}
	}

	if raw, found := object["createdAt"]; found {
		err = json.Unmarshal(raw, &t.CreatedAt)
		if err != nil {
			return fmt.Errorf("error reading 'createdAt': %w", err)
		}
	}

	if raw, found := object["createdBy"]; found {
		err = json.Unmarshal(raw, &t.CreatedBy)
		if err != nil {
			return fmt.Errorf("error reading 'createdBy': %w", err)
		}
	}

	if raw, found := object["downloadCount"]; found {
		err = json.Unmarshal(raw, &t.DownloadCount)
		if err != nil {
			return fmt.Errorf("error reading 'downloadCount': %w", err)
		}
	}

	if raw, found := object["isQuarantined"]; found {
		err = json.Unmarshal(raw, &t.IsQuarantined)
		if err != nil {
			return fmt.Errorf("error reading 'isQuarantined': %w", err)
		}
	}

	if raw, found := object["modifiedAt"]; found {
		err = json.Unmarshal(raw, &t.ModifiedAt)
		if err != nil {
			return fmt.Errorf("error reading 'modifiedAt': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["packageType"]; found {
		err = json.Unmarshal(raw, &t.PackageType)
		if err != nil {
			return fmt.Errorf("error reading 'packageType': %w", err)
		}
	}

	if raw, found := object["quarantineReason"]; found {
		err = json.Unmarshal(raw, &t.QuarantineReason)
		if err != nil {
			return fmt.Errorf("error reading 'quarantineReason': %w", err)
		}
	}

	if raw, found := object["size"]; found {
		err = json.Unmarshal(raw, &t.Size)
		if err != nil {
			return fmt.Errorf("error reading 'size': %w", err)
		}
	}

	if raw, found := object["version"]; found {
		err = json.Unmarshal(raw, &t.Version)
		if err != nil {
			return fmt.Errorf("error reading 'version': %w", err)
		}
	}

	return err
}

// AsClientSetupStepConfig returns the union data inside the ClientSetupSection as a ClientSetupStepConfig
func (t ClientSetupSection) AsClientSetupStepConfig() (ClientSetupStepConfig, error) {
	var body ClientSetupStepConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClientSetupStepConfig overwrites any union data inside the ClientSetupSection as the provided ClientSetupStepConfig
func (t *ClientSetupSection) FromClientSetupStepConfig(v ClientSetupStepConfig) error {
	t.Type = "INLINE"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClientSetupStepConfig performs a merge with any union data inside the ClientSetupSection, using the provided ClientSetupStepConfig
func (t *ClientSetupSection) MergeClientSetupStepConfig(v ClientSetupStepConfig) error {
	t.Type = "INLINE"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTabSetupStepConfig returns the union data inside the ClientSetupSection as a TabSetupStepConfig
func (t ClientSetupSection) AsTabSetupStepConfig() (TabSetupStepConfig, error) {
	var body TabSetupStepConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTabSetupStepConfig overwrites any union data inside the ClientSetupSection as the provided TabSetupStepConfig
func (t *ClientSetupSection) FromTabSetupStepConfig(v TabSetupStepConfig) error {
	t.Type = "TABS"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTabSetupStepConfig performs a merge with any union data inside the ClientSetupSection, using the provided TabSetupStepConfig
func (t *ClientSetupSection) MergeTabSetupStepConfig(v TabSetupStepConfig) error {
	t.Type = "TABS"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ClientSetupSection) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ClientSetupSection) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "INLINE":
		return t.AsClientSetupStepConfig()
	case "TABS":
		return t.AsTabSetupStepConfig()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ClientSetupSection) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Header != nil {
		object["header"], err = json.Marshal(t.Header)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'header': %w", err)
		}
	}

	if t.SecHeader != nil {
		object["secHeader"], err = json.Marshal(t.SecHeader)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secHeader': %w", err)
		}
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *ClientSetupSection) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["header"]; found {
		err = json.Unmarshal(raw, &t.Header)
		if err != nil {
			return fmt.Errorf("error reading 'header': %w", err)
		}
	}

	if raw, found := object["secHeader"]; found {
		err = json.Unmarshal(raw, &t.SecHeader)
		if err != nil {
			return fmt.Errorf("error reading 'secHeader': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsVirtualConfig returns the union data inside the RegistryConfig as a VirtualConfig
func (t RegistryConfig) AsVirtualConfig() (VirtualConfig, error) {
	var body VirtualConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVirtualConfig overwrites any union data inside the RegistryConfig as the provided VirtualConfig
func (t *RegistryConfig) FromVirtualConfig(v VirtualConfig) error {
	t.Type = "VIRTUAL"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVirtualConfig performs a merge with any union data inside the RegistryConfig, using the provided VirtualConfig
func (t *RegistryConfig) MergeVirtualConfig(v VirtualConfig) error {
	t.Type = "VIRTUAL"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpstreamConfig returns the union data inside the RegistryConfig as a UpstreamConfig
func (t RegistryConfig) AsUpstreamConfig() (UpstreamConfig, error) {
	var body UpstreamConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpstreamConfig overwrites any union data inside the RegistryConfig as the provided UpstreamConfig
func (t *RegistryConfig) FromUpstreamConfig(v UpstreamConfig) error {
	t.Type = "UPSTREAM"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpstreamConfig performs a merge with any union data inside the RegistryConfig, using the provided UpstreamConfig
func (t *RegistryConfig) MergeUpstreamConfig(v UpstreamConfig) error {
	t.Type = "UPSTREAM"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RegistryConfig) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RegistryConfig) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "UPSTREAM":
		return t.AsUpstreamConfig()
	case "VIRTUAL":
		return t.AsVirtualConfig()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RegistryConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *RegistryConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsLocalReplicationRegistry returns the union data inside the ReplicationRegistry as a LocalReplicationRegistry
func (t ReplicationRegistry) AsLocalReplicationRegistry() (LocalReplicationRegistry, error) {
	var body LocalReplicationRegistry
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLocalReplicationRegistry overwrites any union data inside the ReplicationRegistry as the provided LocalReplicationRegistry
func (t *ReplicationRegistry) FromLocalReplicationRegistry(v LocalReplicationRegistry) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLocalReplicationRegistry performs a merge with any union data inside the ReplicationRegistry, using the provided LocalReplicationRegistry
func (t *ReplicationRegistry) MergeLocalReplicationRegistry(v LocalReplicationRegistry) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJfrogReplicationRegistry returns the union data inside the ReplicationRegistry as a JfrogReplicationRegistry
func (t ReplicationRegistry) AsJfrogReplicationRegistry() (JfrogReplicationRegistry, error) {
	var body JfrogReplicationRegistry
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJfrogReplicationRegistry overwrites any union data inside the ReplicationRegistry as the provided JfrogReplicationRegistry
func (t *ReplicationRegistry) FromJfrogReplicationRegistry(v JfrogReplicationRegistry) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJfrogReplicationRegistry performs a merge with any union data inside the ReplicationRegistry, using the provided JfrogReplicationRegistry
func (t *ReplicationRegistry) MergeJfrogReplicationRegistry(v JfrogReplicationRegistry) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReplicationRegistry) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReplicationRegistry) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUserPassword returns the union data inside the UpstreamConfig_Auth as a UserPassword
func (t UpstreamConfig_Auth) AsUserPassword() (UserPassword, error) {
	var body UserPassword
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserPassword overwrites any union data inside the UpstreamConfig_Auth as the provided UserPassword
func (t *UpstreamConfig_Auth) FromUserPassword(v UserPassword) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserPassword performs a merge with any union data inside the UpstreamConfig_Auth, using the provided UserPassword
func (t *UpstreamConfig_Auth) MergeUserPassword(v UserPassword) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAnonymous returns the union data inside the UpstreamConfig_Auth as a Anonymous
func (t UpstreamConfig_Auth) AsAnonymous() (Anonymous, error) {
	var body Anonymous
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAnonymous overwrites any union data inside the UpstreamConfig_Auth as the provided Anonymous
func (t *UpstreamConfig_Auth) FromAnonymous(v Anonymous) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAnonymous performs a merge with any union data inside the UpstreamConfig_Auth, using the provided Anonymous
func (t *UpstreamConfig_Auth) MergeAnonymous(v Anonymous) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAccessKeySecretKey returns the union data inside the UpstreamConfig_Auth as a AccessKeySecretKey
func (t UpstreamConfig_Auth) AsAccessKeySecretKey() (AccessKeySecretKey, error) {
	var body AccessKeySecretKey
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccessKeySecretKey overwrites any union data inside the UpstreamConfig_Auth as the provided AccessKeySecretKey
func (t *UpstreamConfig_Auth) FromAccessKeySecretKey(v AccessKeySecretKey) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccessKeySecretKey performs a merge with any union data inside the UpstreamConfig_Auth, using the provided AccessKeySecretKey
func (t *UpstreamConfig_Auth) MergeAccessKeySecretKey(v AccessKeySecretKey) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpstreamConfig_Auth) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpstreamConfig_Auth) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
