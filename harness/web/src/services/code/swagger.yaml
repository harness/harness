openapi: 3.0.0
info:
  title: API Specification
  version: 0.0.0
servers:
  - url: /api/v1
security:
  - bearerAuth: []
paths:
  /admin/users:
    get:
      operationId: adminListUsers
      parameters:
        - in: query
          name: sort
          schema:
            enum:
              - id
              - email
              - created
              - updated
            type: string
        - in: query
          name: order
          schema:
            enum:
              - asc
              - desc
            type: string
        - in: query
          name: page
          schema:
            default: 1
            type: integer
        - in: query
          name: limit
          schema:
            default: 30
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesUser'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - admin
    post:
      operationId: adminCreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiAdminUsersCreateRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - admin
  /admin/users/{user_uid}:
    delete:
      operationId: adminDeleteUser
      parameters:
        - in: path
          name: user_uid
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - admin
    get:
      operationId: adminGetUser
      parameters:
        - in: path
          name: user_uid
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - admin
    patch:
      operationId: adminUpdateUser
      parameters:
        - in: path
          name: user_uid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiAdminUsersUpdateRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - admin
  /admin/users/{user_uid}/admin:
    patch:
      operationId: updateUserAdmin
      parameters:
        - in: path
          name: user_uid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateAdminRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - admin
  /connectors:
    post:
      operationId: createConnector
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateConnectorRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesConnector'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - connector
  /connectors/{connector_ref}:
    delete:
      operationId: deleteConnector
      parameters:
        - in: path
          name: connector_ref
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - connector
    get:
      operationId: findConnector
      parameters:
        - in: path
          name: connector_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesConnector'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - connector
    patch:
      operationId: updateConnector
      parameters:
        - in: path
          name: connector_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateConnectorRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesConnector'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - connector
  /gitspaces:
    get:
      operationId: listGitspaces
      parameters:
        - description: The substring which is used to filter the gitspaces by their
            name or idenitifer.
          in: query
          name: query
          required: false
          schema:
            type: string
        - in: query
          name: sort
          schema:
            $ref: '#/components/schemas/EnumGitspaceSort'
        - in: query
          name: order
          schema:
            enum:
              - asc
              - desc
            type: string
        - in: query
          name: gitspace_owner
          schema:
            $ref: '#/components/schemas/EnumGitspaceOwner'
        - in: query
          name: gitspace_states
          schema:
            items:
              $ref: '#/components/schemas/EnumGitspaceFilterState'
            type: array
        - in: query
          name: page
          schema:
            default: 1
            type: integer
        - in: query
          name: limit
          schema:
            default: 30
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesGitspaceConfig'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      summary: List gitspaces
      tags:
        - gitspaces
    post:
      operationId: createGitspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateGitspaceRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesGitspaceConfig'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      summary: Create gitspace config
      tags:
        - gitspaces
  /gitspaces/{gitspace_identifier}:
    delete:
      operationId: deleteGitspace
      parameters:
        - in: path
          name: gitspace_identifier
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      summary: Delete gitspace config
      tags:
        - gitspaces
    get:
      operationId: findGitspace
      parameters:
        - in: path
          name: gitspace_identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesGitspaceConfig'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      summary: Get gitspace
      tags:
        - gitspaces
  /gitspaces/{gitspace_identifier}/action:
    post:
      operationId: actionOnGitspace
      parameters:
        - in: path
          name: gitspace_identifier
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiActionGitspaceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesGitspaceConfig'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      summary: Perform action on a gitspace
      tags:
        - gitspaces
  /gitspaces/{gitspace_identifier}/events:
    get:
      operationId: listGitspaceEvents
      parameters:
        - in: query
          name: page
          schema:
            default: 1
            type: integer
        - in: query
          name: limit
          schema:
            default: 30
            type: integer
        - in: path
          name: gitspace_identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesGitspaceEventResponse'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      summary: List gitspace events
      tags:
        - gitspaces
  /gitspaces/{gitspace_identifier}/logs/stream:
    get:
      operationId: opStreamLogs
      parameters:
        - in: path
          name: gitspace_identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LivelogLine'
                type: array
            text/event-stream:
              schema:
                type: string
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      summary: Stream gitspace logs
      tags:
        - gitspaces
  /gitspaces/lookup-repo:
    post:
      operationId: repoLookupForGitspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiLookupRepoGitspaceRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmCodeRepositoryResponse'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      summary: Validate git repo for gitspaces
      tags:
        - gitspaces
  /infraproviders:
    post:
      operationId: createInfraProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateInfraProviderConfigRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesInfraProviderConfig'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      summary: Create infraProvider config
      tags:
        - infraproviders
  /infraproviders/{infraprovider_identifier}:
    get:
      operationId: getInfraProvider
      parameters:
        - in: path
          name: infraprovider_identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesInfraProviderConfig'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      summary: Get infraProviderConfig
      tags:
        - infraproviders
  /login:
    post:
      operationId: onLogin
      parameters:
        - description: If set to true the token is also returned as a cookie.
          in: query
          name: include_cookie
          required: false
          schema:
            default: false
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiLoginRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - account
  /logout:
    post:
      operationId: opLogout
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - account
  /plugins:
    get:
      operationId: listPlugins
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The substring which is used to filter the plugins by their name.
          in: query
          name: query
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPlugin'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - plugins
  /principals:
    get:
      operationId: listPrincipals
      parameters:
        - description: The substring by which the principals are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The types of principals to include.
          in: query
          name: type
          required: false
          schema:
            items:
              enum:
                - service
                - serviceaccount
                - user
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPrincipalInfo'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - principals
  /principals/{id}:
    get:
      operationId: getPrincipal
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPrincipalInfo'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - principals
  /register:
    post:
      operationId: onRegister
      parameters:
        - description: If set to true the token is also returned as a cookie.
          in: query
          name: include_cookie
          required: false
          schema:
            default: false
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiRegisterRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - account
  /repos:
    post:
      operationId: createRepository
      parameters:
        - description: path of parent space (Not needed in standalone).
          in: query
          name: space_path
          required: false
          schema:
            default: false
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateRepositoryRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoRepositoryOutput'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}:
    delete:
      operationId: deleteRepository
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoSoftDeleteResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    get:
      operationId: findRepository
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoRepositoryOutput'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    patch:
      operationId: updateRepository
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateRepoRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoRepositoryOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/archive/{git_ref}.{format}:
    get:
      operationId: archive
      parameters:
        - description: Without an optional path parameter, all files and subdirectories
            of the current working directory are included in the archive. If one or
            more paths are specified, only these are included.
          in: query
          name: path
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Prepend <prefix>/ to paths in the archive.
          in: query
          name: prefix
          required: false
          schema:
            type: string
        - description: Look for attributes in .gitattributes files in the working tree
            as well
          in: query
          name: attributes
          required: false
          schema:
            type: string
        - description: Set modification time of archive entries. Without this option
            the committer time is used if <tree-ish> is a commit or tag, and the current
            time if it is a tree.
          in: query
          name: time
          required: false
          schema:
            type: string
        - description: Specify compression level. Larger values allow the command to
            spend more time to compress to smaller size.
          in: query
          name: compression
          required: false
          schema:
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: git_ref
          required: true
          schema:
            type: string
        - in: path
          name: format
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/gzip:
              schema:
                type: string
            application/tar:
              schema:
                type: string
            application/zip:
              schema:
                type: string
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/blame/{path}:
    get:
      operationId: getBlame
      parameters:
        - description: The git reference (branch / tag / commitID) that will be used
            to retrieve the data. If no value is provided the default branch of the
            repository is used.
          in: query
          name: git_ref
          required: false
          schema:
            default: '{Repository Default Branch}'
            type: string
        - description: Line number from which the file data is considered
          in: query
          name: line_from
          required: false
          schema:
            default: 0
            type: integer
        - description: Line number to which the file data is considered
          in: query
          name: line_to
          required: false
          schema:
            default: 0
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: path
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GitBlamePart'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/branches:
    get:
      operationId: listBranches
      parameters:
        - description: The substring by which the branches are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The data by which the branches are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: name
            enum:
              - name
              - date
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: Indicates whether optional commit information should be included
            in the response.
          in: query
          name: include_commit
          required: false
          schema:
            default: false
            type: boolean
        - description: If true, the summary of check for the branch commit SHA would
            be included in the response.
          in: query
          name: include_checks
          required: false
          schema:
            default: false
            type: boolean
        - description: If true, a list of rules that apply to this branch would be included
            in the response.
          in: query
          name: include_rules
          required: false
          schema:
            default: false
            type: boolean
        - description: If true, a list of pull requests from the branch would be included
            in the response.
          in: query
          name: include_pullreqs
          required: false
          schema:
            default: false
            type: boolean
        - description: If greater than zero, branch divergence from the default branch
            will be included in the response. The divergence would be calculated up
            the this many commits.
          in: query
          name: max_divergence
          required: false
          schema:
            default: 0
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesBranchExtended'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    post:
      operationId: createBranch
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateBranchRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCreateBranchOutput'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCreateBranchOutput'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/branches/{branch_name}:
    delete:
      operationId: deleteBranch
      parameters:
        - description: Bypass rule violations if possible.
          in: query
          name: bypass_rules
          required: false
          schema:
            default: false
            type: boolean
        - description: Dry run rules for operations
          in: query
          name: dry_run_rules
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: branch_name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesDeleteBranchOutput'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    get:
      operationId: getBranch
      parameters:
        - description: If true, the summary of check for the branch commit SHA would
            be included in the response.
          in: query
          name: include_checks
          required: false
          schema:
            default: false
            type: boolean
        - description: If true, a list of rules that apply to this branch would be included
            in the response.
          in: query
          name: include_rules
          required: false
          schema:
            default: false
            type: boolean
        - description: If true, a list of pull requests from the branch would be included
            in the response.
          in: query
          name: include_pullreqs
          required: false
          schema:
            default: false
            type: boolean
        - description: If greater than zero, branch divergence from the default branch
            will be included in the response. The divergence would be calculated up
            the this many commits.
          in: query
          name: max_divergence
          required: false
          schema:
            default: 0
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: branch_name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesBranchExtended'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/checks/commits/{commit_sha}:
    get:
      operationId: listStatusCheckResults
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The substring which is used to filter the status checks by their
            Identifier.
          in: query
          name: query
          required: false
          schema:
            type: string
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: commit_sha
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesCheck'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - status_checks
    put:
      operationId: reportStatusCheckResults
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: commit_sha
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                check_uid:
                  deprecated: true
                  type: string
                ended:
                  type: integer
                identifier:
                  type: string
                link:
                  type: string
                payload:
                  $ref: '#/components/schemas/TypesCheckPayload'
                started:
                  type: integer
                status:
                  $ref: '#/components/schemas/EnumCheckStatus'
                summary:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCheck'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - status_checks
  /repos/{repo_ref}/checks/recent:
    get:
      operationId: listStatusCheckRecent
      parameters:
        - description: The substring which is used to filter the status checks by their
            Identifier.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The timestamp (in Unix time millis) since the status checks have
            been run.
          in: query
          name: since
          required: false
          schema:
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - status_checks
  /repos/{repo_ref}/codeowners/validate:
    get:
      operationId: codeOwnersValidate
      parameters:
        - description: The git reference (branch / tag / commitID) that will be used
            to retrieve the data. If no value is provided the default branch of the
            repository is used.
          in: query
          name: git_ref
          required: false
          schema:
            default: '{Repository Default Branch}'
            type: string
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/commits:
    get:
      operationId: listCommits
      parameters:
        - description: The git reference (branch / tag / commitID) that will be used
            to retrieve the data. If no value is provided the default branch of the
            repository is used.
          in: query
          name: git_ref
          required: false
          schema:
            default: '{Repository Default Branch}'
            type: string
        - description: The result should only contain commits that occurred after the
            provided reference.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: Path for which commit information should be retrieved
          in: query
          name: path
          required: false
          schema:
            default: ''
            type: string
        - description: Epoch timestamp since when commit information should be retrieved.
          in: query
          name: since
          required: false
          schema:
            example: 1.728348213e+09
            type: integer
        - description: Epoch timestamp until when commit information should be retrieved.
          in: query
          name: until
          required: false
          schema:
            example: 1.746668446e+09
            type: integer
        - description: Committer pattern for which commit information should be retrieved.
          in: query
          name: committer
          required: false
          schema:
            type: string
        - description: Committer principal IDs for which commit information should be
            retrieved.
          explode: true
          in: query
          name: committer_id
          required: false
          schema:
            items:
              type: integer
            type: array
          style: form
        - description: Author pattern for which commit information should be retrieved.
          in: query
          name: author
          required: false
          schema:
            type: string
        - description: Author principal IDs for which commit information should be retrieved.
          explode: true
          in: query
          name: author_id
          required: false
          schema:
            items:
              type: integer
            type: array
          style: form
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: Indicates whether optional stats should be included in the response.
          in: query
          name: include_stats
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesListCommitResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    post:
      operationId: commitFiles
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommitFilesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCommitFilesResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '412':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Precondition Failed
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/commits/{commit_sha}:
    get:
      operationId: getCommit
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: commit_sha
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCommit'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/commits/{commit_sha}/diff:
    get:
      operationId: getCommitDiff
      parameters:
        - in: query
          name: ignore_whitespace
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: commit_sha
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/commits/calculate-divergence:
    post:
      operationId: calculateCommitDivergence
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCalculateCommitDivergenceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesCommitDivergence'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/content/{path}:
    get:
      operationId: getContent
      parameters:
        - description: The git reference (branch / tag / commitID) that will be used
            to retrieve the data. If no value is provided the default branch of the
            repository is used.
          in: query
          name: git_ref
          required: false
          schema:
            default: '{Repository Default Branch}'
            type: string
        - description: Indicates whether optional commit information should be included
            in the response.
          in: query
          name: include_commit
          required: false
          schema:
            default: false
            type: boolean
        - description: Flatten directories that contain just one subdirectory.
          in: query
          name: flatten_directories
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: path
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiGetContentOutput'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/default-branch:
    post:
      operationId: updateDefaultBranch
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateDefaultBranchRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoRepositoryOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/diff-stats/{range}:
    get:
      operationId: diffStats
      parameters:
        - description: provide path for diff operation
          in: query
          name: path
          schema:
            description: provide path for diff operation
            items:
              type: string
            type: array
        - in: query
          name: ignore_whitespace
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: range
          required: true
          schema:
            example: main..dev
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesDiffStats'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/diff/{range}:
    get:
      operationId: rawDiff
      parameters:
        - description: provide path for diff operation
          in: query
          name: path
          schema:
            description: provide path for diff operation
            items:
              type: string
            type: array
        - in: query
          name: ignore_whitespace
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: range
          required: true
          schema:
            example: main..dev
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GitFileDiff'
                type: array
            text/plain:
              schema:
                type: string
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    post:
      operationId: rawDiffPost
      parameters:
        - in: query
          name: ignore_whitespace
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: range
          required: true
          schema:
            example: main..dev
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiPostRawDiffRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GitFileDiff'
                type: array
            text/plain:
              schema:
                type: string
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/import-progress:
    get:
      operationId: importProgressRepository
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobProgress'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/labels:
    get:
      operationId: listRepoLabels
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The result should inherit entities from parent spaces.
          in: query
          name: inherited
          required: false
          schema:
            default: false
            type: boolean
        - description: The substring which is used to filter the labels by their key.
          in: query
          name: query
          required: false
          schema:
            type: string
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesLabel'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    post:
      operationId: defineRepoLabel
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                color:
                  $ref: '#/components/schemas/EnumLabelColor'
                description:
                  type: string
                key:
                  type: string
                type:
                  $ref: '#/components/schemas/EnumLabelType'
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesLabel'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    put:
      operationId: saveRepoLabel
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                label:
                  $ref: '#/components/schemas/TypesSaveLabelInput'
                values:
                  items:
                    $ref: '#/components/schemas/TypesSaveLabelValueInput'
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesLabelWithValues'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/labels/{key}:
    delete:
      operationId: deleteRepoLabel
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    get:
      operationId: findRepoLabel
      parameters:
        - description: The result should include label values.
          in: query
          name: include_values
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesLabelWithValues'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    patch:
      operationId: updateRepoLabel
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                color:
                  $ref: '#/components/schemas/EnumLabelColor'
                description:
                  type: string
                key:
                  type: string
                type:
                  $ref: '#/components/schemas/EnumLabelType'
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesLabel'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/labels/{key}/values:
    get:
      operationId: listRepoLabelValues
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesLabelValue'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    post:
      operationId: defineRepoLabelValue
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                color:
                  $ref: '#/components/schemas/EnumLabelColor'
                value:
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesLabelValue'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/labels/{key}/values/{value}:
    delete:
      operationId: deleteRepoLabelValue
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
        - in: path
          name: value
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    patch:
      operationId: updateRepoLabelValue
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
        - in: path
          name: value
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                color:
                  $ref: '#/components/schemas/EnumLabelColor'
                value:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesLabelValue'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/merge-check/{range}:
    post:
      operationId: mergeCheck
      parameters:
        - description: provide path for diff operation
          in: query
          name: path
          schema:
            description: provide path for diff operation
            items:
              type: string
            type: array
        - in: query
          name: ignore_whitespace
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: range
          required: true
          schema:
            example: main..dev
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoMergeCheck'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/move:
    post:
      operationId: moveRepository
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMoveRepoRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoRepositoryOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/path-details:
    post:
      operationId: pathDetails
      parameters:
        - description: The git reference (branch / tag / commitID) that will be used
            to retrieve the data. If no value is provided the default branch of the
            repository is used.
          in: query
          name: git_ref
          required: false
          schema:
            default: '{Repository Default Branch}'
            type: string
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiPathsDetailsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoPathsDetailsOutput'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/paths:
    get:
      operationId: listPaths
      parameters:
        - description: The git reference (branch / tag / commitID) that will be used
            to retrieve the data. If no value is provided the default branch of the
            repository is used.
          in: query
          name: git_ref
          required: false
          schema:
            default: '{Repository Default Branch}'
            type: string
        - description: Indicates whether directories should be included in the response.
          in: query
          name: include_directories
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoListPathsOutput'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/pipelines:
    get:
      operationId: listPipelines
      parameters:
        - description: The substring which is used to filter the pipelines by their
            names.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: Whether to fetch latest build information for each pipeline.
          in: query
          name: latest
          required: false
          schema:
            default: false
            type: boolean
        - description: The number of last executions to be returned
          in: query
          name: last_executions
          required: false
          schema:
            default: 10
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPipeline'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
    post:
      operationId: createPipeline
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreatePipelineRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPipeline'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
  /repos/{repo_ref}/pipelines/{pipeline_identifier}:
    delete:
      operationId: deletePipeline
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
    get:
      operationId: findPipeline
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPipeline'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
    patch:
      operationId: updatePipeline
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdatePipelineRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPipeline'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
  /repos/{repo_ref}/pipelines/{pipeline_identifier}/executions:
    get:
      operationId: listExecutions
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesExecution'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
    post:
      operationId: createExecution
      parameters:
        - description: Branch to run the execution for.
          in: query
          name: branch
          required: false
          schema:
            type: string
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesExecution'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
  /repos/{repo_ref}/pipelines/{pipeline_identifier}/executions/{execution_number}:
    delete:
      operationId: deleteExecution
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
        - in: path
          name: execution_number
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
    get:
      operationId: findExecution
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
        - in: path
          name: execution_number
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesExecution'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
  /repos/{repo_ref}/pipelines/{pipeline_identifier}/executions/{execution_number}/cancel:
    post:
      operationId: cancelExecution
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
        - in: path
          name: execution_number
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesExecution'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
  /repos/{repo_ref}/pipelines/{pipeline_identifier}/executions/{execution_number}/logs/{stage_number}/{step_number}:
    get:
      operationId: viewLogs
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
        - in: path
          name: execution_number
          required: true
          schema:
            type: string
        - in: path
          name: stage_number
          required: true
          schema:
            type: string
        - in: path
          name: step_number
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LivelogLine'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
  /repos/{repo_ref}/pipelines/{pipeline_identifier}/triggers:
    get:
      operationId: listTriggers
      parameters:
        - description: The substring which is used to filter the repositories by their
            path name.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesTrigger'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
    post:
      operationId: createTrigger
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateTriggerRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTrigger'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
  /repos/{repo_ref}/pipelines/{pipeline_identifier}/triggers/{trigger_identifier}:
    delete:
      operationId: deleteTrigger
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
        - in: path
          name: trigger_identifier
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
    get:
      operationId: findTrigger
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
        - in: path
          name: trigger_identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTrigger'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
    patch:
      operationId: updateTrigger
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pipeline_identifier
          required: true
          schema:
            type: string
        - in: path
          name: trigger_identifier
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateTriggerRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTrigger'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pipeline
  /repos/{repo_ref}/public-access:
    post:
      operationId: updatePublicAccess
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateRepoPublicAccessRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoRepositoryOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/pullreq:
    get:
      operationId: listPullReq
      parameters:
        - description: The state of the pull requests to include in the result.
          explode: true
          in: query
          name: state
          required: false
          schema:
            items:
              default: open
              enum:
                - closed
                - merged
                - open
              type: string
            type: array
          style: form
        - description: Source repository ref of the pull requests.
          in: query
          name: source_repo_ref
          required: false
          schema:
            type: string
        - description: Source branch of the pull requests.
          in: query
          name: source_branch
          required: false
          schema:
            type: string
        - description: Target branch of the pull requests.
          in: query
          name: target_branch
          required: false
          schema:
            type: string
        - description: The substring by which the pull requests are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: List of principal IDs who created pull requests.
          explode: true
          in: query
          name: created_by
          required: false
          schema:
            items:
              type: integer
            type: array
          style: form
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The data by which the pull requests are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: number
            enum:
              - created
              - edited
              - merged
              - number
              - updated
            type: string
        - description: The result should contain only entries created before this timestamp
            (unix millis).
          in: query
          name: created_lt
          required: false
          schema:
            minimum: 0
            type: integer
        - description: The result should contain only entries created after this timestamp
            (unix millis).
          in: query
          name: created_gt
          required: false
          schema:
            minimum: 0
            type: integer
        - description: The result should contain only entries updated before this timestamp
            (unix millis).
          in: query
          name: updated_lt
          required: false
          schema:
            minimum: 0
            type: integer
        - description: The result should contain only entries updated after this timestamp
            (unix millis).
          in: query
          name: updated_gt
          required: false
          schema:
            minimum: 0
            type: integer
        - description: By providing this parameter the description would be excluded
            from the response.
          in: query
          name: exclude_description
          required: false
          schema:
            default: false
            type: boolean
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: List of label ids used to filter pull requests.
          explode: true
          in: query
          name: label_id
          required: false
          schema:
            items:
              type: integer
            type: array
          style: form
        - description: List of label value ids used to filter pull requests.
          explode: true
          in: query
          name: value_id
          required: false
          schema:
            items:
              type: integer
            type: array
          style: form
        - description: Return only pull requests where this user is the author.
          in: query
          name: author_id
          required: false
          schema:
            type: integer
        - description: Return only pull requests where this user has created at least
            one comment.
          in: query
          name: commenter_id
          required: false
          schema:
            type: integer
        - description: Return only pull requests where this user has been mentioned.
          in: query
          name: mentioned_id
          required: false
          schema:
            type: integer
        - description: Return only pull requests where this user has been added as a
            reviewer.
          in: query
          name: reviewer_id
          required: false
          schema:
            type: integer
        - description: Require only this review decision of the reviewer. Requires reviewer_id
            parameter.
          explode: true
          in: query
          name: review_decision
          required: false
          schema:
            items:
              enum:
                - approved
                - changereq
                - pending
                - reviewed
              type: string
            type: array
          style: form
        - description: If true, the git diff stats would be included in the response.
          in: query
          name: include_git_stats
          required: false
          schema:
            default: false
            type: boolean
        - description: If true, the summary of check for the branch commit SHA would
            be included in the response.
          in: query
          name: include_checks
          required: false
          schema:
            default: false
            type: boolean
        - description: If true, a list of rules that apply to this branch would be included
            in the response.
          in: query
          name: include_rules
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPullReq'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
    post:
      operationId: createPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreatePullReqRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}:
    get:
      operationId: getPullReq
      parameters:
        - description: If true, the summary of check for the branch commit SHA would
            be included in the response.
          in: query
          name: include_checks
          required: false
          schema:
            default: false
            type: boolean
        - description: If true, a list of rules that apply to this branch would be included
            in the response.
          in: query
          name: include_rules
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
    patch:
      operationId: updatePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdatePullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/activities:
    get:
      operationId: listPullReqActivities
      parameters:
        - description: The kind of the pull request activity to include in the result.
          in: query
          name: kind
          required: false
          schema:
            items:
              enum:
                - change-comment
                - comment
                - system
              type: string
            type: array
        - description: The type of the pull request activity to include in the result.
          in: query
          name: type
          required: false
          schema:
            items:
              enum:
                - branch-delete
                - branch-restore
                - branch-update
                - code-comment
                - comment
                - label-modify
                - merge
                - review-submit
                - reviewer-add
                - reviewer-delete
                - state-change
                - target-branch-change
                - title-change
                - user-group-reviewer-add
                - user-group-reviewer-delete
              type: string
            type: array
        - description: The result should contain only entries created at and after this
            timestamp (unix millis).
          in: query
          name: after
          required: false
          schema:
            minimum: 0
            type: integer
        - description: The result should contain only entries created before this timestamp
            (unix millis).
          in: query
          name: before
          required: false
          schema:
            minimum: 0
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPullReqActivity'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/branch:
    delete:
      operationId: deletePullReqSourceBranch
      parameters:
        - description: Bypass rule violations if possible.
          in: query
          name: bypass_rules
          required: false
          schema:
            default: false
            type: boolean
        - description: Dry run rules for operations
          in: query
          name: dry_run_rules
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesDeleteBranchOutput'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
    post:
      operationId: restorePullReqSourceBranch
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                bypass_rules:
                  type: boolean
                dry_run_rules:
                  type: boolean
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCreateBranchOutput'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCreateBranchOutput'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/checks:
    get:
      operationId: checksPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqChecks'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/codeowners:
    get:
      operationId: codeownersPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCodeOwnerEvaluation'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/comments:
    post:
      operationId: commentCreatePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentCreatePullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/comments/{pullreq_comment_id}:
    delete:
      operationId: commentDeletePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
        - in: path
          name: pullreq_comment_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
    patch:
      operationId: commentUpdatePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
        - in: path
          name: pullreq_comment_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentUpdatePullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/comments/{pullreq_comment_id}/status:
    put:
      operationId: commentStatusPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
        - in: path
          name: pullreq_comment_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentStatusPullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/comments/apply-suggestions:
    post:
      operationId: commentApplySuggestions
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentApplySuggestionstRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullreqCommentApplySuggestionsOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/commits:
    get:
      operationId: listPullReqCommits
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesCommit'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/diff:
    get:
      operationId: diffPullReq
      parameters:
        - description: provide path for diff operation
          in: query
          name: path
          schema:
            description: provide path for diff operation
            items:
              type: string
            type: array
        - in: query
          name: ignore_whitespace
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GitFileDiff'
                type: array
            text/plain:
              schema:
                type: string
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
    post:
      operationId: diffPullReqPost
      parameters:
        - in: query
          name: ignore_whitespace
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiPostRawPRDiffRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GitFileDiff'
                type: array
            text/plain:
              schema:
                type: string
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/file-views:
    get:
      operationId: fileViewListPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPullReqFileView'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
    put:
      operationId: fileViewAddPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiFileViewAddPullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqFileView'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/file-views/{file_path}:
    delete:
      operationId: fileViewDeletePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
        - in: path
          name: file_path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/labels:
    get:
      operationId: listLabels
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The result should contain all labels assignable to the pullreq.
          in: query
          name: assignable
          required: false
          schema:
            default: false
            type: boolean
        - description: The substring which is used to filter the labels by their key.
          in: query
          name: query
          required: false
          schema:
            type: string
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesScopesLabels'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
    put:
      operationId: assignLabel
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiPullReqAssignLabelInput'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqLabel'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/labels/{label_id}:
    delete:
      operationId: unassignLabel
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
        - in: path
          name: label_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/merge:
    post:
      operationId: mergePullReqOp
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMergePullReq'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMergeResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Method Not Allowed
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMergeViolations'
          description: Unprocessable Entity
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/metadata:
    get:
      operationId: pullReqMetaData
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqStats'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/revert:
    post:
      operationId: revertPullReqOp
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                message:
                  type: string
                revert_branch:
                  type: string
                title:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRevertResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Method Not Allowed
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviewers:
    get:
      operationId: reviewerListPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPullReqReviewer'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
    put:
      operationId: reviewerAddPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiReviewerAddPullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqReviewer'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviewers/{pullreq_reviewer_id}:
    delete:
      operationId: reviewerDeletePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
        - in: path
          name: pullreq_reviewer_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviewers/combined:
    get:
      operationId: reviewerCombinedListPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullreqCombinedListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviewers/usergroups:
    put:
      operationId: userGroupReviewerAddPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUserGroupReviewerAddRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUserGroupReviewer'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviewers/usergroups/{user_group_id}:
    delete:
      operationId: userGroupReviewerDeletePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
        - in: path
          name: user_group_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviews:
    post:
      operationId: reviewSubmitPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiReviewSubmitPullReqRequest'
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/state:
    post:
      operationId: statePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiStatePullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/target-branch:
    put:
      operationId: changeTargetBranch
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                branch_name:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{target_branch}...{source_branch}:
    get:
      operationId: getPullReqByBranches
      parameters:
        - description: Source repository ref of the pull requests.
          in: query
          name: source_repo_ref
          required: false
          schema:
            type: string
        - description: If true, the summary of check for the branch commit SHA would
            be included in the response.
          in: query
          name: include_checks
          required: false
          schema:
            default: false
            type: boolean
        - description: If true, a list of rules that apply to this branch would be included
            in the response.
          in: query
          name: include_rules
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: source_branch
          required: true
          schema:
            type: string
        - in: path
          name: target_branch
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/candidates:
    get:
      operationId: prCandidates
      parameters:
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesBranchTable'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/purge:
    post:
      operationId: purgeRepository
      parameters:
        - description: The exact time the resource was delete at in epoch format.
          in: query
          name: deleted_at
          required: true
          schema:
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/raw/{path}:
    get:
      operationId: getRaw
      parameters:
        - description: The git reference (branch / tag / commitID) that will be used
            to retrieve the data. If no value is provided the default branch of the
            repository is used.
          in: query
          name: git_ref
          required: false
          schema:
            default: '{Repository Default Branch}'
            type: string
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/rebase:
    post:
      operationId: rebaseBranch
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                base_branch:
                  type: string
                base_commit_sha:
                  $ref: '#/components/schemas/ShaSHA'
                bypass_rules:
                  type: boolean
                dry_run:
                  type: boolean
                dry_run_rules:
                  type: boolean
                head_branch:
                  type: string
                head_commit_sha:
                  $ref: '#/components/schemas/ShaSHA'
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRebaseResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMergeViolations'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/restore:
    post:
      operationId: restoreRepository
      parameters:
        - description: The exact time the resource was delete at in epoch format.
          in: query
          name: deleted_at
          required: true
          schema:
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiRestoreRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoRepositoryOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/rules:
    get:
      operationId: repoRuleList
      parameters:
        - description: The substring by which the repository protection rules are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The types of rules to include.
          explode: true
          in: query
          name: type
          required: false
          schema:
            items:
              enum:
                - branch
                - tag
                - push
              type: string
            type: array
          style: form
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The field by which the protection rules are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: created_at
            enum:
              - created_at
              - identifier
              - uid
              - updated_at
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The result should inherit entities from parent spaces.
          in: query
          name: inherited
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OpenapiRule'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    post:
      operationId: repoRuleAdd
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                definition:
                  $ref: '#/components/schemas/OpenapiRuleDefinition'
                description:
                  type: string
                identifier:
                  type: string
                pattern:
                  $ref: '#/components/schemas/ProtectionPattern'
                repo_target:
                  $ref: '#/components/schemas/ProtectionRepoTarget'
                state:
                  $ref: '#/components/schemas/EnumRuleState'
                type:
                  $ref: '#/components/schemas/OpenapiRuleType'
                uid:
                  deprecated: true
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiRule'
          description: Created
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/rules/{rule_identifier}:
    delete:
      operationId: repoRuleDelete
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: rule_identifier
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    get:
      operationId: repoRuleGet
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: rule_identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiRule'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    patch:
      operationId: repoRuleUpdate
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: rule_identifier
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                definition:
                  $ref: '#/components/schemas/OpenapiRuleDefinition'
                description:
                  nullable: true
                  type: string
                identifier:
                  nullable: true
                  type: string
                pattern:
                  $ref: '#/components/schemas/ProtectionPattern'
                repo_target:
                  $ref: '#/components/schemas/ProtectionRepoTarget'
                state:
                  $ref: '#/components/schemas/EnumRuleState'
                type:
                  $ref: '#/components/schemas/OpenapiRuleType'
                uid:
                  deprecated: true
                  nullable: true
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiRule'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/service-accounts:
    get:
      operationId: listRepositoryServiceAccounts
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesServiceAccount'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/settings/general:
    get:
      operationId: findGeneralSettings
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReposettingsGeneralSettings'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    patch:
      operationId: updateGeneralSettings
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiGeneralSettingsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReposettingsGeneralSettings'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/settings/security:
    get:
      operationId: findSecuritySettings
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReposettingsSecuritySettings'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    patch:
      operationId: updateSecuritySettings
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiSecuritySettingsRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReposettingsSecuritySettings'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/squash:
    post:
      operationId: squashBranch
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                base_branch:
                  type: string
                base_commit_sha:
                  $ref: '#/components/schemas/ShaSHA'
                bypass_rules:
                  type: boolean
                dry_run:
                  type: boolean
                dry_run_rules:
                  type: boolean
                head_branch:
                  type: string
                head_commit_sha:
                  $ref: '#/components/schemas/ShaSHA'
                message:
                  type: string
                title:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSquashResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMergeViolations'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/summary:
    get:
      operationId: summary
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepositorySummary'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/tags:
    get:
      operationId: listTags
      parameters:
        - description: Indicates whether optional commit information should be included
            in the response.
          in: query
          name: include_commit
          required: false
          schema:
            default: false
            type: boolean
        - description: The substring by which the tags are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The data by which the tags are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: name
            enum:
              - name
              - date
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesCommitTag'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    post:
      operationId: createTag
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateTagRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCreateCommitTagOutput'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCreateCommitTagOutput'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/tags/{tag_name}:
    delete:
      operationId: deleteTag
      parameters:
        - description: Bypass rule violations if possible.
          in: query
          name: bypass_rules
          required: false
          schema:
            default: false
            type: boolean
        - description: Dry run rules for operations
          in: query
          name: dry_run_rules
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: tag_name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesDeleteCommitTagOutput'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
          description: Unprocessable Entity
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/uploads:
    post:
      operationId: repoArtifactUpload
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema: {}
        description: Binary file to upload
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResult'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - upload
  /repos/{repo_ref}/uploads/{file_ref}:
    get:
      operationId: repoArtifactDownload
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: file_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '307':
          description: Temporary Redirect
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - upload
  /repos/{repo_ref}/webhooks:
    get:
      operationId: listRepoWebhooks
      parameters:
        - description: The substring which is used to filter the webhooks by their identifier.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The data by which the webhooks are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: identifier
            enum:
              - id
              - uid
              - display_name
              - created
              - updated
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OpenapiWebhookType'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
    post:
      operationId: createRepoWebhook
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateRepoWebhookRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /repos/{repo_ref}/webhooks/{webhook_identifier}:
    delete:
      operationId: deleteRepoWebhook
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_identifier
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
    get:
      operationId: getRepoWebhook
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_identifier
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
    patch:
      operationId: updateRepoWebhook
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_identifier
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateRepoWebhookRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /repos/{repo_ref}/webhooks/{webhook_identifier}/executions:
    get:
      operationId: listRepoWebhookExecutions
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_identifier
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesWebhookExecution'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /repos/{repo_ref}/webhooks/{webhook_identifier}/executions/{webhook_execution_id}:
    get:
      operationId: getRepoWebhookExecution
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_identifier
          required: true
          schema:
            type: integer
        - in: path
          name: webhook_execution_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesWebhookExecution'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /repos/{repo_ref}/webhooks/{webhook_identifier}/executions/{webhook_execution_id}/retrigger:
    post:
      operationId: retriggerRepoWebhookExecution
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_identifier
          required: true
          schema:
            type: integer
        - in: path
          name: webhook_execution_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesWebhookExecution'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /repos/import:
    post:
      operationId: importRepository
      parameters:
        - description: path of parent space (Not needed in standalone).
          in: query
          name: space_path
          required: false
          schema:
            default: false
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                identifier:
                  type: string
                parent_ref:
                  type: string
                pipelines:
                  $ref: '#/components/schemas/ImporterPipelineOption'
                provider:
                  $ref: '#/components/schemas/ImporterProvider'
                provider_repo:
                  type: string
                uid:
                  deprecated: true
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoRepositoryOutput'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /resources/gitignore:
    get:
      operationId: listGitignore
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - resource
  /resources/license:
    get:
      operationId: listLicenses
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - resource
  /secrets:
    post:
      operationId: createSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateSecretRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSecret'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - secret
  /secrets/{secret_ref}:
    delete:
      operationId: deleteSecret
      parameters:
        - in: path
          name: secret_ref
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - secret
    get:
      operationId: findSecret
      parameters:
        - in: path
          name: secret_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSecret'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - secret
    patch:
      operationId: updateSecret
      parameters:
        - in: path
          name: secret_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateSecretRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSecret'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - secret
  /spaces:
    post:
      operationId: createSpace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateSpaceRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceSpaceOutput'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}:
    delete:
      operationId: deleteSpace
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceSoftDeleteResponse'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    get:
      operationId: getSpace
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceSpaceOutput'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    patch:
      operationId: updateSpace
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateSpaceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceSpaceOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/checks/recent:
    get:
      operationId: listStatusCheckRecentSpace
      parameters:
        - description: The substring which is used to filter the status checks by their
            Identifier.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The timestamp (in Unix time millis) since the status checks have
            been run.
          in: query
          name: since
          required: false
          schema:
            type: integer
        - description: The result should include entities from child spaces.
          in: query
          name: recursive
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - status_checks
  /spaces/{space_ref}/connectors:
    get:
      operationId: listConnectors
      parameters:
        - description: The substring which is used to filter the repositories by their
            path name.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesConnector'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/executions:
    get:
      operationId: listSpaceExecutions
      parameters:
        - description: The substring which is used to filter the execution by their
            pipeline names.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The data by which the executions are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: started
            enum:
              - finished
              - started
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The pipeline identifier whose executions are to be returned
          in: query
          name: pipeline_identifier
          required: false
          schema:
            type: string
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesExecution'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/export:
    post:
      operationId: exportSpace
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiExportSpaceRequest'
      responses:
        '202':
          description: Accepted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/export-progress:
    get:
      operationId: exportProgressSpace
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceExportProgressOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/import:
    post:
      operationId: importSpaceRepositories
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiImportRepositoriesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceImportRepositoriesOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/labels:
    get:
      operationId: listSpaceLabels
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The result should inherit entities from parent spaces.
          in: query
          name: inherited
          required: false
          schema:
            default: false
            type: boolean
        - description: The substring which is used to filter the labels by their key.
          in: query
          name: query
          required: false
          schema:
            type: string
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesLabel'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    post:
      operationId: defineSpaceLabel
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                color:
                  $ref: '#/components/schemas/EnumLabelColor'
                description:
                  type: string
                key:
                  type: string
                type:
                  $ref: '#/components/schemas/EnumLabelType'
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesLabel'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    put:
      operationId: saveSpaceLabel
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                label:
                  $ref: '#/components/schemas/TypesSaveLabelInput'
                values:
                  items:
                    $ref: '#/components/schemas/TypesSaveLabelValueInput'
                  type: array
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesLabelWithValues'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/labels/{key}:
    delete:
      operationId: deleteSpaceLabel
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    get:
      operationId: findSpaceLabel
      parameters:
        - description: The result should include label values.
          in: query
          name: include_values
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesLabelWithValues'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    patch:
      operationId: updateSpaceLabel
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                color:
                  $ref: '#/components/schemas/EnumLabelColor'
                description:
                  type: string
                key:
                  type: string
                type:
                  $ref: '#/components/schemas/EnumLabelType'
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesLabel'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/labels/{key}/values:
    get:
      operationId: listSpaceLabelValues
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesLabelValue'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    post:
      operationId: defineSpaceLabelValue
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                color:
                  $ref: '#/components/schemas/EnumLabelColor'
                value:
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesLabelValue'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/labels/{key}/values/{value}:
    delete:
      operationId: deleteSpaceLabelValue
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
        - in: path
          name: value
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    patch:
      operationId: updateSpaceLabelValue
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
        - in: path
          name: value
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                color:
                  $ref: '#/components/schemas/EnumLabelColor'
                value:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesLabelValue'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/members:
    get:
      operationId: membershipList
      parameters:
        - description: The substring by which the space members are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The field by which the space members are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: name
            enum:
              - created
              - name
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesMembershipUser'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    post:
      operationId: membershipAdd
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: '#/components/schemas/EnumMembershipRole'
                user_uid:
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMembershipUser'
          description: Created
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/members/{user_uid}:
    delete:
      operationId: membershipDelete
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: user_uid
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    patch:
      operationId: membershipUpdate
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: user_uid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: '#/components/schemas/EnumMembershipRole'
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMembershipUser'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/move:
    post:
      operationId: moveSpace
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMoveSpaceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceSpaceOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/pipelines:
    get:
      operationId: listSpacePipelines
      parameters:
        - description: The substring which is used to filter the pipelines by their
            names.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The number of last executions to be returned
          in: query
          name: last_executions
          required: false
          schema:
            default: 10
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPipeline'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/public-access:
    post:
      operationId: updateSpacePublicAccess
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateSpacePublicAccessRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceSpaceOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/pullreq:
    get:
      operationId: listSpacePullReq
      parameters:
        - description: The state of the pull requests to include in the result.
          explode: true
          in: query
          name: state
          required: false
          schema:
            items:
              default: open
              enum:
                - closed
                - merged
                - open
              type: string
            type: array
          style: form
        - description: Source repository ref of the pull requests.
          in: query
          name: source_repo_ref
          required: false
          schema:
            type: string
        - description: Source branch of the pull requests.
          in: query
          name: source_branch
          required: false
          schema:
            type: string
        - description: Target branch of the pull requests.
          in: query
          name: target_branch
          required: false
          schema:
            type: string
        - description: The substring by which the pull requests are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: List of principal IDs who created pull requests.
          explode: true
          in: query
          name: created_by
          required: false
          schema:
            items:
              type: integer
            type: array
          style: form
        - description: The result should contain only entries created before this timestamp
            (unix millis).
          in: query
          name: created_lt
          required: false
          schema:
            minimum: 0
            type: integer
        - description: The result should contain only entries created after this timestamp
            (unix millis).
          in: query
          name: created_gt
          required: false
          schema:
            minimum: 0
            type: integer
        - description: The result should contain only entries updated before this timestamp
            (unix millis).
          in: query
          name: updated_lt
          required: false
          schema:
            minimum: 0
            type: integer
        - description: By providing this parameter the description would be excluded
            from the response.
          in: query
          name: exclude_description
          required: false
          schema:
            default: false
            type: boolean
        - description: The result should contain entries from the desired space and
            of its subspaces.
          in: query
          name: include_subspaces
          required: false
          schema:
            default: false
            type: boolean
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: List of label ids used to filter pull requests.
          explode: true
          in: query
          name: label_id
          required: false
          schema:
            items:
              type: integer
            type: array
          style: form
        - description: List of label value ids used to filter pull requests.
          explode: true
          in: query
          name: value_id
          required: false
          schema:
            items:
              type: integer
            type: array
          style: form
        - description: Return only pull requests where this user is the author.
          in: query
          name: author_id
          required: false
          schema:
            type: integer
        - description: Return only pull requests where this user has created at least
            one comment.
          in: query
          name: commenter_id
          required: false
          schema:
            type: integer
        - description: Return only pull requests where this user has been mentioned.
          in: query
          name: mentioned_id
          required: false
          schema:
            type: integer
        - description: Return only pull requests where this user has been added as a
            reviewer.
          in: query
          name: reviewer_id
          required: false
          schema:
            type: integer
        - description: Require only this review decision of the reviewer. Requires reviewer_id
            parameter.
          explode: true
          in: query
          name: review_decision
          required: false
          schema:
            items:
              enum:
                - approved
                - changereq
                - pending
                - reviewed
              type: string
            type: array
          style: form
        - description: If true, the git diff stats would be included in the response.
          in: query
          name: include_git_stats
          required: false
          schema:
            default: false
            type: boolean
        - description: If true, the summary of check for the branch commit SHA would
            be included in the response.
          in: query
          name: include_checks
          required: false
          schema:
            default: false
            type: boolean
        - description: If true, a list of rules that apply to this branch would be included
            in the response.
          in: query
          name: include_rules
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPullReqRepo'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/pullreq/count:
    get:
      operationId: countSpacePullReq
      parameters:
        - description: The state of the pull requests to include in the result.
          explode: true
          in: query
          name: state
          required: false
          schema:
            items:
              default: open
              enum:
                - closed
                - merged
                - open
              type: string
            type: array
          style: form
        - description: Source repository ref of the pull requests.
          in: query
          name: source_repo_ref
          required: false
          schema:
            type: string
        - description: Source branch of the pull requests.
          in: query
          name: source_branch
          required: false
          schema:
            type: string
        - description: Target branch of the pull requests.
          in: query
          name: target_branch
          required: false
          schema:
            type: string
        - description: The substring by which the pull requests are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: List of principal IDs who created pull requests.
          explode: true
          in: query
          name: created_by
          required: false
          schema:
            items:
              type: integer
            type: array
          style: form
        - description: The result should contain only entries created before this timestamp
            (unix millis).
          in: query
          name: created_lt
          required: false
          schema:
            minimum: 0
            type: integer
        - description: The result should contain only entries created after this timestamp
            (unix millis).
          in: query
          name: created_gt
          required: false
          schema:
            minimum: 0
            type: integer
        - description: The result should contain only entries updated before this timestamp
            (unix millis).
          in: query
          name: updated_lt
          required: false
          schema:
            minimum: 0
            type: integer
        - description: The result should contain entries from the desired space and
            of its subspaces.
          in: query
          name: include_subspaces
          required: false
          schema:
            default: false
            type: boolean
        - description: List of label ids used to filter pull requests.
          explode: true
          in: query
          name: label_id
          required: false
          schema:
            items:
              type: integer
            type: array
          style: form
        - description: List of label value ids used to filter pull requests.
          explode: true
          in: query
          name: value_id
          required: false
          schema:
            items:
              type: integer
            type: array
          style: form
        - description: Return only pull requests where this user is the author.
          in: query
          name: author_id
          required: false
          schema:
            type: integer
        - description: Return only pull requests where this user has created at least
            one comment.
          in: query
          name: commenter_id
          required: false
          schema:
            type: integer
        - description: Return only pull requests where this user has been mentioned.
          in: query
          name: mentioned_id
          required: false
          schema:
            type: integer
        - description: Return only pull requests where this user has been added as a
            reviewer.
          in: query
          name: reviewer_id
          required: false
          schema:
            type: integer
        - description: Require only this review decision of the reviewer. Requires reviewer_id
            parameter.
          explode: true
          in: query
          name: review_decision
          required: false
          schema:
            items:
              enum:
                - approved
                - changereq
                - pending
                - reviewed
              type: string
            type: array
          style: form
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: integer
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/purge:
    post:
      operationId: purgeSpace
      parameters:
        - description: The exact time the resource was delete at in epoch format.
          in: query
          name: deleted_at
          required: true
          schema:
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/repos:
    get:
      operationId: listRepos
      parameters:
        - description: The substring which is used to filter the repositories by their
            path name.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The data by which the repositories are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: identifier
            enum:
              - identifier
              - created
              - updated
              - deleted
              - last_git_push
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The result should include entities from child spaces.
          in: query
          name: recursive
          required: false
          schema:
            default: false
            type: boolean
        - description: The result should contain only the favorite entries for the logged
            in user.
          in: query
          name: only_favorites
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RepoRepositoryOutput'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/restore:
    post:
      operationId: restoreSpace
      parameters:
        - description: The exact time the resource was delete at in epoch format.
          in: query
          name: deleted_at
          required: true
          schema:
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiRestoreSpaceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceSpaceOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/rules:
    get:
      operationId: spaceRuleList
      parameters:
        - description: The substring by which the repository protection rules are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The types of rules to include.
          explode: true
          in: query
          name: type
          required: false
          schema:
            items:
              enum:
                - branch
                - tag
                - push
              type: string
            type: array
          style: form
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The field by which the protection rules are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: created_at
            enum:
              - created_at
              - identifier
              - uid
              - updated_at
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The result should inherit entities from parent spaces.
          in: query
          name: inherited
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OpenapiRule'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    post:
      operationId: spaceRuleAdd
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                definition:
                  $ref: '#/components/schemas/OpenapiRuleDefinition'
                description:
                  type: string
                identifier:
                  type: string
                pattern:
                  $ref: '#/components/schemas/ProtectionPattern'
                repo_target:
                  $ref: '#/components/schemas/ProtectionRepoTarget'
                state:
                  $ref: '#/components/schemas/EnumRuleState'
                type:
                  $ref: '#/components/schemas/OpenapiRuleType'
                uid:
                  deprecated: true
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiRule'
          description: Created
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/rules/{rule_identifier}:
    delete:
      operationId: spaceRuleDelete
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: rule_identifier
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    get:
      operationId: spaceRuleGet
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: rule_identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiRule'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    patch:
      operationId: spaceRuleUpdate
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: rule_identifier
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                definition:
                  $ref: '#/components/schemas/OpenapiRuleDefinition'
                description:
                  nullable: true
                  type: string
                identifier:
                  nullable: true
                  type: string
                pattern:
                  $ref: '#/components/schemas/ProtectionPattern'
                repo_target:
                  $ref: '#/components/schemas/ProtectionRepoTarget'
                state:
                  $ref: '#/components/schemas/EnumRuleState'
                type:
                  $ref: '#/components/schemas/OpenapiRuleType'
                uid:
                  deprecated: true
                  nullable: true
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiRule'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/secrets:
    get:
      operationId: listSecrets
      parameters:
        - description: The substring which is used to filter the repositories by their
            path name.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesSecret'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/service-accounts:
    get:
      operationId: listServiceAccounts
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesServiceAccount'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/spaces:
    get:
      operationId: listSpaces
      parameters:
        - description: The substring which is used to filter the spaces by their path
            name.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The data by which the spaces are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: identifier
            enum:
              - identifier
              - created
              - updated
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SpaceSpaceOutput'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/templates:
    get:
      operationId: listTemplates
      parameters:
        - description: The substring which is used to filter the repositories by their
            path name.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesTemplate'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/usage/metric:
    get:
      operationId: getSpaceUsageMetric
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUsageMetric'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/usergroups:
    get:
      operationId: listUsergroups
      parameters:
        - description: The substring which is used to filter usergroups by their identifier.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesUserGroupInfo'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/webhooks:
    get:
      operationId: listSpaceWebhooks
      parameters:
        - description: The substring which is used to filter the webhooks by their identifier.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The data by which the webhooks are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: identifier
            enum:
              - id
              - uid
              - display_name
              - created
              - updated
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OpenapiWebhookType'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
    post:
      operationId: createSpaceWebhook
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateSpaceWebhookRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /spaces/{space_ref}/webhooks/{webhook_identifier}:
    delete:
      operationId: deleteWebhook
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_identifier
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
    get:
      operationId: getSpaceWebhook
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_identifier
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
    patch:
      operationId: updateWebhook
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_identifier
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateSpaceWebhookRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /spaces/{space_ref}/webhooks/{webhook_identifier}/executions:
    get:
      operationId: listSpaceWebhookExecutions
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_identifier
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesWebhookExecution'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /spaces/{space_ref}/webhooks/{webhook_identifier}/executions/{webhook_execution_id}:
    get:
      operationId: getSpaceWebhookExecution
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_identifier
          required: true
          schema:
            type: integer
        - in: path
          name: webhook_execution_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesWebhookExecution'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /spaces/{space_ref}/webhooks/{webhook_identifier}/executions/{webhook_execution_id}/retrigger:
    post:
      operationId: retriggerSpaceWebhookExecution
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_identifier
          required: true
          schema:
            type: integer
        - in: path
          name: webhook_execution_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesWebhookExecution'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /spaces/import:
    post:
      operationId: importSpace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpaceImportInput'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceSpaceOutput'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /system/config:
    get:
      operationId: getSystemConfig
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfigOutput'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - system
  /templates:
    post:
      operationId: createTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateTemplateRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTemplate'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - template
  /templates/{template_ref}:
    delete:
      operationId: deleteTemplate
      parameters:
        - in: path
          name: template_ref
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - template
    get:
      operationId: findTemplate
      parameters:
        - in: path
          name: template_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTemplate'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - template
    patch:
      operationId: updateTemplate
      parameters:
        - in: path
          name: template_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateTemplateRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTemplate'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - template
  /user:
    get:
      operationId: getUser
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
    patch:
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
  /user/favorite:
    post:
      operationId: createFavorite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypesFavoriteResource'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesFavoriteResource'
          description: Created
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
  /user/favorite/{resource_id}:
    delete:
      operationId: deleteFavorite
      parameters:
        - description: The type of the resource to be unfavorited.
          in: query
          name: resource_type
          required: false
          schema:
            enum:
              - CONNECTOR
              - GITSPACE
              - INFRAPROVIDER
              - PIPELINE
              - REGISTRY
              - REPOSITORY
              - SECRET
              - SERVICE
              - SERVICEACCOUNT
              - SPACE
              - TEMPLATE
              - USER
            type: string
        - in: path
          name: resource_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
  /user/keys:
    get:
      operationId: listPublicKey
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The substring which is used to filter the public keys by their
            path identifier.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The data by which the public keys are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: created
            enum:
              - created
              - identifier
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The public key usage.
          in: query
          name: public_key_usage
          required: false
          schema:
            items:
              enum:
                - auth
                - auth_or_sign
                - sign
              type: string
            type: array
        - description: The public key scheme.
          in: query
          name: public_key_scheme
          required: false
          schema:
            items:
              enum:
                - pgp
                - ssh
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPublicKey'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
    post:
      operationId: createPublicKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreatePublicKeyInput'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPublicKey'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
  /user/keys/{public_key_identifier}:
    delete:
      operationId: deletePublicKey
      parameters:
        - in: path
          name: public_key_identifier
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
    patch:
      operationId: updatePublicKey
      parameters:
        - in: path
          name: public_key_identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPublicKey'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
  /user/memberships:
    get:
      operationId: membershipSpaces
      parameters:
        - description: The substring by which the spaces the users is a member of are
            filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: The field by which the spaces the user is a member of are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: identifier
            enum:
              - created
              - identifier
              - uid
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesMembershipSpace'
                type: array
          description: OK
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
  /user/tokens:
    get:
      operationId: listTokens
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesToken'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
    post:
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateTokenInput'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
          description: Created
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
  /user/tokens/{token_identifier}:
    delete:
      operationId: deleteToken
      parameters:
        - in: path
          name: token_identifier
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
components:
  schemas:
    ApiFileDiffRequest:
      properties:
        path:
          type: string
        start_line:
          type: integer
      type: object
    EnumCIStatus:
      enum:
        - blocked
        - declined
        - error
        - failure
        - killed
        - pending
        - running
        - skipped
        - success
        - waiting_on_dependencies
      type: string
    EnumCheckPayloadKind:
      enum:
        - ''
        - markdown
        - pipeline
        - raw
      type: string
    EnumCheckStatus:
      enum:
        - error
        - failure
        - failure_ignored
        - pending
        - running
        - success
      type: string
    EnumConnectorAuthType:
      enum:
        - basic
        - bearer
      type: string
    EnumConnectorStatus:
      enum:
        - failed
        - success
      type: string
    EnumConnectorType:
      enum:
        - github
      type: string
    EnumContentEncodingType:
      enum:
        - base64
        - utf8
      type: string
    EnumFileDiffStatus:
      type: string
    EnumGitSignatureResult:
      enum:
        - bad
        - good
        - invalid
        - key_expired
        - revoked
        - unsupported
        - unverified
      type: string
    EnumGitspaceAccessType:
      enum:
        - jwt_token
        - user_credentials
        - ssh_key
      type: string
    EnumGitspaceActionType:
      enum:
        - start
        - stop
        - reset
      type: string
    EnumGitspaceCodeRepoType:
      enum:
        - github
        - gitlab
        - harness_code
        - bitbucket
        - unknown
        - gitness
        - gitlab_on_prem
        - bitbucket_server
        - github_enterprise
      type: string
    EnumGitspaceEntityType:
      enum:
        - gitspace_config
        - gitspace_instance
      type: string
    EnumGitspaceEventType:
      enum:
        - gitspace_action_start
        - gitspace_action_start_completed
        - gitspace_action_start_failed
        - gitspace_action_stop
        - gitspace_action_stop_completed
        - gitspace_action_stop_failed
        - fetch_devcontainer_start
        - fetch_devcontainer_completed
        - fetch_devcontainer_failed
        - infra_provisioning_start
        - infra_provisioning_completed
        - infra_provisioning_failed
        - infra_stop_start
        - infra_stop_completed
        - infra_stop_failed
        - infra_deprovisioning_start
        - infra_deprovisioning_completed
        - infra_deprovisioning_failed
        - agent_connect_start
        - agent_connect_completed
        - agent_connect_failed
        - agent_gitspace_creation_start
        - agent_gitspace_creation_completed
        - agent_gitspace_creation_failed
        - agent_gitspace_stop_start
        - agent_gitspace_stop_completed
        - agent_gitspace_stop_failed
        - agent_gitspace_deletion_start
        - agent_gitspace_deletion_completed
        - agent_gitspace_deletion_failed
        - agent_gitspace_state_report_running
        - agent_gitspace_state_report_error
        - agent_gitspace_state_report_stopped
        - agent_gitspace_state_report_unknown
        - gitspace_action_auto_stop
        - gitspace_action_reset
        - gitspace_action_reset_completed
        - gitspace_action_reset_failed
      type: string
    EnumGitspaceFilterState:
      enum:
        - error
        - running
        - stopped
      type: string
    EnumGitspaceInstanceStateType:
      enum:
        - running
        - uninitialized
        - unknown
        - error
        - deleted
        - starting
        - stopping
        - cleaning
        - cleaned
        - resetting
        - pending_cleanup
      type: string
    EnumGitspaceOwner:
      enum:
        - all
        - self
      type: string
    EnumGitspaceSort:
      enum:
        - created
        - last_activated
        - last_used
      type: string
    EnumGitspaceStateType:
      enum:
        - running
        - stopped
        - error
        - uninitialized
        - starting
        - stopping
        - cleaning
      type: string
    EnumIDEType:
      enum:
        - vs_code
        - vs_code_web
        - cursor
        - windsurf
        - intellij
        - pycharm
        - goland
        - webstorm
        - clion
        - phpstorm
        - rubymine
        - rider
      type: string
    EnumInfraProviderType:
      enum:
        - docker
        - harness_gcp
        - harness_cloud
        - hybrid_vm_gcp
        - hybrid_vm_aws
      type: string
    EnumLabelColor:
      enum:
        - blue
        - brown
        - cyan
        - green
        - indigo
        - lime
        - mint
        - orange
        - pink
        - purple
        - red
        - violet
        - yellow
      type: string
    EnumLabelType:
      enum:
        - dynamic
        - static
      type: string
    EnumMembershipRole:
      enum:
        - contributor
        - executor
        - reader
        - space_owner
      type: string
    EnumMergeCheckStatus:
      type: string
    EnumMergeMethod:
      enum:
        - fast-forward
        - merge
        - rebase
        - squash
      type: string
    EnumParentResourceType:
      enum:
        - space
        - repo
      type: string
    EnumPrincipalType:
      enum:
        - service
        - serviceaccount
        - user
      type: string
    EnumPublicKeyScheme:
      enum:
        - pgp
        - ssh
      type: string
    EnumPublicKeyUsage:
      enum:
        - auth
        - auth_or_sign
        - sign
      type: string
    EnumPullReqActivityKind:
      enum:
        - change-comment
        - comment
        - system
      type: string
    EnumPullReqActivityType:
      enum:
        - branch-delete
        - branch-restore
        - branch-update
        - code-comment
        - comment
        - label-modify
        - merge
        - review-submit
        - reviewer-add
        - reviewer-delete
        - state-change
        - target-branch-change
        - title-change
        - user-group-reviewer-add
        - user-group-reviewer-delete
      type: string
    EnumPullReqCommentStatus:
      enum:
        - active
        - resolved
      type: string
    EnumPullReqReviewDecision:
      enum:
        - approved
        - changereq
        - pending
        - reviewed
      type: string
    EnumPullReqReviewerType:
      enum:
        - assigned
        - code_owners
        - default
        - requested
        - self_assigned
      type: string
    EnumPullReqState:
      enum:
        - closed
        - merged
        - open
      type: string
    EnumRepoState:
      nullable: true
      type: integer
    EnumResolverType:
      type: string
    EnumResourceType:
      enum:
        - CONNECTOR
        - GITSPACE
        - INFRAPROVIDER
        - PIPELINE
        - REGISTRY
        - REPOSITORY
        - SECRET
        - SERVICE
        - SERVICEACCOUNT
        - SPACE
        - TEMPLATE
        - USER
      type: string
    EnumRevocationReason:
      enum:
        - compromised
        - retired
        - superseded
        - unknown
      nullable: true
      type: string
    EnumRuleState:
      enum:
        - active
        - disabled
        - monitor
      nullable: true
      type: string
    EnumRuleType:
      enum:
        - branch
        - push
        - tag
      type: string
    EnumTokenType:
      type: string
    EnumTriggerAction:
      enum:
        - branch_created
        - branch_updated
        - pullreq_branch_updated
        - pullreq_closed
        - pullreq_created
        - pullreq_merged
        - pullreq_reopened
        - tag_created
        - tag_updated
      type: string
    EnumTriggerEvent:
      enum:
        - cron
        - manual
        - pull_request
        - push
        - tag
      type: string
    EnumWebhookExecutionResult:
      enum:
        - fatal_error
        - retriable_error
        - success
      nullable: true
      type: string
    EnumWebhookParent:
      enum:
        - registry
        - repo
        - space
      type: string
    EnumWebhookTrigger:
      enum:
        - artifact_created
        - artifact_deleted
        - branch_created
        - branch_deleted
        - branch_updated
        - pullreq_branch_updated
        - pullreq_closed
        - pullreq_comment_created
        - pullreq_comment_status_updated
        - pullreq_comment_updated
        - pullreq_created
        - pullreq_label_assigned
        - pullreq_merged
        - pullreq_reopened
        - pullreq_review_submitted
        - pullreq_target_branch_changed
        - pullreq_updated
        - tag_created
        - tag_deleted
        - tag_updated
      type: string
    GitBlamePart:
      properties:
        commit:
          $ref: '#/components/schemas/GitCommit'
        lines:
          items:
            type: string
          nullable: true
          type: array
        previous:
          $ref: '#/components/schemas/GitBlamePartPrevious'
      type: object
    GitBlamePartPrevious:
      properties:
        commit_sha:
          $ref: '#/components/schemas/ShaSHA'
        file_name:
          type: string
      type: object
    GitCommit:
      nullable: true
      properties:
        author:
          $ref: '#/components/schemas/GitSignature'
        committer:
          $ref: '#/components/schemas/GitSignature'
        file_stats:
          items:
            $ref: '#/components/schemas/GitCommitFileStats'
          type: array
        message:
          type: string
        parent_shas:
          items:
            $ref: '#/components/schemas/ShaSHA'
          type: array
        sha:
          $ref: '#/components/schemas/ShaSHA'
        title:
          type: string
      type: object
    GitCommitFileStats:
      type: object
    GitFileAction:
      enum:
        - CREATE
        - UPDATE
        - DELETE
        - MOVE
        - PATCH_TEXT
      type: string
    GitFileDiff:
      properties:
        additions:
          type: integer
        changes:
          type: integer
        deletions:
          type: integer
        is_binary:
          type: boolean
        is_submodule:
          type: boolean
        old_path:
          type: string
        old_sha:
          type: string
        patch:
          items:
            minimum: 0
            type: integer
          type: array
        path:
          type: string
        sha:
          type: string
        status:
          $ref: '#/components/schemas/EnumFileDiffStatus'
      type: object
    GitIdentity:
      nullable: true
      properties:
        email:
          type: string
        name:
          type: string
      type: object
    GitSignature:
      properties:
        identity:
          $ref: '#/components/schemas/GitIdentity'
        when:
          format: date-time
          type: string
      type: object
    ImporterPipelineOption:
      enum:
        - convert
        - ignore
      type: string
    ImporterProvider:
      properties:
        host:
          type: string
        password:
          type: string
        type:
          $ref: '#/components/schemas/ImporterProviderType'
        username:
          type: string
      type: object
    ImporterProviderType:
      enum:
        - github
        - gitlab
        - bitbucket
        - stash
        - gitea
        - gogs
        - azure
      type: string
    JobProgress:
      properties:
        failure:
          type: string
        progress:
          type: integer
        result:
          type: string
        state:
          $ref: '#/components/schemas/JobState'
      type: object
    JobState:
      enum:
        - canceled
        - failed
        - finished
        - running
        - scheduled
      type: string
    LivelogLine:
      properties:
        out:
          type: string
        pos:
          type: integer
        time:
          type: integer
      type: object
    OpenapiActionGitspaceRequest:
      properties:
        action:
          $ref: '#/components/schemas/EnumGitspaceActionType'
      type: object
    OpenapiAdminUsersCreateRequest:
      properties:
        display_name:
          type: string
        email:
          type: string
        password:
          type: string
        uid:
          type: string
      type: object
    OpenapiAdminUsersUpdateRequest:
      properties:
        display_name:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
      type: object
    OpenapiCalculateCommitDivergenceRequest:
      properties:
        max_count:
          type: integer
        requests:
          items:
            $ref: '#/components/schemas/RepoCommitDivergenceRequest'
          nullable: true
          type: array
      type: object
    OpenapiCommentApplySuggestionstRequest:
      properties:
        bypass_rules:
          type: boolean
        dry_run_rules:
          type: boolean
        message:
          type: string
        suggestions:
          items:
            $ref: '#/components/schemas/PullreqSuggestionReference'
          nullable: true
          type: array
        title:
          type: string
      type: object
    OpenapiCommentCreatePullReqRequest:
      properties:
        line_end:
          type: integer
        line_end_new:
          type: boolean
        line_start:
          type: integer
        line_start_new:
          type: boolean
        parent_id:
          type: integer
        path:
          type: string
        source_commit_sha:
          type: string
        target_commit_sha:
          type: string
        text:
          type: string
      type: object
    OpenapiCommentStatusPullReqRequest:
      properties:
        status:
          $ref: '#/components/schemas/EnumPullReqCommentStatus'
      type: object
    OpenapiCommentUpdatePullReqRequest:
      properties:
        text:
          type: string
      type: object
    OpenapiCommitFilesRequest:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/RepoCommitFileAction'
          nullable: true
          type: array
        author:
          $ref: '#/components/schemas/GitIdentity'
        branch:
          type: string
        bypass_rules:
          type: boolean
        dry_run_rules:
          type: boolean
        message:
          type: string
        new_branch:
          type: string
        title:
          type: string
      type: object
    OpenapiContent:
      oneOf:
        - $ref: '#/components/schemas/RepoFileContent'
        - $ref: '#/components/schemas/OpenapiDirContent'
        - $ref: '#/components/schemas/RepoSymlinkContent'
        - $ref: '#/components/schemas/RepoSubmoduleContent'
      type: object
    OpenapiContentInfo:
      properties:
        latest_commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/OpenapiContentType'
      type: object
    OpenapiContentType:
      enum:
        - file
        - dir
        - symlink
        - submodule
      type: string
    OpenapiCreateBranchRequest:
      properties:
        bypass_rules:
          type: boolean
        dry_run_rules:
          type: boolean
        name:
          type: string
        target:
          type: string
      type: object
    OpenapiCreateConnectorRequest:
      properties:
        description:
          type: string
        github:
          $ref: '#/components/schemas/TypesGithubConnectorData'
        identifier:
          type: string
        space_ref:
          type: string
        type:
          $ref: '#/components/schemas/EnumConnectorType'
      type: object
    OpenapiCreateGitspaceRequest:
      properties:
        branch:
          type: string
        code_repo_ref:
          nullable: true
          type: string
        code_repo_type:
          $ref: '#/components/schemas/EnumGitspaceCodeRepoType'
        code_repo_url:
          type: string
        devcontainer_path:
          nullable: true
          type: string
        ide:
          $ref: '#/components/schemas/EnumIDEType'
        identifier:
          type: string
        infra_provider_config_identifier:
          type: string
        metadata:
          additionalProperties:
            type: string
          nullable: true
          type: object
        name:
          type: string
        resource_identifier:
          type: string
        resource_space_ref:
          type: string
        space_ref:
          type: string
        ssh_token_identifier:
          type: string
      type: object
    OpenapiCreateInfraProviderConfigRequest:
      properties:
        identifier:
          type: string
        metadata:
          additionalProperties: {}
          nullable: true
          type: object
        name:
          type: string
        space_ref:
          type: string
        type:
          $ref: '#/components/schemas/EnumInfraProviderType'
      type: object
    OpenapiCreatePipelineRequest:
      properties:
        config_path:
          type: string
        default_branch:
          type: string
        description:
          type: string
        disabled:
          type: boolean
        identifier:
          type: string
        uid:
          deprecated: true
          type: string
      type: object
    OpenapiCreatePullReqRequest:
      properties:
        bypass_rules:
          type: boolean
        description:
          type: string
        is_draft:
          type: boolean
        labels:
          items:
            $ref: '#/components/schemas/TypesPullReqLabelAssignInput'
          nullable: true
          type: array
        reviewer_ids:
          items:
            type: integer
          nullable: true
          type: array
        source_branch:
          type: string
        source_repo_ref:
          type: string
        target_branch:
          type: string
        title:
          type: string
        user_group_reviewer_ids:
          items:
            type: integer
          nullable: true
          type: array
      type: object
    OpenapiCreateRepoWebhookRequest:
      properties:
        description:
          type: string
        display_name:
          type: string
        enabled:
          type: boolean
        identifier:
          type: string
        insecure:
          type: boolean
        secret:
          type: string
        triggers:
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
          nullable: true
          type: array
        uid:
          deprecated: true
          type: string
        url:
          type: string
      type: object
    OpenapiCreateRepositoryRequest:
      properties:
        default_branch:
          type: string
        description:
          type: string
        fork_id:
          type: integer
        git_ignore:
          type: string
        identifier:
          type: string
        is_public:
          type: boolean
        license:
          type: string
        parent_ref:
          type: string
        readme:
          type: boolean
        uid:
          deprecated: true
          type: string
      type: object
    OpenapiCreateSecretRequest:
      properties:
        data:
          type: string
        description:
          type: string
        identifier:
          type: string
        space_ref:
          type: string
        uid:
          deprecated: true
          type: string
      type: object
    OpenapiCreateSpaceRequest:
      properties:
        description:
          type: string
        identifier:
          type: string
        is_public:
          type: boolean
        parent_ref:
          type: string
        uid:
          deprecated: true
          type: string
      type: object
    OpenapiCreateSpaceWebhookRequest:
      properties:
        description:
          type: string
        display_name:
          type: string
        enabled:
          type: boolean
        identifier:
          type: string
        insecure:
          type: boolean
        secret:
          type: string
        triggers:
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
          nullable: true
          type: array
        uid:
          deprecated: true
          type: string
        url:
          type: string
      type: object
    OpenapiCreateTagRequest:
      properties:
        bypass_rules:
          type: boolean
        dry_run_rules:
          type: boolean
        message:
          type: string
        name:
          type: string
        target:
          type: string
      type: object
    OpenapiCreateTemplateRequest:
      properties:
        data:
          type: string
        description:
          type: string
        identifier:
          type: string
        space_ref:
          type: string
        uid:
          deprecated: true
          type: string
      type: object
    OpenapiCreateTriggerRequest:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/EnumTriggerAction'
          nullable: true
          type: array
        description:
          type: string
        disabled:
          type: boolean
        identifier:
          type: string
        secret:
          type: string
        uid:
          deprecated: true
          type: string
      type: object
    OpenapiDirContent:
      properties:
        entries:
          items:
            $ref: '#/components/schemas/OpenapiContentInfo'
          nullable: true
          type: array
      type: object
    OpenapiExportSpaceRequest:
      properties:
        account_id:
          type: string
        org_identifier:
          type: string
        project_identifier:
          type: string
        token:
          type: string
      type: object
    OpenapiFileViewAddPullReqRequest:
      properties:
        commit_sha:
          type: string
        path:
          type: string
      type: object
    OpenapiGeneralSettingsRequest:
      properties:
        file_size_limit:
          description: file size limit in bytes
          nullable: true
          type: integer
        git_lfs_enabled:
          nullable: true
          type: boolean
      type: object
    OpenapiGetContentOutput:
      properties:
        content:
          $ref: '#/components/schemas/OpenapiContent'
        latest_commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/OpenapiContentType'
      type: object
    OpenapiImportRepositoriesRequest:
      properties:
        pipelines:
          $ref: '#/components/schemas/ImporterPipelineOption'
        provider:
          $ref: '#/components/schemas/ImporterProvider'
        provider_space:
          type: string
      type: object
    OpenapiLoginRequest:
      properties:
        login_identifier:
          type: string
        password:
          type: string
      type: object
    OpenapiLookupRepoGitspaceRequest:
      properties:
        repo_type:
          $ref: '#/components/schemas/EnumGitspaceCodeRepoType'
        space_ref:
          type: string
        url:
          type: string
      type: object
    OpenapiMergePullReq:
      properties:
        bypass_rules:
          type: boolean
        delete_source_branch:
          type: boolean
        dry_run:
          type: boolean
        dry_run_rules:
          type: boolean
        message:
          type: string
        method:
          $ref: '#/components/schemas/EnumMergeMethod'
        source_sha:
          type: string
        title:
          type: string
      type: object
    OpenapiMoveRepoRequest:
      properties:
        identifier:
          nullable: true
          type: string
        parent_ref:
          nullable: true
          type: string
        uid:
          deprecated: true
          nullable: true
          type: string
      type: object
    OpenapiMoveSpaceRequest:
      properties:
        identifier:
          nullable: true
          type: string
        uid:
          deprecated: true
          nullable: true
          type: string
      type: object
    OpenapiPathsDetailsRequest:
      properties:
        paths:
          items:
            type: string
          nullable: true
          type: array
      type: object
    OpenapiPostRawDiffRequest:
      items:
        $ref: '#/components/schemas/ApiFileDiffRequest'
      nullable: true
      type: array
    OpenapiPostRawPRDiffRequest:
      items:
        $ref: '#/components/schemas/ApiFileDiffRequest'
      nullable: true
      type: array
    OpenapiPullReqAssignLabelInput:
      properties:
        label_id:
          type: integer
        value:
          type: string
        value_id:
          nullable: true
          type: integer
      type: object
    OpenapiRegisterRequest:
      properties:
        display_name:
          type: string
        email:
          type: string
        password:
          type: string
        uid:
          type: string
      type: object
    OpenapiRestoreRequest:
      properties:
        new_identifier:
          nullable: true
          type: string
        new_parent_ref:
          nullable: true
          type: string
      type: object
    OpenapiRestoreSpaceRequest:
      properties:
        new_identifier:
          nullable: true
          type: string
        new_parent_ref:
          nullable: true
          type: string
      type: object
    OpenapiReviewSubmitPullReqRequest:
      properties:
        commit_sha:
          type: string
        decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
      type: object
    OpenapiReviewerAddPullReqRequest:
      properties:
        reviewer_id:
          type: integer
      type: object
    OpenapiRule:
      properties:
        created:
          type: integer
        created_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        definition:
          $ref: '#/components/schemas/OpenapiRuleDefinition'
        description:
          type: string
        identifier:
          type: string
        pattern:
          $ref: '#/components/schemas/ProtectionPattern'
        repo_target:
          $ref: '#/components/schemas/ProtectionRepoTarget'
        repositories:
          additionalProperties:
            $ref: '#/components/schemas/TypesRepositoryCore'
          nullable: true
          type: object
        scope:
          type: integer
        state:
          $ref: '#/components/schemas/EnumRuleState'
        type:
          $ref: '#/components/schemas/OpenapiRuleType'
        updated:
          type: integer
        user_groups:
          additionalProperties:
            $ref: '#/components/schemas/TypesUserGroupInfo'
          nullable: true
          type: object
        users:
          additionalProperties:
            $ref: '#/components/schemas/TypesPrincipalInfo'
          nullable: true
          type: object
      type: object
    OpenapiRuleDefinition:
      oneOf:
        - $ref: '#/components/schemas/ProtectionBranch'
        - $ref: '#/components/schemas/ProtectionTag'
        - $ref: '#/components/schemas/ProtectionPush'
      type: object
    OpenapiRuleType:
      enum:
        - branch
        - tag
        - push
      type: string
    OpenapiSecuritySettingsRequest:
      properties:
        principal_committer_match:
          nullable: true
          type: boolean
        secret_scanning_enabled:
          nullable: true
          type: boolean
      type: object
    OpenapiStatePullReqRequest:
      properties:
        is_draft:
          type: boolean
        state:
          $ref: '#/components/schemas/EnumPullReqState'
      type: object
    OpenapiUpdateAdminRequest:
      properties:
        admin:
          type: boolean
      type: object
    OpenapiUpdateConnectorRequest:
      properties:
        description:
          nullable: true
          type: string
        identifier:
          nullable: true
          type: string
      type: object
    OpenapiUpdateDefaultBranchRequest:
      properties:
        name:
          type: string
      type: object
    OpenapiUpdatePipelineRequest:
      properties:
        config_path:
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        disabled:
          nullable: true
          type: boolean
        identifier:
          nullable: true
          type: string
        uid:
          deprecated: true
          nullable: true
          type: string
      type: object
    OpenapiUpdatePullReqRequest:
      properties:
        description:
          type: string
        title:
          type: string
      type: object
    OpenapiUpdateRepoPublicAccessRequest:
      properties:
        is_public:
          type: boolean
      type: object
    OpenapiUpdateRepoRequest:
      properties:
        description:
          nullable: true
          type: string
        state:
          $ref: '#/components/schemas/EnumRepoState'
      type: object
    OpenapiUpdateRepoWebhookRequest:
      properties:
        description:
          nullable: true
          type: string
        display_name:
          nullable: true
          type: string
        enabled:
          nullable: true
          type: boolean
        identifier:
          nullable: true
          type: string
        insecure:
          nullable: true
          type: boolean
        secret:
          nullable: true
          type: string
        triggers:
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
          nullable: true
          type: array
        uid:
          deprecated: true
          nullable: true
          type: string
        url:
          nullable: true
          type: string
      type: object
    OpenapiUpdateSecretRequest:
      properties:
        data:
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        identifier:
          nullable: true
          type: string
        uid:
          deprecated: true
          nullable: true
          type: string
      type: object
    OpenapiUpdateSpacePublicAccessRequest:
      properties:
        is_public:
          type: boolean
      type: object
    OpenapiUpdateSpaceRequest:
      properties:
        description:
          nullable: true
          type: string
      type: object
    OpenapiUpdateSpaceWebhookRequest:
      properties:
        description:
          nullable: true
          type: string
        display_name:
          nullable: true
          type: string
        enabled:
          nullable: true
          type: boolean
        identifier:
          nullable: true
          type: string
        insecure:
          nullable: true
          type: boolean
        secret:
          nullable: true
          type: string
        triggers:
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
          nullable: true
          type: array
        uid:
          deprecated: true
          nullable: true
          type: string
        url:
          nullable: true
          type: string
      type: object
    OpenapiUpdateTemplateRequest:
      properties:
        data:
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        identifier:
          nullable: true
          type: string
        uid:
          deprecated: true
          nullable: true
          type: string
      type: object
    OpenapiUpdateTriggerRequest:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/EnumTriggerAction'
          nullable: true
          type: array
        description:
          nullable: true
          type: string
        disabled:
          nullable: true
          type: boolean
        identifier:
          nullable: true
          type: string
        secret:
          nullable: true
          type: string
        uid:
          deprecated: true
          nullable: true
          type: string
      type: object
    OpenapiUserGroupReviewerAddRequest:
      properties:
        usergroup_id:
          type: integer
      type: object
    OpenapiWebhookType:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        display_name:
          type: string
        enabled:
          type: boolean
        has_secret:
          type: boolean
        id:
          type: integer
        identifier:
          type: string
        insecure:
          type: boolean
        latest_execution_result:
          $ref: '#/components/schemas/EnumWebhookExecutionResult'
        parent_id:
          type: integer
        parent_type:
          $ref: '#/components/schemas/EnumWebhookParent'
        scope:
          type: integer
        triggers:
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
          nullable: true
          type: array
        updated:
          type: integer
        url:
          type: string
        version:
          type: integer
      type: object
    ProtectionBranch:
      properties:
        bypass:
          $ref: '#/components/schemas/ProtectionDefBypass'
        lifecycle:
          $ref: '#/components/schemas/ProtectionDefBranchLifecycle'
        pullreq:
          $ref: '#/components/schemas/ProtectionDefPullReq'
      type: object
    ProtectionDefApprovals:
      properties:
        require_code_owners:
          type: boolean
        require_latest_commit:
          type: boolean
        require_minimum_count:
          type: integer
        require_minimum_default_reviewer_count:
          type: integer
        require_no_change_request:
          type: boolean
      type: object
    ProtectionDefBranchLifecycle:
      properties:
        create_forbidden:
          type: boolean
        delete_forbidden:
          type: boolean
        update_forbidden:
          type: boolean
        update_force_forbidden:
          type: boolean
      type: object
    ProtectionDefBypass:
      properties:
        repo_owners:
          type: boolean
        user_group_ids:
          items:
            type: integer
          type: array
        user_ids:
          items:
            type: integer
          type: array
      type: object
    ProtectionDefComments:
      properties:
        require_resolve_all:
          type: boolean
      type: object
    ProtectionDefMerge:
      properties:
        block:
          type: boolean
        delete_branch:
          type: boolean
        strategies_allowed:
          items:
            $ref: '#/components/schemas/EnumMergeMethod'
          type: array
      type: object
    ProtectionDefPullReq:
      properties:
        approvals:
          $ref: '#/components/schemas/ProtectionDefApprovals'
        comments:
          $ref: '#/components/schemas/ProtectionDefComments'
        merge:
          $ref: '#/components/schemas/ProtectionDefMerge'
        reviewers:
          $ref: '#/components/schemas/ProtectionDefReviewers'
        status_checks:
          $ref: '#/components/schemas/ProtectionDefStatusChecks'
      type: object
    ProtectionDefPush:
      properties:
        file_size_limit:
          type: integer
        principal_committer_match:
          type: boolean
        secret_scanning_enabled:
          type: boolean
      type: object
    ProtectionDefReviewers:
      properties:
        default_reviewer_ids:
          items:
            type: integer
          type: array
        default_user_group_reviewer_ids:
          items:
            type: integer
          type: array
        request_code_owners:
          type: boolean
      type: object
    ProtectionDefStatusChecks:
      properties:
        require_identifiers:
          items:
            type: string
          type: array
      type: object
    ProtectionDefTagLifecycle:
      properties:
        create_forbidden:
          type: boolean
        delete_forbidden:
          type: boolean
        update_force_forbidden:
          type: boolean
      type: object
    ProtectionPattern:
      nullable: true
      properties:
        default:
          type: boolean
        exclude:
          items:
            type: string
          type: array
        include:
          items:
            type: string
          type: array
      type: object
    ProtectionPush:
      properties:
        bypass:
          $ref: '#/components/schemas/ProtectionDefBypass'
        push:
          $ref: '#/components/schemas/ProtectionDefPush'
      type: object
    ProtectionRepoTarget:
      nullable: true
      properties:
        exclude:
          $ref: '#/components/schemas/ProtectionRepoTargetFilter'
        include:
          $ref: '#/components/schemas/ProtectionRepoTargetFilter'
      type: object
    ProtectionRepoTargetFilter:
      properties:
        ids:
          items:
            type: integer
          type: array
        patterns:
          items:
            type: string
          type: array
      type: object
    ProtectionTag:
      properties:
        bypass:
          $ref: '#/components/schemas/ProtectionDefBypass'
        lifecycle:
          $ref: '#/components/schemas/ProtectionDefTagLifecycle'
      type: object
    PullreqCombinedListResponse:
      properties:
        reviewers:
          items:
            $ref: '#/components/schemas/TypesPullReqReviewer'
          type: array
        user_group_reviewers:
          items:
            $ref: '#/components/schemas/TypesUserGroupReviewer'
          type: array
      type: object
    PullreqCommentApplySuggestionsOutput:
      properties:
        commit_id:
          type: string
        dry_run_rules:
          type: boolean
        rule_violations:
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
          type: array
      type: object
    PullreqSuggestionReference:
      properties:
        check_sum:
          type: string
        comment_id:
          type: integer
      type: object
    RepoCommitDivergenceRequest:
      properties:
        from:
          type: string
        to:
          type: string
      type: object
    RepoCommitFileAction:
      properties:
        action:
          $ref: '#/components/schemas/GitFileAction'
        encoding:
          $ref: '#/components/schemas/EnumContentEncodingType'
        path:
          type: string
        payload:
          type: string
        sha:
          $ref: '#/components/schemas/ShaSHA'
      type: object
    RepoContent: {}
    RepoContentInfo:
      properties:
        latest_commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/RepoContentType'
      type: object
    RepoContentType:
      type: string
    RepoFileContent:
      properties:
        data:
          type: string
        data_size:
          type: integer
        encoding:
          $ref: '#/components/schemas/EnumContentEncodingType'
        lfs_object_id:
          type: string
        lfs_object_size:
          type: integer
        size:
          type: integer
      type: object
    RepoListPathsOutput:
      properties:
        directories:
          items:
            type: string
          type: array
        files:
          items:
            type: string
          type: array
      type: object
    RepoMergeCheck:
      properties:
        conflict_files:
          items:
            type: string
          type: array
        mergeable:
          type: boolean
      type: object
    RepoPathsDetailsOutput:
      properties:
        details:
          items:
            $ref: '#/components/schemas/TypesPathDetails'
          nullable: true
          type: array
      type: object
    RepoRepositoryOutput:
      properties:
        archived:
          type: boolean
        created:
          type: integer
        created_by:
          type: integer
        default_branch:
          type: string
        deleted:
          nullable: true
          type: integer
        description:
          type: string
        fork_id:
          type: integer
        git_ssh_url:
          type: string
        git_url:
          type: string
        id:
          type: integer
        identifier:
          type: string
        importing:
          type: boolean
        is_empty:
          type: boolean
        is_favorite:
          type: boolean
        is_public:
          type: boolean
        last_git_push:
          type: integer
        num_closed_pulls:
          type: integer
        num_forks:
          type: integer
        num_merged_pulls:
          type: integer
        num_open_pulls:
          type: integer
        num_pulls:
          type: integer
        parent_id:
          type: integer
        path:
          type: string
        size:
          description: size of the repository in KiB
          type: integer
        size_lfs:
          description: size of the repository LFS in KiB
          type: integer
        size_updated:
          type: integer
        state:
          $ref: '#/components/schemas/EnumRepoState'
        updated:
          type: integer
      type: object
    RepoSoftDeleteResponse:
      properties:
        deleted_at:
          type: integer
      type: object
    RepoSubmoduleContent:
      properties:
        commit_sha:
          type: string
        url:
          type: string
      type: object
    RepoSymlinkContent:
      properties:
        size:
          type: integer
        target:
          type: string
      type: object
    ReposettingsGeneralSettings:
      properties:
        file_size_limit:
          description: file size limit in bytes
          nullable: true
          type: integer
        git_lfs_enabled:
          nullable: true
          type: boolean
      type: object
    ReposettingsSecuritySettings:
      properties:
        principal_committer_match:
          nullable: true
          type: boolean
        secret_scanning_enabled:
          nullable: true
          type: boolean
      type: object
    ScmCodeRepositoryResponse:
      properties:
        branch:
          type: string
        is_private:
          type: boolean
        url:
          type: string
      type: object
    ShaSHA:
      description: Git object hash
      type: string
    SpaceExportProgressOutput:
      properties:
        repos:
          items:
            $ref: '#/components/schemas/JobProgress'
          nullable: true
          type: array
      type: object
    SpaceImportInput:
      properties:
        description:
          type: string
        identifier:
          type: string
        is_public:
          type: boolean
        parent_ref:
          type: string
        pipelines:
          $ref: '#/components/schemas/ImporterPipelineOption'
        provider:
          $ref: '#/components/schemas/ImporterProvider'
        provider_space:
          type: string
        uid:
          deprecated: true
          type: string
      type: object
    SpaceImportRepositoriesOutput:
      properties:
        importing_repos:
          items:
            $ref: '#/components/schemas/RepoRepositoryOutput'
          nullable: true
          type: array
      type: object
    SpaceSoftDeleteResponse:
      properties:
        deleted_at:
          type: integer
      type: object
    SpaceSpaceOutput:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        deleted:
          nullable: true
          type: integer
        description:
          type: string
        id:
          type: integer
        identifier:
          type: string
        is_public:
          type: boolean
        parent_id:
          type: integer
        path:
          type: string
        updated:
          type: integer
      type: object
    SystemConfigOutput:
      properties:
        artifact_registry_enabled:
          type: boolean
        gitspace_enabled:
          type: boolean
        public_resource_creation_enabled:
          type: boolean
        ssh_enabled:
          type: boolean
        ui:
          $ref: '#/components/schemas/SystemUI'
        user_signup_allowed:
          type: boolean
      type: object
    SystemUI:
      properties:
        show_plugin:
          type: boolean
      type: object
    TimeDuration:
      nullable: true
      type: integer
    TypesBasicAuthCreds:
      properties:
        password:
          $ref: '#/components/schemas/TypesSecretRef'
        username:
          type: string
      type: object
    TypesBearerTokenCreds:
      properties:
        token:
          $ref: '#/components/schemas/TypesSecretRef'
      type: object
    TypesBranchExtended:
      properties:
        check_summary:
          $ref: '#/components/schemas/TypesCheckCountSummary'
        commit:
          $ref: '#/components/schemas/TypesCommit'
        commit_divergence:
          $ref: '#/components/schemas/TypesCommitDivergence'
        is_default:
          type: boolean
        name:
          type: string
        pull_requests:
          items:
            $ref: '#/components/schemas/TypesPullReq'
          type: array
        rules:
          items:
            $ref: '#/components/schemas/TypesRuleInfo'
          type: array
        sha:
          $ref: '#/components/schemas/ShaSHA'
      type: object
    TypesBranchTable:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        last_created_pull_req_id:
          nullable: true
          type: integer
        name:
          type: string
        updated:
          type: integer
        updated_by:
          type: integer
      type: object
    TypesChangeStats:
      properties:
        changes:
          type: integer
        deletions:
          type: integer
        insertions:
          type: integer
      type: object
    TypesCheck:
      properties:
        created:
          type: integer
        ended:
          type: integer
        id:
          type: integer
        identifier:
          type: string
        link:
          type: string
        metadata: {}
        payload:
          $ref: '#/components/schemas/TypesCheckPayload'
        reported_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        started:
          type: integer
        status:
          $ref: '#/components/schemas/EnumCheckStatus'
        summary:
          type: string
        updated:
          type: integer
      type: object
    TypesCheckCountSummary:
      properties:
        error:
          type: integer
        failure:
          type: integer
        pending:
          type: integer
        running:
          type: integer
        success:
          type: integer
      type: object
    TypesCheckPayload:
      properties:
        data: {}
        kind:
          $ref: '#/components/schemas/EnumCheckPayloadKind'
        version:
          type: string
      type: object
    TypesCodeCommentFields:
      properties:
        line_new:
          type: integer
        line_old:
          type: integer
        merge_base_sha:
          type: string
        outdated:
          type: boolean
        path:
          type: string
        source_sha:
          type: string
        span_new:
          type: integer
        span_old:
          type: integer
      type: object
    TypesCodeOwnerEvaluation:
      properties:
        evaluation_entries:
          items:
            $ref: '#/components/schemas/TypesCodeOwnerEvaluationEntry'
          nullable: true
          type: array
        file_sha:
          type: string
      type: object
    TypesCodeOwnerEvaluationEntry:
      properties:
        line_number:
          type: integer
        owner_evaluations:
          items:
            $ref: '#/components/schemas/TypesOwnerEvaluation'
          nullable: true
          type: array
        pattern:
          type: string
        user_group_owner_evaluations:
          items:
            $ref: '#/components/schemas/TypesUserGroupOwnerEvaluation'
          nullable: true
          type: array
      type: object
    TypesCommit:
      properties:
        author:
          $ref: '#/components/schemas/TypesSignature'
        committer:
          $ref: '#/components/schemas/TypesSignature'
        message:
          type: string
        parent_shas:
          items:
            $ref: '#/components/schemas/ShaSHA'
          type: array
        sha:
          $ref: '#/components/schemas/ShaSHA'
        signature:
          $ref: '#/components/schemas/TypesGitSignatureResult'
        stats:
          $ref: '#/components/schemas/TypesCommitStats'
        title:
          type: string
      type: object
    TypesCommitDivergence:
      properties:
        ahead:
          type: integer
        behind:
          type: integer
      type: object
    TypesCommitFileStats:
      properties:
        changes:
          type: integer
        deletions:
          type: integer
        insertions:
          type: integer
        old_path:
          type: string
        path:
          type: string
        status:
          $ref: '#/components/schemas/EnumFileDiffStatus'
      type: object
    TypesCommitFilesResponse:
      properties:
        changed_files:
          items:
            $ref: '#/components/schemas/TypesFileReference'
          nullable: true
          type: array
        commit_id:
          $ref: '#/components/schemas/ShaSHA'
        dry_run_rules:
          type: boolean
        rule_violations:
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
          type: array
      type: object
    TypesCommitStats:
      properties:
        files:
          items:
            $ref: '#/components/schemas/TypesCommitFileStats'
          type: array
        total:
          $ref: '#/components/schemas/TypesChangeStats'
      type: object
    TypesCommitTag:
      properties:
        commit:
          $ref: '#/components/schemas/TypesCommit'
        is_annotated:
          type: boolean
        message:
          type: string
        name:
          type: string
        sha:
          $ref: '#/components/schemas/ShaSHA'
        signature:
          $ref: '#/components/schemas/TypesGitSignatureResult'
        tagger:
          $ref: '#/components/schemas/TypesSignature'
        title:
          type: string
      type: object
    TypesConnector:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        github:
          $ref: '#/components/schemas/TypesGithubConnectorData'
        identifier:
          type: string
        last_test_attempt:
          type: integer
        last_test_error_msg:
          type: string
        last_test_status:
          $ref: '#/components/schemas/EnumConnectorStatus'
        space_id:
          type: integer
        type:
          $ref: '#/components/schemas/EnumConnectorType'
        updated:
          type: integer
      type: object
    TypesConnectorAuth:
      nullable: true
      properties:
        basic:
          $ref: '#/components/schemas/TypesBasicAuthCreds'
        bearer:
          $ref: '#/components/schemas/TypesBearerTokenCreds'
        type:
          $ref: '#/components/schemas/EnumConnectorAuthType'
      type: object
    TypesConnectorTestResponse:
      properties:
        error_msg:
          type: string
        status:
          $ref: '#/components/schemas/EnumConnectorStatus'
      type: object
    TypesCreateBranchOutput:
      properties:
        commit:
          $ref: '#/components/schemas/TypesCommit'
        dry_run_rules:
          type: boolean
        name:
          type: string
        rule_violations:
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
          type: array
        sha:
          $ref: '#/components/schemas/ShaSHA'
      type: object
    TypesCreateCommitTagOutput:
      properties:
        commit:
          $ref: '#/components/schemas/TypesCommit'
        dry_run_rules:
          type: boolean
        is_annotated:
          type: boolean
        message:
          type: string
        name:
          type: string
        rule_violations:
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
          type: array
        sha:
          $ref: '#/components/schemas/ShaSHA'
        signature:
          $ref: '#/components/schemas/TypesGitSignatureResult'
        tagger:
          $ref: '#/components/schemas/TypesSignature'
        title:
          type: string
      type: object
    TypesDefaultReviewerApprovalsResponse:
      properties:
        current_count:
          type: integer
        evaluations:
          items:
            $ref: '#/components/schemas/TypesReviewerEvaluation'
          nullable: true
          type: array
        minimum_required_count:
          type: integer
        minimum_required_count_latest:
          type: integer
        principals:
          items:
            $ref: '#/components/schemas/TypesPrincipalInfo'
          nullable: true
          type: array
        user_groups:
          items:
            $ref: '#/components/schemas/TypesUserGroupInfo'
          nullable: true
          type: array
      type: object
    TypesDeleteBranchOutput:
      properties:
        dry_run_rules:
          type: boolean
        rule_violations:
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
          type: array
      type: object
    TypesDeleteCommitTagOutput:
      properties:
        dry_run_rules:
          type: boolean
        rule_violations:
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
          type: array
      type: object
    TypesDiffStats:
      properties:
        additions:
          nullable: true
          type: integer
        commits:
          nullable: true
          type: integer
        deletions:
          nullable: true
          type: integer
        files_changed:
          nullable: true
          type: integer
      type: object
    TypesExecution:
      properties:
        action:
          $ref: '#/components/schemas/EnumTriggerAction'
        after:
          type: string
        author_avatar:
          type: string
        author_email:
          type: string
        author_login:
          type: string
        author_name:
          type: string
        before:
          type: string
        created:
          type: integer
        created_by:
          type: integer
        cron:
          type: string
        debug:
          type: boolean
        deploy_id:
          type: integer
        deploy_to:
          type: string
        error:
          type: string
        event:
          $ref: '#/components/schemas/EnumTriggerEvent'
        finished:
          type: integer
        link:
          type: string
        message:
          type: string
        number:
          type: integer
        params:
          additionalProperties:
            type: string
          type: object
        parent:
          type: integer
        pipeline_id:
          type: integer
        pipeline_uid:
          type: string
        ref:
          type: string
        repo_id:
          type: integer
        repo_uid:
          type: string
        sender:
          type: string
        source:
          type: string
        source_repo:
          type: string
        stages:
          items:
            $ref: '#/components/schemas/TypesStage'
          type: array
        started:
          type: integer
        status:
          $ref: '#/components/schemas/EnumCIStatus'
        target:
          type: string
        timestamp:
          type: integer
        title:
          type: string
        trigger:
          type: string
        updated:
          type: integer
      type: object
    TypesExecutionInfo:
      properties:
        created_by:
          type: integer
        event:
          $ref: '#/components/schemas/EnumTriggerEvent'
        finished:
          type: integer
        number:
          type: integer
        pipeline_id:
          type: integer
        started:
          type: integer
        status:
          $ref: '#/components/schemas/EnumCIStatus'
        trigger:
          type: string
      type: object
    TypesFavoriteResource:
      properties:
        resource_id:
          type: integer
        resource_type:
          $ref: '#/components/schemas/EnumResourceType'
      type: object
    TypesFileReference:
      properties:
        blob_sha:
          $ref: '#/components/schemas/ShaSHA'
        path:
          type: string
      type: object
    TypesGitSignatureResult:
      nullable: true
      properties:
        created:
          type: integer
        key_fingerprint:
          type: string
        key_id:
          type: string
        key_scheme:
          $ref: '#/components/schemas/EnumPublicKeyScheme'
        result:
          $ref: '#/components/schemas/EnumGitSignatureResult'
        updated:
          type: integer
      type: object
    TypesGithubConnectorData:
      properties:
        api_url:
          type: string
        auth:
          $ref: '#/components/schemas/TypesConnectorAuth'
        insecure:
          type: boolean
      type: object
    TypesGitspaceConfig:
      properties:
        branch:
          type: string
        branch_url:
          type: string
        code_repo_is_private:
          type: boolean
        code_repo_ref:
          nullable: true
          type: string
        code_repo_type:
          $ref: '#/components/schemas/EnumGitspaceCodeRepoType'
        code_repo_url:
          type: string
        created:
          type: integer
        devcontainer_path:
          nullable: true
          type: string
        ide:
          $ref: '#/components/schemas/EnumIDEType'
        identifier:
          type: string
        initialize_log_key:
          type: string
        instance:
          $ref: '#/components/schemas/TypesGitspaceInstance'
        is_marked_for_infra_reset:
          type: boolean
        is_marked_for_reset:
          type: boolean
        log_key:
          type: string
        name:
          type: string
        resource:
          $ref: '#/components/schemas/TypesInfraProviderResource'
        space_path:
          type: string
        ssh_token_identifier:
          type: string
        state:
          $ref: '#/components/schemas/EnumGitspaceStateType'
        updated:
          type: integer
        user_display_name:
          type: string
        user_email:
          type: string
        user_id:
          type: string
      type: object
    TypesGitspaceEventResponse:
      properties:
        created:
          type: integer
        entity_type:
          $ref: '#/components/schemas/EnumGitspaceEntityType'
        event:
          $ref: '#/components/schemas/EnumGitspaceEventType'
        event_time:
          type: string
        message:
          type: string
        query_key:
          type: string
        timestamp:
          type: integer
      type: object
    TypesGitspaceInstance:
      nullable: true
      properties:
        access_key:
          nullable: true
          type: string
        access_key_ref:
          nullable: true
          type: string
        access_type:
          $ref: '#/components/schemas/EnumGitspaceAccessType'
        active_time_ended:
          nullable: true
          type: integer
        active_time_started:
          nullable: true
          type: integer
        created:
          type: integer
        error_message:
          nullable: true
          type: string
        has_git_changes:
          nullable: true
          type: boolean
        identifier:
          type: string
        last_heartbeat:
          nullable: true
          type: integer
        last_used:
          nullable: true
          type: integer
        machine_user:
          nullable: true
          type: string
        plugin_url:
          nullable: true
          type: string
        resource_usage:
          nullable: true
          type: string
        space_path:
          type: string
        ssh_command:
          nullable: true
          type: string
        state:
          $ref: '#/components/schemas/EnumGitspaceInstanceStateType'
        total_time_used:
          type: integer
        updated:
          type: integer
        url:
          nullable: true
          type: string
      type: object
    TypesIdentity:
      properties:
        email:
          type: string
        name:
          type: string
      type: object
    TypesInfraProviderConfig:
      properties:
        created:
          type: integer
        deleted:
          nullable: true
          type: integer
        identifier:
          type: string
        is_deleted:
          type: boolean
        metadata:
          additionalProperties: {}
          nullable: true
          type: object
        name:
          type: string
        resources:
          items:
            $ref: '#/components/schemas/TypesInfraProviderResource'
          nullable: true
          type: array
        setup_yaml:
          type: string
        space_path:
          type: string
        type:
          $ref: '#/components/schemas/EnumInfraProviderType'
        updated:
          type: integer
      type: object
    TypesInfraProviderResource:
      properties:
        config_identifier:
          type: string
        config_name:
          type: string
        cpu:
          nullable: true
          type: string
        created:
          type: integer
        deleted:
          nullable: true
          type: integer
        disk:
          nullable: true
          type: string
        identifier:
          type: string
        infra_provider_type:
          $ref: '#/components/schemas/EnumInfraProviderType'
        is_deleted:
          type: boolean
        memory:
          nullable: true
          type: string
        metadata:
          additionalProperties:
            type: string
          nullable: true
          type: object
        name:
          type: string
        network:
          nullable: true
          type: string
        region:
          type: string
        space_path:
          type: string
        updated:
          type: integer
      type: object
    TypesLabel:
      properties:
        color:
          $ref: '#/components/schemas/EnumLabelColor'
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        id:
          type: integer
        key:
          type: string
        pullreq_count:
          type: integer
        repo_id:
          nullable: true
          type: integer
        scope:
          type: integer
        space_id:
          nullable: true
          type: integer
        type:
          $ref: '#/components/schemas/EnumLabelType'
        updated:
          type: integer
        updated_by:
          type: integer
        value_count:
          type: integer
      type: object
    TypesLabelAssignment:
      properties:
        assigned:
          nullable: true
          type: boolean
        assigned_value:
          $ref: '#/components/schemas/TypesLabelValueInfo'
        color:
          $ref: '#/components/schemas/EnumLabelColor'
        id:
          type: integer
        key:
          type: string
        scope:
          type: integer
        type:
          $ref: '#/components/schemas/EnumLabelType'
        values:
          items:
            $ref: '#/components/schemas/TypesLabelValueInfo'
          type: array
      type: object
    TypesLabelPullReqAssignmentInfo:
      properties:
        color:
          $ref: '#/components/schemas/EnumLabelColor'
        id:
          type: integer
        key:
          type: string
        scope:
          type: integer
        value:
          nullable: true
          type: string
        value_color:
          $ref: '#/components/schemas/EnumLabelColor'
        value_count:
          type: integer
        value_id:
          nullable: true
          type: integer
      type: object
    TypesLabelValue:
      properties:
        color:
          $ref: '#/components/schemas/EnumLabelColor'
        created:
          type: integer
        created_by:
          type: integer
        id:
          type: integer
        label_id:
          type: integer
        updated:
          type: integer
        updated_by:
          type: integer
        value:
          type: string
      type: object
    TypesLabelValueInfo:
      properties:
        color:
          nullable: true
          type: string
        id:
          nullable: true
          type: integer
        value:
          nullable: true
          type: string
      type: object
    TypesLabelWithValues:
      properties:
        label:
          $ref: '#/components/schemas/TypesLabel'
        values:
          items:
            $ref: '#/components/schemas/TypesLabelValue'
          type: array
      type: object
    TypesListCommitResponse:
      properties:
        commits:
          items:
            $ref: '#/components/schemas/TypesCommit'
          nullable: true
          type: array
        rename_details:
          items:
            $ref: '#/components/schemas/TypesRenameDetails'
          nullable: true
          type: array
        total_commits:
          type: integer
      type: object
    TypesMembershipSpace:
      properties:
        added_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        role:
          $ref: '#/components/schemas/EnumMembershipRole'
        space:
          $ref: '#/components/schemas/TypesSpace'
        updated:
          type: integer
      type: object
    TypesMembershipUser:
      properties:
        added_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        principal:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        role:
          $ref: '#/components/schemas/EnumMembershipRole'
        updated:
          type: integer
      type: object
    TypesMergeResponse:
      properties:
        allowed_methods:
          items:
            $ref: '#/components/schemas/EnumMergeMethod'
          type: array
        branch_deleted:
          type: boolean
        conflict_files:
          items:
            type: string
          type: array
        default_reviewer_aprovals:
          items:
            $ref: '#/components/schemas/TypesDefaultReviewerApprovalsResponse'
          type: array
        dry_run:
          type: boolean
        dry_run_rules:
          type: boolean
        mergeable:
          type: boolean
        minimum_required_approvals_count:
          type: integer
        minimum_required_approvals_count_latest:
          type: integer
        requires_code_owners_approval:
          type: boolean
        requires_code_owners_approval_latest:
          type: boolean
        requires_comment_resolution:
          type: boolean
        requires_no_change_requests:
          type: boolean
        rule_violations:
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
          type: array
        sha:
          type: string
      type: object
    TypesMergeViolations:
      properties:
        conflict_files:
          items:
            type: string
          type: array
        message:
          type: string
        rule_violations:
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
          type: array
      type: object
    TypesOwnerEvaluation:
      properties:
        owner:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        review_decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
        review_sha:
          type: string
      type: object
    TypesPathDetails:
      properties:
        last_commit:
          $ref: '#/components/schemas/TypesCommit'
        path:
          type: string
      type: object
    TypesPipeline:
      properties:
        config_path:
          type: string
        created:
          type: integer
        created_by:
          type: integer
        default_branch:
          type: string
        description:
          type: string
        disabled:
          type: boolean
        execution:
          $ref: '#/components/schemas/TypesExecution'
        id:
          type: integer
        identifier:
          type: string
        last_executions:
          items:
            $ref: '#/components/schemas/TypesExecutionInfo'
          type: array
        repo_id:
          type: integer
        repo_uid:
          type: string
        seq:
          type: integer
        updated:
          type: integer
      type: object
    TypesPlugin:
      properties:
        description:
          type: string
        identifier:
          type: string
        logo:
          type: string
        spec:
          type: string
        type:
          type: string
        version:
          type: string
      type: object
    TypesPrincipalInfo:
      properties:
        created:
          type: integer
        display_name:
          type: string
        email:
          type: string
        id:
          type: integer
        type:
          $ref: '#/components/schemas/EnumPrincipalType'
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesPublicKey:
      properties:
        comment:
          type: string
        created:
          type: integer
        fingerprint:
          type: string
        identifier:
          type: string
        metadata: {}
        revocation_reason:
          $ref: '#/components/schemas/EnumRevocationReason'
        scheme:
          $ref: '#/components/schemas/EnumPublicKeyScheme'
        type:
          type: string
        usage:
          $ref: '#/components/schemas/EnumPublicKeyUsage'
        valid_from:
          nullable: true
          type: integer
        valid_to:
          nullable: true
          type: integer
        verified:
          nullable: true
          type: integer
      type: object
    TypesPullReq:
      nullable: true
      properties:
        author:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        check_summary:
          $ref: '#/components/schemas/TypesCheckCountSummary'
        closed:
          nullable: true
          type: integer
        created:
          type: integer
        description:
          type: string
        edited:
          type: integer
        is_draft:
          type: boolean
        labels:
          items:
            $ref: '#/components/schemas/TypesLabelPullReqAssignmentInfo'
          type: array
        merge_base_sha:
          type: string
        merge_check_status:
          $ref: '#/components/schemas/EnumMergeCheckStatus'
        merge_conflicts:
          items:
            type: string
          type: array
        merge_method:
          $ref: '#/components/schemas/EnumMergeMethod'
        merge_target_sha:
          nullable: true
          type: string
        merge_violations_bypassed:
          nullable: true
          type: boolean
        merged:
          nullable: true
          type: integer
        merger:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        number:
          type: integer
        rebase_check_status:
          $ref: '#/components/schemas/EnumMergeCheckStatus'
        rebase_conflicts:
          items:
            type: string
          type: array
        rules:
          items:
            $ref: '#/components/schemas/TypesRuleInfo'
          type: array
        source_branch:
          type: string
        source_repo_id:
          type: integer
        source_sha:
          type: string
        state:
          $ref: '#/components/schemas/EnumPullReqState'
        stats:
          $ref: '#/components/schemas/TypesPullReqStats'
        target_branch:
          type: string
        target_repo_id:
          type: integer
        title:
          type: string
        updated:
          type: integer
      type: object
    TypesPullReqActivity:
      properties:
        author:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        code_comment:
          $ref: '#/components/schemas/TypesCodeCommentFields'
        created:
          type: integer
        deleted:
          nullable: true
          type: integer
        edited:
          type: integer
        id:
          type: integer
        kind:
          $ref: '#/components/schemas/EnumPullReqActivityKind'
        mentions:
          additionalProperties:
            $ref: '#/components/schemas/TypesPrincipalInfo'
          type: object
        metadata:
          $ref: '#/components/schemas/TypesPullReqActivityMetadata'
        order:
          type: integer
        parent_id:
          nullable: true
          type: integer
        payload: {}
        pullreq_id:
          type: integer
        repo_id:
          type: integer
        resolved:
          nullable: true
          type: integer
        resolver:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        sub_order:
          type: integer
        text:
          type: string
        type:
          $ref: '#/components/schemas/EnumPullReqActivityType'
        updated:
          type: integer
        user_group_mentions:
          additionalProperties:
            $ref: '#/components/schemas/TypesUserGroupInfo'
          type: object
      type: object
    TypesPullReqActivityMentionsMetadata:
      properties:
        ids:
          items:
            type: integer
          type: array
        user_group_ids:
          items:
            type: integer
          type: array
      type: object
    TypesPullReqActivityMetadata:
      properties:
        mentions:
          $ref: '#/components/schemas/TypesPullReqActivityMentionsMetadata'
        suggestions:
          $ref: '#/components/schemas/TypesPullReqActivitySuggestionsMetadata'
      type: object
    TypesPullReqActivitySuggestionsMetadata:
      properties:
        applied_check_sum:
          type: string
        applied_commit_sha:
          type: string
        check_sums:
          items:
            type: string
          type: array
      type: object
    TypesPullReqCheck:
      properties:
        bypassable:
          type: boolean
        check:
          $ref: '#/components/schemas/TypesCheck'
        required:
          type: boolean
      type: object
    TypesPullReqChecks:
      properties:
        checks:
          items:
            $ref: '#/components/schemas/TypesPullReqCheck'
          nullable: true
          type: array
        commit_sha:
          type: string
      type: object
    TypesPullReqFileView:
      properties:
        obsolete:
          type: boolean
        path:
          type: string
        sha:
          type: string
      type: object
    TypesPullReqLabel:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        label_id:
          type: integer
        pullreq_id:
          type: integer
        updated:
          type: integer
        updated_by:
          type: integer
        value_id:
          nullable: true
          type: integer
      type: object
    TypesPullReqLabelAssignInput:
      properties:
        label_id:
          type: integer
        value:
          type: string
        value_id:
          nullable: true
          type: integer
      type: object
    TypesPullReqRepo:
      properties:
        pull_request:
          $ref: '#/components/schemas/TypesPullReq'
        repository:
          $ref: '#/components/schemas/TypesRepositoryCore'
      type: object
    TypesPullReqReviewer:
      properties:
        added_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        latest_review_id:
          nullable: true
          type: integer
        review_decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
        reviewer:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        sha:
          type: string
        type:
          $ref: '#/components/schemas/EnumPullReqReviewerType'
        updated:
          type: integer
      type: object
    TypesPullReqStats:
      properties:
        additions:
          nullable: true
          type: integer
        commits:
          nullable: true
          type: integer
        conversations:
          type: integer
        deletions:
          nullable: true
          type: integer
        files_changed:
          nullable: true
          type: integer
        unresolved_count:
          type: integer
      type: object
    TypesRebaseResponse:
      properties:
        already_ancestor:
          type: boolean
        conflict_files:
          items:
            type: string
          type: array
        dry_run:
          type: boolean
        dry_run_rules:
          type: boolean
        new_head_branch_sha:
          $ref: '#/components/schemas/ShaSHA'
        rule_violations:
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
          type: array
      type: object
    TypesRenameDetails:
      properties:
        commit_sha_after:
          type: string
        commit_sha_before:
          type: string
        new_path:
          type: string
        old_path:
          type: string
      type: object
    TypesRepositoryCore:
      nullable: true
      properties:
        default_branch:
          type: string
        id:
          type: integer
        identifier:
          type: string
        parent_id:
          type: integer
        path:
          type: string
      type: object
    TypesRepositoryPullReqSummary:
      properties:
        closed_count:
          type: integer
        merged_count:
          type: integer
        open_count:
          type: integer
      type: object
    TypesRepositorySummary:
      properties:
        branch_count:
          type: integer
        default_branch_commit_count:
          type: integer
        pull_req_summary:
          $ref: '#/components/schemas/TypesRepositoryPullReqSummary'
        tag_count:
          type: integer
      type: object
    TypesRevertResponse:
      properties:
        branch:
          type: string
        commit:
          $ref: '#/components/schemas/TypesCommit'
      type: object
    TypesReviewerEvaluation:
      properties:
        decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
        reviewer:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        sha:
          type: string
      type: object
    TypesRuleInfo:
      properties:
        identifier:
          type: string
        repo_path:
          type: string
        space_path:
          type: string
        state:
          $ref: '#/components/schemas/EnumRuleState'
        type:
          $ref: '#/components/schemas/EnumRuleType'
      type: object
    TypesRuleViolations:
      properties:
        bypassable:
          type: boolean
        bypassed:
          type: boolean
        rule:
          $ref: '#/components/schemas/TypesRuleInfo'
        violations:
          items:
            $ref: '#/components/schemas/TypesViolation'
          nullable: true
          type: array
      type: object
    TypesRulesViolations:
      properties:
        message:
          type: string
        violations:
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
          nullable: true
          type: array
      type: object
    TypesSaveLabelInput:
      properties:
        color:
          $ref: '#/components/schemas/EnumLabelColor'
        description:
          type: string
        id:
          type: integer
        key:
          type: string
        type:
          $ref: '#/components/schemas/EnumLabelType'
      type: object
    TypesSaveLabelValueInput:
      properties:
        color:
          $ref: '#/components/schemas/EnumLabelColor'
        id:
          type: integer
        value:
          type: string
      type: object
    TypesScopeData:
      properties:
        repository:
          $ref: '#/components/schemas/TypesRepositoryCore'
        scope:
          type: integer
        space:
          $ref: '#/components/schemas/TypesSpaceCore'
      type: object
    TypesScopesLabels:
      properties:
        label_data:
          items:
            $ref: '#/components/schemas/TypesLabelAssignment'
          nullable: true
          type: array
        scope_data:
          items:
            $ref: '#/components/schemas/TypesScopeData'
          nullable: true
          type: array
      type: object
    TypesSecret:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        identifier:
          type: string
        space_id:
          type: integer
        updated:
          type: integer
      type: object
    TypesSecretRef:
      properties:
        identifier:
          type: string
      type: object
    TypesServiceAccount:
      properties:
        admin:
          type: boolean
        blocked:
          type: boolean
        created:
          type: integer
        display_name:
          type: string
        email:
          type: string
        id:
          type: integer
        parent_id:
          type: integer
        parent_type:
          $ref: '#/components/schemas/EnumParentResourceType'
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesSignature:
      properties:
        identity:
          $ref: '#/components/schemas/TypesIdentity'
        when:
          format: date-time
          type: string
      type: object
    TypesSpace:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        deleted:
          nullable: true
          type: integer
        description:
          type: string
        id:
          type: integer
        identifier:
          type: string
        parent_id:
          type: integer
        path:
          type: string
        updated:
          type: integer
      type: object
    TypesSpaceCore:
      properties:
        id:
          type: integer
        identifier:
          type: string
        parent_id:
          type: integer
        path:
          type: string
      type: object
    TypesSquashResponse:
      properties:
        conflict_files:
          items:
            type: string
          type: array
        dry_run:
          type: boolean
        dry_run_rules:
          type: boolean
        new_head_branch_sha:
          $ref: '#/components/schemas/ShaSHA'
        rule_violations:
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
          type: array
      type: object
    TypesStage:
      properties:
        arch:
          type: string
        depends_on:
          items:
            type: string
          type: array
        errignore:
          type: boolean
        error:
          type: string
        execution_id:
          type: integer
        exit_code:
          type: integer
        kernel:
          type: string
        kind:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
        limit:
          type: integer
        machine:
          type: string
        name:
          type: string
        number:
          type: integer
        on_failure:
          type: boolean
        on_success:
          type: boolean
        os:
          type: string
        repo_id:
          type: integer
        started:
          type: integer
        status:
          $ref: '#/components/schemas/EnumCIStatus'
        steps:
          items:
            $ref: '#/components/schemas/TypesStep'
          type: array
        stopped:
          type: integer
        throttle:
          type: integer
        type:
          type: string
        variant:
          type: string
      type: object
    TypesStep:
      properties:
        depends_on:
          items:
            type: string
          type: array
        detached:
          type: boolean
        errignore:
          type: boolean
        error:
          type: string
        exit_code:
          type: integer
        image:
          type: string
        name:
          type: string
        number:
          type: integer
        schema:
          type: string
        started:
          type: integer
        status:
          $ref: '#/components/schemas/EnumCIStatus'
        stopped:
          type: integer
      type: object
    TypesTemplate:
      properties:
        created:
          type: integer
        data:
          type: string
        description:
          type: string
        identifier:
          type: string
        space_id:
          type: integer
        type:
          $ref: '#/components/schemas/EnumResolverType'
        updated:
          type: integer
      type: object
    TypesToken:
      properties:
        created_by:
          type: integer
        expires_at:
          nullable: true
          type: integer
        identifier:
          type: string
        issued_at:
          type: integer
        principal_id:
          type: integer
        type:
          $ref: '#/components/schemas/EnumTokenType'
      type: object
    TypesTokenResponse:
      properties:
        access_token:
          type: string
        token:
          $ref: '#/components/schemas/TypesToken'
      type: object
    TypesTrigger:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/EnumTriggerAction'
          nullable: true
          type: array
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        disabled:
          type: boolean
        identifier:
          type: string
        pipeline_id:
          type: integer
        repo_id:
          type: integer
        trigger_type:
          type: string
        updated:
          type: integer
      type: object
    TypesUsageMetric:
      properties:
        bandwidth_in:
          type: integer
        bandwidth_out:
          type: integer
        lfs_storage_total:
          type: integer
        pushes:
          type: integer
        root_space_id:
          type: integer
        storage_total:
          type: integer
      type: object
    TypesUser:
      properties:
        admin:
          type: boolean
        blocked:
          type: boolean
        created:
          type: integer
        display_name:
          type: string
        email:
          type: string
        id:
          type: integer
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesUserGroupInfo:
      properties:
        description:
          type: string
        id:
          type: integer
        identifier:
          type: string
        name:
          type: string
        scope:
          type: integer
      type: object
    TypesUserGroupOwnerEvaluation:
      properties:
        evaluations:
          items:
            $ref: '#/components/schemas/TypesOwnerEvaluation'
          nullable: true
          type: array
        id:
          type: string
        name:
          type: string
      type: object
    TypesUserGroupReviewer:
      properties:
        added_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
        sha:
          type: string
        updated:
          type: integer
        user_decisions:
          items:
            $ref: '#/components/schemas/TypesReviewerEvaluation'
          type: array
        user_group:
          $ref: '#/components/schemas/TypesUserGroupInfo'
      type: object
    TypesViolation:
      properties:
        code:
          type: string
        message:
          type: string
        params:
          items: {}
          nullable: true
          type: array
      type: object
    TypesWebhookExecution:
      properties:
        created:
          type: integer
        duration:
          type: integer
        error:
          type: string
        id:
          type: integer
        request:
          $ref: '#/components/schemas/TypesWebhookExecutionRequest'
        response:
          $ref: '#/components/schemas/TypesWebhookExecutionResponse'
        result:
          $ref: '#/components/schemas/EnumWebhookExecutionResult'
        retrigger_of:
          nullable: true
          type: integer
        retriggerable:
          type: boolean
        trigger_type:
          $ref: '#/components/schemas/EnumWebhookTrigger'
        webhook_id:
          type: integer
      type: object
    TypesWebhookExecutionRequest:
      properties:
        body:
          type: string
        headers:
          type: string
        url:
          type: string
      type: object
    TypesWebhookExecutionResponse:
      properties:
        body:
          type: string
        headers:
          type: string
        status:
          type: string
        status_code:
          type: integer
      type: object
    UploadResult:
      properties:
        file_path:
          type: string
      type: object
    UserCreatePublicKeyInput:
      properties:
        content:
          type: string
        identifier:
          type: string
        scheme:
          $ref: '#/components/schemas/EnumPublicKeyScheme'
        usage:
          $ref: '#/components/schemas/EnumPublicKeyUsage'
      type: object
    UserCreateTokenInput:
      properties:
        identifier:
          type: string
        lifetime:
          $ref: '#/components/schemas/TimeDuration'
        uid:
          deprecated: true
          type: string
      type: object
    UserUpdateInput:
      properties:
        display_name:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
      type: object
    UsererrorError:
      properties:
        message:
          type: string
        values:
          additionalProperties: {}
          type: object
      type: object
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
